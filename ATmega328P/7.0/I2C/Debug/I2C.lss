
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000004e2  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000159e  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000921  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d1  00000000  00000000  000025cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00002e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e9  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a92  00000000  00000000  000037a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00004237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 26 02 	call	0x44c	; 0x44c <main>
  8e:	0c 94 6f 02 	jmp	0x4de	; 0x4de <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <InitAVR>:
	I2C_WriteRegister(DS1307,MONTHS_REGISTER, 0x08);
	I2C_WriteRegister(DS1307,DAYS_REGISTER, 0x31);
	I2C_WriteRegister(DS1307,YEARS_REGISTER, 0x13);
	I2C_WriteRegister(DS1307,HOURS_REGISTER, 0x08+0x40); // add 0x40 for PM
	I2C_WriteRegister(DS1307,MINUTES_REGISTER, 0x51);
	I2C_WriteRegister(DS1307,SECONDS_REGISTER, 0x00);
  96:	8f e3       	ldi	r24, 0x3F	; 63
  98:	84 b9       	out	0x04, r24	; 4
  9a:	17 b8       	out	0x07, r1	; 7
  9c:	08 95       	ret

0000009e <msDelay>:
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <msDelay+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef e9       	ldi	r30, 0x9F	; 159
  aa:	ff e0       	ldi	r31, 0x0F	; 15
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <msDelay+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <msDelay+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	28 17       	cp	r18, r24
  ba:	39 07       	cpc	r19, r25
  bc:	a9 f7       	brne	.-22     	; 0xa8 <msDelay+0xa>
  be:	08 95       	ret

000000c0 <PulseEnableLine>:
  c0:	29 9a       	sbi	0x05, 1	; 5
  c2:	85 ed       	ldi	r24, 0xD5	; 213
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <PulseEnableLine+0x4>
  c8:	00 00       	nop
  ca:	29 98       	cbi	0x05, 1	; 5
  cc:	08 95       	ret

000000ce <SendNibble>:
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	93 7c       	andi	r25, 0xC3	; 195
  d2:	95 b9       	out	0x05, r25	; 5
  d4:	84 fd       	sbrc	r24, 4
  d6:	2a 9a       	sbi	0x05, 2	; 5
  d8:	85 fd       	sbrc	r24, 5
  da:	2b 9a       	sbi	0x05, 3	; 5
  dc:	86 fd       	sbrc	r24, 6
  de:	2c 9a       	sbi	0x05, 4	; 5
  e0:	88 23       	and	r24, r24
  e2:	0c f4       	brge	.+2      	; 0xe6 <SendNibble+0x18>
  e4:	2d 9a       	sbi	0x05, 5	; 5
  e6:	0e 94 60 00 	call	0xc0	; 0xc0 <PulseEnableLine>
  ea:	08 95       	ret

000000ec <SendByte>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	0e 94 67 00 	call	0xce	; 0xce <SendNibble>
  f4:	8c 2f       	mov	r24, r28
  f6:	82 95       	swap	r24
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	0e 94 67 00 	call	0xce	; 0xce <SendNibble>
  fe:	2d 98       	cbi	0x05, 5	; 5
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_Cmd>:
 104:	28 98       	cbi	0x05, 0	; 5
 106:	0e 94 76 00 	call	0xec	; 0xec <SendByte>
 10a:	08 95       	ret

0000010c <LCD_Char>:
 10c:	28 9a       	sbi	0x05, 0	; 5
 10e:	0e 94 76 00 	call	0xec	; 0xec <SendByte>
 112:	08 95       	ret

00000114 <LCD_Init>:
 114:	83 e3       	ldi	r24, 0x33	; 51
 116:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 120:	88 e2       	ldi	r24, 0x28	; 40
 122:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 4f 00 	call	0x9e	; 0x9e <msDelay>
 140:	08 95       	ret

00000142 <LCD_Clear>:
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 4f 00 	call	0x9e	; 0x9e <msDelay>
 150:	08 95       	ret

00000152 <LCD_Goto>:
 152:	62 30       	cpi	r22, 0x02	; 2
 154:	31 f0       	breq	.+12     	; 0x162 <LCD_Goto+0x10>
 156:	63 30       	cpi	r22, 0x03	; 3
 158:	31 f0       	breq	.+12     	; 0x166 <LCD_Goto+0x14>
 15a:	61 30       	cpi	r22, 0x01	; 1
 15c:	31 f4       	brne	.+12     	; 0x16a <LCD_Goto+0x18>
 15e:	90 e4       	ldi	r25, 0x40	; 64
 160:	05 c0       	rjmp	.+10     	; 0x16c <LCD_Goto+0x1a>
 162:	94 e1       	ldi	r25, 0x14	; 20
 164:	03 c0       	rjmp	.+6      	; 0x16c <LCD_Goto+0x1a>
 166:	94 e5       	ldi	r25, 0x54	; 84
 168:	01 c0       	rjmp	.+2      	; 0x16c <LCD_Goto+0x1a>
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	80 58       	subi	r24, 0x80	; 128
 16e:	89 0f       	add	r24, r25
 170:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 174:	08 95       	ret

00000176 <LCD_Line>:
 176:	68 2f       	mov	r22, r24
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Goto>
 17e:	08 95       	ret

00000180 <LCD_String>:
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
 186:	88 81       	ld	r24, Y
 188:	88 23       	and	r24, r24
 18a:	31 f0       	breq	.+12     	; 0x198 <LCD_String+0x18>
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Char>
 192:	89 91       	ld	r24, Y+
 194:	81 11       	cpse	r24, r1
 196:	fb cf       	rjmp	.-10     	; 0x18e <LCD_String+0xe>
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <LCD_Hex>:
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	28 97       	sbiw	r28, 0x08	; 8
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	19 82       	std	Y+1, r1	; 0x01
 1b4:	1a 82       	std	Y+2, r1	; 0x02
 1b6:	1b 82       	std	Y+3, r1	; 0x03
 1b8:	1c 82       	std	Y+4, r1	; 0x04
 1ba:	1d 82       	std	Y+5, r1	; 0x05
 1bc:	1e 82       	std	Y+6, r1	; 0x06
 1be:	1f 82       	std	Y+7, r1	; 0x07
 1c0:	18 86       	std	Y+8, r1	; 0x08
 1c2:	40 e1       	ldi	r20, 0x10	; 16
 1c4:	be 01       	movw	r22, r28
 1c6:	6f 5f       	subi	r22, 0xFF	; 255
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	0e 94 3a 02 	call	0x474	; 0x474 <__itoa_ncheck>
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_String>
 1d6:	28 96       	adiw	r28, 0x08	; 8
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <I2C_Init>:
 1e8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1ec:	88 e4       	ldi	r24, 0x48	; 72
 1ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 1f2:	08 95       	ret

000001f4 <I2C_Detect>:
 1f4:	94 ea       	ldi	r25, 0xA4	; 164
 1f6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1fa:	ec eb       	ldi	r30, 0xBC	; 188
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	99 23       	and	r25, r25
 202:	ec f7       	brge	.-6      	; 0x1fe <I2C_Detect+0xa>
 204:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 20e:	ec eb       	ldi	r30, 0xBC	; 188
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	ec f7       	brge	.-6      	; 0x212 <I2C_Detect+0x1e>
 218:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 21c:	98 7f       	andi	r25, 0xF8	; 248
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	98 31       	cpi	r25, 0x18	; 24
 222:	09 f0       	breq	.+2      	; 0x226 <I2C_Detect+0x32>
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret

00000228 <I2C_FindDevice>:
 228:	cf 93       	push	r28
 22a:	c8 2f       	mov	r28, r24
 22c:	8f 3f       	cpi	r24, 0xFF	; 255
 22e:	49 f0       	breq	.+18     	; 0x242 <I2C_FindDevice+0x1a>
 230:	8c 2f       	mov	r24, r28
 232:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Detect>
 236:	81 11       	cpse	r24, r1
 238:	06 c0       	rjmp	.+12     	; 0x246 <I2C_FindDevice+0x1e>
 23a:	cf 5f       	subi	r28, 0xFF	; 255
 23c:	cf 3f       	cpi	r28, 0xFF	; 255
 23e:	c1 f7       	brne	.-16     	; 0x230 <I2C_FindDevice+0x8>
 240:	03 c0       	rjmp	.+6      	; 0x248 <I2C_FindDevice+0x20>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	01 c0       	rjmp	.+2      	; 0x248 <I2C_FindDevice+0x20>
 246:	8c 2f       	mov	r24, r28
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <I2C_Write>:
 24c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 250:	84 e8       	ldi	r24, 0x84	; 132
 252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 256:	ec eb       	ldi	r30, 0xBC	; 188
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	88 23       	and	r24, r24
 25e:	ec f7       	brge	.-6      	; 0x25a <I2C_Write+0xe>
 260:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 264:	98 7f       	andi	r25, 0xF8	; 248
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	98 32       	cpi	r25, 0x28	; 40
 26a:	09 f4       	brne	.+2      	; 0x26e <I2C_Write+0x22>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret

00000270 <I2C_ReadNACK>:
 270:	84 e8       	ldi	r24, 0x84	; 132
 272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 276:	ec eb       	ldi	r30, 0xBC	; 188
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	ec f7       	brge	.-6      	; 0x27a <I2C_ReadNACK+0xa>
 280:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 284:	08 95       	ret

00000286 <I2C_ReadRegister>:
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	c8 2f       	mov	r28, r24
 28c:	d6 2f       	mov	r29, r22
 28e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Detect>
 292:	8d 2f       	mov	r24, r29
 294:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Write>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	8c 0f       	add	r24, r28
 29c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <I2C_Detect>
 2a0:	0e 94 38 01 	call	0x270	; 0x270 <I2C_ReadNACK>
 2a4:	94 e9       	ldi	r25, 0x94	; 148
 2a6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <DS1307_GetTime>:
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ec 01       	movw	r28, r24
 2be:	7b 01       	movw	r14, r22
 2c0:	8a 01       	movw	r16, r20
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	80 ed       	ldi	r24, 0xD0	; 208
 2c6:	0e 94 43 01 	call	0x286	; 0x286 <I2C_ReadRegister>
 2ca:	88 83       	st	Y, r24
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	80 ed       	ldi	r24, 0xD0	; 208
 2d0:	0e 94 43 01 	call	0x286	; 0x286 <I2C_ReadRegister>
 2d4:	f7 01       	movw	r30, r14
 2d6:	80 83       	st	Z, r24
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	80 ed       	ldi	r24, 0xD0	; 208
 2dc:	0e 94 43 01 	call	0x286	; 0x286 <I2C_ReadRegister>
 2e0:	f8 01       	movw	r30, r16
 2e2:	80 83       	st	Z, r24
 2e4:	98 81       	ld	r25, Y
 2e6:	96 ff       	sbrs	r25, 6
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <DS1307_GetTime+0x40>
 2ea:	9f 71       	andi	r25, 0x1F	; 31
 2ec:	98 83       	st	Y, r25
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DS1307_GetTime+0x44>
 2f0:	9f 73       	andi	r25, 0x3F	; 63
 2f2:	98 83       	st	Y, r25
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	08 95       	ret

00000302 <DS1307_GetDate>:
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	7c 01       	movw	r14, r24
 310:	8b 01       	movw	r16, r22
 312:	ea 01       	movw	r28, r20
 314:	65 e0       	ldi	r22, 0x05	; 5
 316:	80 ed       	ldi	r24, 0xD0	; 208
 318:	0e 94 43 01 	call	0x286	; 0x286 <I2C_ReadRegister>
 31c:	f7 01       	movw	r30, r14
 31e:	80 83       	st	Z, r24
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	80 ed       	ldi	r24, 0xD0	; 208
 324:	0e 94 43 01 	call	0x286	; 0x286 <I2C_ReadRegister>
 328:	f8 01       	movw	r30, r16
 32a:	80 83       	st	Z, r24
 32c:	66 e0       	ldi	r22, 0x06	; 6
 32e:	80 ed       	ldi	r24, 0xD0	; 208
 330:	0e 94 43 01 	call	0x286	; 0x286 <I2C_ReadRegister>
 334:	88 83       	st	Y, r24
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	08 95       	ret

00000344 <ShowDevices>:
}
// ---------------------------------------------------------------------------
// APPLICATION ROUTINES
void ShowDevices()
// Scan I2C addresses and display addresses of all devices found
{
 344:	cf 93       	push	r28
	LCD_Line(1); LCD_String("Found:");
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Line>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_String>
	byte addr = 1;
 354:	c1 e0       	ldi	r28, 0x01	; 1
	while (addr>0)
	{
		LCD_Char(' ');
 356:	80 e2       	ldi	r24, 0x20	; 32
 358:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Char>
		addr = I2C_FindDevice(addr);
 35c:	8c 2f       	mov	r24, r28
 35e:	0e 94 14 01 	call	0x228	; 0x228 <I2C_FindDevice>
		if (addr>0) LCD_Hex(addr++);
 362:	88 23       	and	r24, r24
 364:	39 f0       	breq	.+14     	; 0x374 <ShowDevices+0x30>
 366:	c1 e0       	ldi	r28, 0x01	; 1
 368:	c8 0f       	add	r28, r24
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Hex>
void ShowDevices()
// Scan I2C addresses and display addresses of all devices found
{
	LCD_Line(1); LCD_String("Found:");
	byte addr = 1;
	while (addr>0)
 370:	c1 11       	cpse	r28, r1
 372:	f1 cf       	rjmp	.-30     	; 0x356 <ShowDevices+0x12>
	{
		LCD_Char(' ');
		addr = I2C_FindDevice(addr);
		if (addr>0) LCD_Hex(addr++);
	}
}
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <LCD_TwoDigits>:
void LCD_TwoDigits(byte data)
// helper function for WriteDate()
// input is two digits in BCD format
// output is to LCD display at current cursor position
{
 378:	cf 93       	push	r28
 37a:	c8 2f       	mov	r28, r24
	byte temp = data>>4;
 37c:	82 95       	swap	r24
 37e:	8f 70       	andi	r24, 0x0F	; 15
	LCD_Char(temp+'0');
 380:	80 5d       	subi	r24, 0xD0	; 208
 382:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Char>
	data &= 0x0F;
 386:	8c 2f       	mov	r24, r28
 388:	8f 70       	andi	r24, 0x0F	; 15
	LCD_Char(data+'0');
 38a:	80 5d       	subi	r24, 0xD0	; 208
 38c:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Char>
}
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <WriteDate>:
void WriteDate()
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	00 d0       	rcall	.+0      	; 0x39a <WriteDate+0x6>
 39a:	1f 92       	push	r1
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
	byte months, days, years;
	DS1307_GetDate(&months,&days,&years);
 3a0:	ae 01       	movw	r20, r28
 3a2:	4d 5f       	subi	r20, 0xFD	; 253
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	be 01       	movw	r22, r28
 3a8:	6e 5f       	subi	r22, 0xFE	; 254
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	0e 94 81 01 	call	0x302	; 0x302 <DS1307_GetDate>
	LCD_TwoDigits(months);
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_TwoDigits>
	LCD_Char('/');
 3ba:	8f e2       	ldi	r24, 0x2F	; 47
 3bc:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Char>
	LCD_TwoDigits(days);
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_TwoDigits>
	LCD_Char('/');
 3c6:	8f e2       	ldi	r24, 0x2F	; 47
 3c8:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Char>
	LCD_TwoDigits(years);
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_TwoDigits>
}
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <WriteTime>:
void WriteTime()
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <WriteTime+0x6>
 3e4:	1f 92       	push	r1
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
	byte hours, minutes, seconds;
	DS1307_GetTime(&hours,&minutes,&seconds);
 3ea:	ae 01       	movw	r20, r28
 3ec:	4d 5f       	subi	r20, 0xFD	; 253
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255
 3f0:	be 01       	movw	r22, r28
 3f2:	6e 5f       	subi	r22, 0xFE	; 254
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	ce 01       	movw	r24, r28
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DS1307_GetTime>
	LCD_TwoDigits(hours);
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_TwoDigits>
	LCD_Char(':');
 404:	8a e3       	ldi	r24, 0x3A	; 58
 406:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Char>
	LCD_TwoDigits(minutes);
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_TwoDigits>
	LCD_Char(':');
 410:	8a e3       	ldi	r24, 0x3A	; 58
 412:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Char>
	LCD_TwoDigits(seconds);
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_TwoDigits>
}
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <LCD_TimeDate>:
void LCD_TimeDate()
{
	LCD_Line(0); WriteTime();
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Line>
 42e:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteTime>
	LCD_Line(1); WriteDate();
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Line>
 438:	0e 94 ca 01 	call	0x394	; 0x394 <WriteDate>
 43c:	08 95       	ret

0000043e <MainLoop>:
// PROGRAM LOOP
void MainLoop()
{
	while(1)
	{
		LCD_TimeDate(); // put time & date on LCD
 43e:	0e 94 14 02 	call	0x428	; 0x428 <LCD_TimeDate>
		msDelay(1000); // one second between updates
 442:	88 ee       	ldi	r24, 0xE8	; 232
 444:	93 e0       	ldi	r25, 0x03	; 3
 446:	0e 94 4f 00 	call	0x9e	; 0x9e <msDelay>
	}
 44a:	f9 cf       	rjmp	.-14     	; 0x43e <MainLoop>

0000044c <main>:
}
// ---------------------------------------------------------------------------
// MAIN PROGRAM
int main(void)
{
	InitAVR(); // set port direction
 44c:	0e 94 4b 00 	call	0x96	; 0x96 <InitAVR>
	LCD_Init(); // initialize HD44780 LCD controller
 450:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Init>
	I2C_Init(); // set I2C clock frequency
 454:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_Init>
	LCD_String("Ready.");
 458:	87 e0       	ldi	r24, 0x07	; 7
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_String>
	ShowDevices(); // show that I2C is working OK
 460:	0e 94 a2 01 	call	0x344	; 0x344 <ShowDevices>
	msDelay(4000);
 464:	80 ea       	ldi	r24, 0xA0	; 160
 466:	9f e0       	ldi	r25, 0x0F	; 15
 468:	0e 94 4f 00 	call	0x9e	; 0x9e <msDelay>
	LCD_Clear();
 46c:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Clear>
	MainLoop(); // display time
 470:	0e 94 1f 02 	call	0x43e	; 0x43e <MainLoop>

00000474 <__itoa_ncheck>:
 474:	bb 27       	eor	r27, r27
 476:	4a 30       	cpi	r20, 0x0A	; 10
 478:	31 f4       	brne	.+12     	; 0x486 <__itoa_ncheck+0x12>
 47a:	99 23       	and	r25, r25
 47c:	22 f4       	brpl	.+8      	; 0x486 <__itoa_ncheck+0x12>
 47e:	bd e2       	ldi	r27, 0x2D	; 45
 480:	90 95       	com	r25
 482:	81 95       	neg	r24
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	0c 94 46 02 	jmp	0x48c	; 0x48c <__utoa_common>

0000048a <__utoa_ncheck>:
 48a:	bb 27       	eor	r27, r27

0000048c <__utoa_common>:
 48c:	fb 01       	movw	r30, r22
 48e:	55 27       	eor	r21, r21
 490:	aa 27       	eor	r26, r26
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	aa 1f       	adc	r26, r26
 498:	a4 17       	cp	r26, r20
 49a:	10 f0       	brcs	.+4      	; 0x4a0 <__utoa_common+0x14>
 49c:	a4 1b       	sub	r26, r20
 49e:	83 95       	inc	r24
 4a0:	50 51       	subi	r21, 0x10	; 16
 4a2:	b9 f7       	brne	.-18     	; 0x492 <__utoa_common+0x6>
 4a4:	a0 5d       	subi	r26, 0xD0	; 208
 4a6:	aa 33       	cpi	r26, 0x3A	; 58
 4a8:	08 f0       	brcs	.+2      	; 0x4ac <__utoa_common+0x20>
 4aa:	a9 5d       	subi	r26, 0xD9	; 217
 4ac:	a1 93       	st	Z+, r26
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	79 f7       	brne	.-34     	; 0x490 <__utoa_common+0x4>
 4b2:	b1 11       	cpse	r27, r1
 4b4:	b1 93       	st	Z+, r27
 4b6:	11 92       	st	Z+, r1
 4b8:	cb 01       	movw	r24, r22
 4ba:	0c 94 5f 02 	jmp	0x4be	; 0x4be <strrev>

000004be <strrev>:
 4be:	dc 01       	movw	r26, r24
 4c0:	fc 01       	movw	r30, r24
 4c2:	67 2f       	mov	r22, r23
 4c4:	71 91       	ld	r23, Z+
 4c6:	77 23       	and	r23, r23
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <strrev+0x4>
 4ca:	32 97       	sbiw	r30, 0x02	; 2
 4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <strrev+0x18>
 4ce:	7c 91       	ld	r23, X
 4d0:	6d 93       	st	X+, r22
 4d2:	70 83       	st	Z, r23
 4d4:	62 91       	ld	r22, -Z
 4d6:	ae 17       	cp	r26, r30
 4d8:	bf 07       	cpc	r27, r31
 4da:	c8 f3       	brcs	.-14     	; 0x4ce <strrev+0x10>
 4dc:	08 95       	ret

000004de <_exit>:
 4de:	f8 94       	cli

000004e0 <__stop_program>:
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <__stop_program>
