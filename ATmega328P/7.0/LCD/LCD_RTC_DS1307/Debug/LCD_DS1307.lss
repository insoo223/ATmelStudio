
LCD_DS1307.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000354  00800100  00001354  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800454  00800454  0000173c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000449d  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131f  00000000  00000000  00005ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c17  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00008e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c1  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017d3  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000b5fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_3>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	9a 01       	movw	r18, r20
      6a:	9e 01       	movw	r18, r28
      6c:	9a 01       	movw	r18, r20
      6e:	a2 01       	movw	r20, r4
      70:	9a 01       	movw	r18, r20
      72:	a2 01       	movw	r20, r4
      74:	9a 01       	movw	r18, r20
      76:	9a 01       	movw	r18, r20
      78:	a2 01       	movw	r20, r4
      7a:	9a 01       	movw	r18, r20
      7c:	a2 01       	movw	r20, r4
      7e:	9a 01       	movw	r18, r20
      80:	64 03       	mulsu	r22, r20
      82:	6d 03       	fmul	r22, r21
      84:	76 03       	mulsu	r23, r22
      86:	7f 03       	fmul	r23, r23
      88:	88 03       	fmulsu	r16, r16
      8a:	91 03       	fmuls	r17, r17
      8c:	9a 03       	fmulsu	r17, r18

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	14 e0       	ldi	r17, 0x04	; 4
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e4 e5       	ldi	r30, 0x54	; 84
      a2:	f3 e1       	ldi	r31, 0x13	; 19
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a4 35       	cpi	r26, 0x54	; 84
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	24 e0       	ldi	r18, 0x04	; 4
      b2:	a4 e5       	ldi	r26, 0x54	; 84
      b4:	b4 e0       	ldi	r27, 0x04	; 4
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a5 36       	cpi	r26, 0x65	; 101
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 ae 02 	call	0x55c	; 0x55c <main>
      c4:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <I2C_Init>:
 {
	 I2C_Start(busAddr); // send bus address
	 I2C_Write(deviceRegister); // first byte = device register address
	 I2C_Write(data); // second byte = data for device register
	 I2C_Stop();
 }
      cc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
      d0:	8d ef       	ldi	r24, 0xFD	; 253
      d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
      d6:	08 95       	ret

000000d8 <I2C_Detect>:
      d8:	94 ea       	ldi	r25, 0xA4	; 164
      da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      de:	ec eb       	ldi	r30, 0xBC	; 188
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	90 81       	ld	r25, Z
      e4:	99 23       	and	r25, r25
      e6:	ec f7       	brge	.-6      	; 0xe2 <I2C_Detect+0xa>
      e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      ec:	84 e8       	ldi	r24, 0x84	; 132
      ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      f2:	ec eb       	ldi	r30, 0xBC	; 188
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	88 23       	and	r24, r24
      fa:	ec f7       	brge	.-6      	; 0xf6 <I2C_Detect+0x1e>
      fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     100:	98 7f       	andi	r25, 0xF8	; 248
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	98 31       	cpi	r25, 0x18	; 24
     106:	09 f0       	breq	.+2      	; 0x10a <I2C_Detect+0x32>
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	08 95       	ret

0000010c <I2C_Write>:
     10c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     110:	84 e8       	ldi	r24, 0x84	; 132
     112:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     116:	ec eb       	ldi	r30, 0xBC	; 188
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	80 81       	ld	r24, Z
     11c:	88 23       	and	r24, r24
     11e:	ec f7       	brge	.-6      	; 0x11a <I2C_Write+0xe>
     120:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     124:	98 7f       	andi	r25, 0xF8	; 248
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	98 32       	cpi	r25, 0x28	; 40
     12a:	09 f4       	brne	.+2      	; 0x12e <I2C_Write+0x22>
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	08 95       	ret

00000130 <I2C_ReadNACK>:
     130:	84 e8       	ldi	r24, 0x84	; 132
     132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     136:	ec eb       	ldi	r30, 0xBC	; 188
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	88 23       	and	r24, r24
     13e:	ec f7       	brge	.-6      	; 0x13a <I2C_ReadNACK+0xa>
     140:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     144:	08 95       	ret

00000146 <I2C_ReadRegister>:
 byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
 {
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	c8 2f       	mov	r28, r24
     14c:	d6 2f       	mov	r29, r22
	 }
	 return 0; // none detected, so return 0.
 }
 void I2C_Start (byte slaveAddr)
 {
	 I2C_Detect(slaveAddr);
     14e:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_Detect>
 }
 byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
 {
	 byte data = 0;
	 I2C_Start(busAddr); // send device address
	 I2C_Write(deviceRegister); // set register pointer
     152:	8d 2f       	mov	r24, r29
     154:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_Write>
	 }
	 return 0; // none detected, so return 0.
 }
 void I2C_Start (byte slaveAddr)
 {
	 I2C_Detect(slaveAddr);
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	8c 0f       	add	r24, r28
     15c:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_Detect>
 {
	 byte data = 0;
	 I2C_Start(busAddr); // send device address
	 I2C_Write(deviceRegister); // set register pointer
	 I2C_Start(busAddr+READ); // restart as a read operation
	 data = I2C_ReadNACK(); // read the register data
     160:	0e 94 98 00 	call	0x130	; 0x130 <I2C_ReadNACK>
	 I2C_Stop(); // stop
     164:	94 e9       	ldi	r25, 0x94	; 148
     166:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	 return data;
 }
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <__vector_3>:
    EIMSK = 0x00;

    TIMSK0 = 0x02; //timer 0 interrupt sources

    PRR = 0x00; //power controller
    sei(); //re-enable interrupts
     170:	1f 92       	push	r1
     172:	0f 92       	push	r0
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	0f 92       	push	r0
     178:	11 24       	eor	r1, r1
     17a:	2f 93       	push	r18
     17c:	3f 93       	push	r19
     17e:	4f 93       	push	r20
     180:	5f 93       	push	r21
     182:	6f 93       	push	r22
     184:	7f 93       	push	r23
     186:	8f 93       	push	r24
     188:	9f 93       	push	r25
     18a:	af 93       	push	r26
     18c:	bf 93       	push	r27
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	ef 93       	push	r30
     194:	ff 93       	push	r31
     196:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <btcnt>
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	98 0f       	add	r25, r24
     19e:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <btcnt>
     1a2:	80 fd       	sbrc	r24, 0
     1a4:	2f c0       	rjmp	.+94     	; 0x204 <__vector_3+0x94>
     1a6:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <pwrOn>
     1aa:	81 11       	cpse	r24, r1
     1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <__vector_3+0x58>
     1ae:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <makePDasOutput>
     1b2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_init_4d>
     1b6:	83 ec       	ldi	r24, 0xC3	; 195
     1b8:	99 e0       	ldi	r25, 0x09	; 9
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <__vector_3+0x4a>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <__vector_3+0x50>
     1c0:	00 00       	nop
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <pwrOn>
     1c8:	1c 9b       	sbis	0x03, 4	; 3
     1ca:	16 c0       	rjmp	.+44     	; 0x1f8 <__vector_3+0x88>
     1cc:	cb e6       	ldi	r28, 0x6B	; 107
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
     1d0:	88 81       	ld	r24, Y
     1d2:	8f 7e       	andi	r24, 0xEF	; 239
     1d4:	88 83       	st	Y, r24
     1d6:	81 ee       	ldi	r24, 0xE1	; 225
     1d8:	94 e0       	ldi	r25, 0x04	; 4
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <__vector_3+0x6a>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <__vector_3+0x70>
     1e0:	00 00       	nop
     1e2:	0e 94 26 08 	call	0x104c	; 0x104c <countButton>
     1e6:	88 81       	ld	r24, Y
     1e8:	80 61       	ori	r24, 0x10	; 16
     1ea:	88 83       	st	Y, r24
     1ec:	81 ee       	ldi	r24, 0xE1	; 225
     1ee:	94 e0       	ldi	r25, 0x04	; 4
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <__vector_3+0x80>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <__vector_3+0x86>
     1f6:	00 00       	nop
     1f8:	8f e4       	ldi	r24, 0x4F	; 79
     1fa:	93 ec       	ldi	r25, 0xC3	; 195
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <__vector_3+0x8c>
     200:	00 c0       	rjmp	.+0      	; 0x202 <__vector_3+0x92>
     202:	00 00       	nop
     204:	ff 91       	pop	r31
     206:	ef 91       	pop	r30
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	bf 91       	pop	r27
     20e:	af 91       	pop	r26
     210:	9f 91       	pop	r25
     212:	8f 91       	pop	r24
     214:	7f 91       	pop	r23
     216:	6f 91       	pop	r22
     218:	5f 91       	pop	r21
     21a:	4f 91       	pop	r20
     21c:	3f 91       	pop	r19
     21e:	2f 91       	pop	r18
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <initINT>:
     22a:	f8 94       	cli
     22c:	e8 e6       	ldi	r30, 0x68	; 104
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 83       	st	Z, r24
     236:	eb e6       	ldi	r30, 0x6B	; 107
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	80 61       	ori	r24, 0x10	; 16
     23e:	80 83       	st	Z, r24
     240:	78 94       	sei
     242:	08 95       	ret

00000244 <proceedClock>:
}

void proceedClock()
{
    //WDT interrupt occurs every 8 seconds
    sec += 8;
     244:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <sec>
     248:	88 5f       	subi	r24, 0xF8	; 248
     24a:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <sec>
    accumulatedSec += 8;
     24e:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <accumulatedSec>
     252:	28 5f       	subi	r18, 0xF8	; 248
     254:	20 93 56 04 	sts	0x0456, r18	; 0x800456 <accumulatedSec>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
     258:	8c 33       	cpi	r24, 0x3C	; 60
     25a:	5c f0       	brlt	.+22     	; 0x272 <proceedClock+0x2e>
    {
        sec%=60;
        min++;
     25c:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <min>
     260:	9f 5f       	subi	r25, 0xFF	; 255
     262:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <min>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
    {
        sec%=60;
     266:	6c e3       	ldi	r22, 0x3C	; 60
     268:	0e 94 ba 08 	call	0x1174	; 0x1174 <__divmodqi4>
        min++;
        sec += 2;
     26c:	9e 5f       	subi	r25, 0xFE	; 254
     26e:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <sec>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
     272:	2c 33       	cpi	r18, 0x3C	; 60
     274:	64 f0       	brlt	.+24     	; 0x28e <proceedClock+0x4a>
    {
        accumulatedSec%=60;
        accumulatedMin++;
     276:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <accumulatedMin>
     27a:	8f 5f       	subi	r24, 0xFF	; 255
     27c:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <accumulatedMin>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
    {
        accumulatedSec%=60;
     280:	82 2f       	mov	r24, r18
     282:	6c e3       	ldi	r22, 0x3C	; 60
     284:	0e 94 ba 08 	call	0x1174	; 0x1174 <__divmodqi4>
        accumulatedMin++;
        accumulatedSec += 2;
     288:	9e 5f       	subi	r25, 0xFE	; 254
     28a:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <accumulatedSec>
    }

    //real-time fetched from compiled time constant __TIME__
    //calculate hours
    if (min >= 60)
     28e:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <min>
     292:	8c 33       	cpi	r24, 0x3C	; 60
     294:	54 f0       	brlt	.+20     	; 0x2aa <proceedClock+0x66>
    {
        min%=60;
     296:	6c e3       	ldi	r22, 0x3C	; 60
     298:	0e 94 ba 08 	call	0x1174	; 0x1174 <__divmodqi4>
     29c:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <min>
        hour++;
     2a0:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <hour>
     2a4:	8f 5f       	subi	r24, 0xFF	; 255
     2a6:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <hour>
    }
    //system run-time acculated time
    //calculate hours
    //if ((accumulatedMin == 60) && (hourlyAdjusted == 0))
    if (accumulatedMin == 60)
     2aa:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <accumulatedMin>
     2ae:	8c 33       	cpi	r24, 0x3C	; 60
     2b0:	61 f4       	brne	.+24     	; 0x2ca <proceedClock+0x86>
    {
        // adjust time by experiments
        //hourlyAdjusted = 1;
        sec -= 20;
     2b2:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <sec>
     2b6:	84 51       	subi	r24, 0x14	; 20
     2b8:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <sec>
        accumulatedMin = 0;
     2bc:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <accumulatedMin>
        accumulatedHour++;
     2c0:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <accumulatedHour>
     2c4:	8f 5f       	subi	r24, 0xFF	; 255
     2c6:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <accumulatedHour>
    }
    /*
    if (accumulatedMin == 59)
        hourlyAdjusted = 0;
    */
    if (hour >= 24)
     2ca:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <hour>
     2ce:	88 31       	cpi	r24, 0x18	; 24
     2d0:	04 f1       	brlt	.+64     	; 0x312 <proceedClock+0xce>
    {
        hour=0;
     2d2:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <hour>
        date++;
     2d6:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <date>
     2da:	8f 5f       	subi	r24, 0xFF	; 255
     2dc:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <date>
        day++;
     2e0:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <day>
     2e4:	8f 5f       	subi	r24, 0xFF	; 255
        if (day >= 7)
     2e6:	87 30       	cpi	r24, 0x07	; 7
     2e8:	1c f4       	brge	.+6      	; 0x2f0 <proceedClock+0xac>
    */
    if (hour >= 24)
    {
        hour=0;
        date++;
        day++;
     2ea:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <day>
     2ee:	11 c0       	rjmp	.+34     	; 0x312 <proceedClock+0xce>
        if (day >= 7)
            day %= 7;
     2f0:	93 e9       	ldi	r25, 0x93	; 147
     2f2:	89 02       	muls	r24, r25
     2f4:	91 2d       	mov	r25, r1
     2f6:	11 24       	eor	r1, r1
     2f8:	98 0f       	add	r25, r24
     2fa:	95 95       	asr	r25
     2fc:	95 95       	asr	r25
     2fe:	87 fd       	sbrc	r24, 7
     300:	93 95       	inc	r25
     302:	29 2f       	mov	r18, r25
     304:	22 0f       	add	r18, r18
     306:	22 0f       	add	r18, r18
     308:	22 0f       	add	r18, r18
     30a:	29 1b       	sub	r18, r25
     30c:	82 1b       	sub	r24, r18
     30e:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <day>
    }
    switch (month)
     312:	20 91 5b 04 	lds	r18, 0x045B	; 0x80045b <month>
     316:	82 2f       	mov	r24, r18
     318:	02 2e       	mov	r0, r18
     31a:	00 0c       	add	r0, r0
     31c:	99 0b       	sbc	r25, r25
     31e:	aa 0b       	sbc	r26, r26
     320:	bb 0b       	sbc	r27, r27
     322:	fc 01       	movw	r30, r24
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	ec 30       	cpi	r30, 0x0C	; 12
     328:	f1 05       	cpc	r31, r1
     32a:	60 f4       	brcc	.+24     	; 0x344 <proceedClock+0x100>
     32c:	ec 5c       	subi	r30, 0xCC	; 204
     32e:	ff 4f       	sbci	r31, 0xFF	; 255
     330:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__tablejump2__>
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            monthEndDate = 31;
     334:	8f e1       	ldi	r24, 0x1F	; 31
     336:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <monthEndDate>
            break;
     33a:	07 c0       	rjmp	.+14     	; 0x34a <proceedClock+0x106>
        case 2:
            monthEndDate = 28;
     33c:	8c e1       	ldi	r24, 0x1C	; 28
     33e:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <monthEndDate>
            break;
     342:	03 c0       	rjmp	.+6      	; 0x34a <proceedClock+0x106>
        default:
            monthEndDate = 30;
     344:	8e e1       	ldi	r24, 0x1E	; 30
     346:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <monthEndDate>
    }//switch (month)

    if (date > monthEndDate)
     34a:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <date>
     34e:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <monthEndDate>
     352:	89 17       	cp	r24, r25
     354:	34 f4       	brge	.+12     	; 0x362 <proceedClock+0x11e>
    {
        date=1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <date>
        month++;
     35c:	2f 5f       	subi	r18, 0xFF	; 255
     35e:	20 93 5b 04 	sts	0x045B, r18	; 0x80045b <month>
    }

    if (month > 12)
     362:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <month>
     366:	8d 30       	cpi	r24, 0x0D	; 13
     368:	44 f0       	brlt	.+16     	; 0x37a <proceedClock+0x136>
    {
        month=1;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
        year++;
     370:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <year>
     374:	8f 5f       	subi	r24, 0xFF	; 255
     376:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <year>
     37a:	08 95       	ret

0000037c <__vector_6>:
	}//if ((btcnt++ % 2) == 0)
}//ISR(PCINT0_vect)

//-----------------------------------
ISR(WDT_vect)
{
     37c:	1f 92       	push	r1
     37e:	0f 92       	push	r0
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	0f 92       	push	r0
     384:	11 24       	eor	r1, r1
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
    //PORTB |= _BV(PB4);
    proceedClock();
     39e:	0e 94 22 01 	call	0x244	; 0x244 <proceedClock>
    lcd_dispWords(wd%MAXWORDCNT);
     3a2:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <wd>
     3a6:	9d ec       	ldi	r25, 0xCD	; 205
     3a8:	89 9f       	mul	r24, r25
     3aa:	91 2d       	mov	r25, r1
     3ac:	11 24       	eor	r1, r1
     3ae:	96 95       	lsr	r25
     3b0:	96 95       	lsr	r25
     3b2:	96 95       	lsr	r25
     3b4:	99 0f       	add	r25, r25
     3b6:	29 2f       	mov	r18, r25
     3b8:	22 0f       	add	r18, r18
     3ba:	22 0f       	add	r18, r18
     3bc:	92 0f       	add	r25, r18
     3be:	89 1b       	sub	r24, r25
     3c0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <lcd_dispWords>
    wd++;
     3c4:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <wd>
     3c8:	8f 5f       	subi	r24, 0xFF	; 255
     3ca:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <wd>
    //lcd_dispRealClock();
    //PORTB &= ~_BV(PB4);
}//ISR(WDT_vect)
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~_BV(lcd_D7_bit);                        // assume that data is '0'
     3f0:	5f 98       	cbi	0x0b, 7	; 11
    if (theByte & 1<<7) lcd_D7_port |= _BV(lcd_D7_bit);     // make data = '1' if necessary
     3f2:	88 23       	and	r24, r24
     3f4:	0c f4       	brge	.+2      	; 0x3f8 <lcd_write_4+0x8>
     3f6:	5f 9a       	sbi	0x0b, 7	; 11

    lcd_D6_port &= ~_BV(lcd_D6_bit);                        // repeat for each data bit
     3f8:	5e 98       	cbi	0x0b, 6	; 11
    if (theByte & 1<<6) lcd_D6_port |= _BV(lcd_D6_bit);
     3fa:	86 fd       	sbrc	r24, 6
     3fc:	5e 9a       	sbi	0x0b, 6	; 11

    lcd_D5_port &= ~_BV(lcd_D5_bit);
     3fe:	5d 98       	cbi	0x0b, 5	; 11
    if (theByte & 1<<5) lcd_D5_port |= _BV(lcd_D5_bit);
     400:	85 fd       	sbrc	r24, 5
     402:	5d 9a       	sbi	0x0b, 5	; 11

    lcd_D4_port &= ~_BV(lcd_D4_bit);
     404:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<4) lcd_D4_port |= _BV(lcd_D4_bit);
     406:	84 fd       	sbrc	r24, 4
     408:	5c 9a       	sbi	0x0b, 4	; 11

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= _BV(lcd_E_bit);                   // Enable pin high
     40a:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     40c:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~_BV(lcd_E_bit);                  // Enable pin low
     40e:	5b 98       	cbi	0x0b, 3	; 11
     410:	00 00       	nop
     412:	08 95       	ret

00000414 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     414:	cf 93       	push	r28
     416:	c8 2f       	mov	r28, r24
    lcd_RS_port |= _BV(lcd_RS_bit);                 // select the Data Register (RS high)
     418:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     41a:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     41c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     420:	8c 2f       	mov	r24, r28
     422:	82 95       	swap	r24
     424:	80 7f       	andi	r24, 0xF0	; 240
     426:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_4>
}
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	00 d0       	rcall	.+0      	; 0x438 <lcd_write_string_4d+0xa>
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     43e:	1a 82       	std	Y+2, r1	; 0x02
     440:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     442:	e9 81       	ldd	r30, Y+1	; 0x01
     444:	fa 81       	ldd	r31, Y+2	; 0x02
     446:	e8 0f       	add	r30, r24
     448:	f9 1f       	adc	r31, r25
     44a:	80 81       	ld	r24, Z
     44c:	88 23       	and	r24, r24
     44e:	c1 f0       	breq	.+48     	; 0x480 <lcd_write_string_4d+0x52>
    {
        lcd_write_character_4d(theString[i]);
     450:	e9 81       	ldd	r30, Y+1	; 0x01
     452:	fa 81       	ldd	r31, Y+2	; 0x02
     454:	e0 0f       	add	r30, r16
     456:	f1 1f       	adc	r31, r17
     458:	80 81       	ld	r24, Z
     45a:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
        i++;
     45e:	29 81       	ldd	r18, Y+1	; 0x01
     460:	3a 81       	ldd	r19, Y+2	; 0x02
     462:	2f 5f       	subi	r18, 0xFF	; 255
     464:	3f 4f       	sbci	r19, 0xFF	; 255
     466:	3a 83       	std	Y+2, r19	; 0x02
     468:	29 83       	std	Y+1, r18	; 0x01
     46a:	8d e0       	ldi	r24, 0x0D	; 13
     46c:	8a 95       	dec	r24
     46e:	f1 f7       	brne	.-4      	; 0x46c <lcd_write_string_4d+0x3e>
     470:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     472:	e9 81       	ldd	r30, Y+1	; 0x01
     474:	fa 81       	ldd	r31, Y+2	; 0x02
     476:	e0 0f       	add	r30, r16
     478:	f1 1f       	adc	r31, r17
     47a:	80 81       	ld	r24, Z
     47c:	81 11       	cpse	r24, r1
     47e:	e8 cf       	rjmp	.-48     	; 0x450 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(DELAY_INST);                              // 40 uS delay (min)
    }
}
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     48e:	cf 93       	push	r28
     490:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     492:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     494:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     496:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     49a:	8c 2f       	mov	r24, r28
     49c:	82 95       	swap	r24
     49e:	80 7f       	andi	r24, 0xF0	; 240
     4a0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_4>
}
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a8:	87 ea       	ldi	r24, 0xA7	; 167
     4aa:	91 e6       	ldi	r25, 0x61	; 97
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <lcd_init_4d+0x4>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <lcd_init_4d+0xa>
     4b2:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     4b4:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     4b6:	5b 98       	cbi	0x0b, 3	; 11

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     4b8:	80 e3       	ldi	r24, 0x30	; 48
     4ba:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_4>
     4be:	83 ec       	ldi	r24, 0xC3	; 195
     4c0:	99 e0       	ldi	r25, 0x09	; 9
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init_4d+0x1a>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init_4d+0x20>
     4c8:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     4ca:	80 e3       	ldi	r24, 0x30	; 48
     4cc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d0:	92 e4       	ldi	r25, 0x42	; 66
     4d2:	9a 95       	dec	r25
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_init_4d+0x2a>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <lcd_init_4d+0x30>
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     4d8:	80 e3       	ldi	r24, 0x30	; 48
     4da:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_4>
     4de:	82 e4       	ldi	r24, 0x42	; 66
     4e0:	8a 95       	dec	r24
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <lcd_init_4d+0x38>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <lcd_init_4d+0x3e>
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     4e6:	88 e2       	ldi	r24, 0x28	; 40
     4e8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_write_4>
     4ec:	9d e0       	ldi	r25, 0x0D	; 13
     4ee:	9a 95       	dec	r25
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_init_4d+0x46>
     4f2:	00 00       	nop
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     4f4:	88 e2       	ldi	r24, 0x28	; 40
     4f6:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     4fa:	8d e0       	ldi	r24, 0x0D	; 13
     4fc:	8a 95       	dec	r24
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <lcd_init_4d+0x54>
     500:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     502:	88 e0       	ldi	r24, 0x08	; 8
     504:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     508:	9d e0       	ldi	r25, 0x0D	; 13
     50a:	9a 95       	dec	r25
     50c:	f1 f7       	brne	.-4      	; 0x50a <lcd_init_4d+0x62>
     50e:	00 00       	nop
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     516:	87 ee       	ldi	r24, 0xE7	; 231
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <lcd_init_4d+0x72>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <lcd_init_4d+0x78>
     520:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     522:	86 e0       	ldi	r24, 0x06	; 6
     524:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	9d e0       	ldi	r25, 0x0D	; 13
     52a:	9a 95       	dec	r25
     52c:	f1 f7       	brne	.-4      	; 0x52a <lcd_init_4d+0x82>
     52e:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     530:	8c e0       	ldi	r24, 0x0C	; 12
     532:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     536:	8d e0       	ldi	r24, 0x0D	; 13
     538:	8a 95       	dec	r24
     53a:	f1 f7       	brne	.-4      	; 0x538 <lcd_init_4d+0x90>
     53c:	00 00       	nop
     53e:	08 95       	ret

00000540 <config>:

		addr = I2C_FindDevice(addr);
		if (addr>0) 
			LCD_Hex(addr++);
	}
}//ShowDevices
     540:	57 9a       	sbi	0x0a, 7	; 10
     542:	56 9a       	sbi	0x0a, 6	; 10
     544:	55 9a       	sbi	0x0a, 5	; 10
     546:	54 9a       	sbi	0x0a, 4	; 10
     548:	20 9a       	sbi	0x04, 0	; 4
     54a:	28 9a       	sbi	0x05, 0	; 5
     54c:	26 9a       	sbi	0x04, 6	; 4
     54e:	2e 98       	cbi	0x05, 6	; 5
     550:	27 9a       	sbi	0x04, 7	; 4
     552:	2f 98       	cbi	0x05, 7	; 5
     554:	24 98       	cbi	0x04, 4	; 4
     556:	53 9a       	sbi	0x0a, 3	; 10
     558:	52 9a       	sbi	0x0a, 2	; 10
     55a:	08 95       	ret

0000055c <main>:
     55c:	0e 94 a0 02 	call	0x540	; 0x540 <config>
     560:	0e 94 15 01 	call	0x22a	; 0x22a <initINT>
     564:	0e 94 66 00 	call	0xcc	; 0xcc <I2C_Init>
     568:	0e 94 c3 05 	call	0xb86	; 0xb86 <parseCompileTime>
     56c:	83 b7       	in	r24, 0x33	; 51
     56e:	81 7f       	andi	r24, 0xF1	; 241
     570:	84 60       	ori	r24, 0x04	; 4
     572:	83 bf       	out	0x33, r24	; 51
     574:	83 b7       	in	r24, 0x33	; 51
     576:	81 60       	ori	r24, 0x01	; 1
     578:	83 bf       	out	0x33, r24	; 51
     57a:	88 95       	sleep
     57c:	83 b7       	in	r24, 0x33	; 51
     57e:	8e 7f       	andi	r24, 0xFE	; 254
     580:	83 bf       	out	0x33, r24	; 51
     582:	f8 cf       	rjmp	.-16     	; 0x574 <main+0x18>

00000584 <turnOnLCDBacklight>:
     584:	28 98       	cbi	0x05, 0	; 5
     586:	08 95       	ret

00000588 <turnOffLCDBacklight>:
     588:	28 9a       	sbi	0x05, 0	; 5
     58a:	08 95       	ret

0000058c <lcd_dispRealClock>:
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	6c 97       	sbiw	r28, 0x1c	; 28
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     5a6:	8d e0       	ldi	r24, 0x0D	; 13
     5a8:	8a 95       	dec	r24
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_dispRealClock+0x1c>
     5ac:	00 00       	nop
     5ae:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <hour>
     5b2:	4a e0       	ldi	r20, 0x0A	; 10
     5b4:	be 01       	movw	r22, r28
     5b6:	69 5f       	subi	r22, 0xF9	; 249
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	08 2e       	mov	r0, r24
     5bc:	00 0c       	add	r0, r0
     5be:	99 0b       	sbc	r25, r25
     5c0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     5c4:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <min>
     5c8:	4a e0       	ldi	r20, 0x0A	; 10
     5ca:	be 01       	movw	r22, r28
     5cc:	6c 5f       	subi	r22, 0xFC	; 252
     5ce:	7f 4f       	sbci	r23, 0xFF	; 255
     5d0:	08 2e       	mov	r0, r24
     5d2:	00 0c       	add	r0, r0
     5d4:	99 0b       	sbc	r25, r25
     5d6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     5da:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <sec>
     5de:	4a e0       	ldi	r20, 0x0A	; 10
     5e0:	be 01       	movw	r22, r28
     5e2:	6f 5f       	subi	r22, 0xFF	; 255
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	08 2e       	mov	r0, r24
     5e8:	00 0c       	add	r0, r0
     5ea:	99 0b       	sbc	r25, r25
     5ec:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     5f0:	ce 01       	movw	r24, r28
     5f2:	07 96       	adiw	r24, 0x07	; 7
     5f4:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     5f8:	86 e0       	ldi	r24, 0x06	; 6
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     600:	ce 01       	movw	r24, r28
     602:	04 96       	adiw	r24, 0x04	; 4
     604:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     608:	86 e0       	ldi	r24, 0x06	; 6
     60a:	94 e0       	ldi	r25, 0x04	; 4
     60c:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     610:	ce 01       	movw	r24, r28
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     618:	83 ee       	ldi	r24, 0xE3	; 227
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     620:	8d e0       	ldi	r24, 0x0D	; 13
     622:	8a 95       	dec	r24
     624:	f1 f7       	brne	.-4      	; 0x622 <lcd_dispRealClock+0x96>
     626:	00 00       	nop
     628:	80 ec       	ldi	r24, 0xC0	; 192
     62a:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     62e:	8d e0       	ldi	r24, 0x0D	; 13
     630:	8a 95       	dec	r24
     632:	f1 f7       	brne	.-4      	; 0x630 <lcd_dispRealClock+0xa4>
     634:	00 00       	nop
     636:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <year>
     63a:	4a e0       	ldi	r20, 0x0A	; 10
     63c:	be 01       	movw	r22, r28
     63e:	66 5f       	subi	r22, 0xF6	; 246
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	08 2e       	mov	r0, r24
     644:	00 0c       	add	r0, r0
     646:	99 0b       	sbc	r25, r25
     648:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     64c:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <month>
     650:	4a e0       	ldi	r20, 0x0A	; 10
     652:	be 01       	movw	r22, r28
     654:	63 5f       	subi	r22, 0xF3	; 243
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	08 2e       	mov	r0, r24
     65a:	00 0c       	add	r0, r0
     65c:	99 0b       	sbc	r25, r25
     65e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     662:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <date>
     666:	4a e0       	ldi	r20, 0x0A	; 10
     668:	be 01       	movw	r22, r28
     66a:	60 5f       	subi	r22, 0xF0	; 240
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	08 2e       	mov	r0, r24
     670:	00 0c       	add	r0, r0
     672:	99 0b       	sbc	r25, r25
     674:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     678:	ce 01       	movw	r24, r28
     67a:	0a 96       	adiw	r24, 0x0a	; 10
     67c:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     680:	8f ee       	ldi	r24, 0xEF	; 239
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     688:	ce 01       	movw	r24, r28
     68a:	0d 96       	adiw	r24, 0x0d	; 13
     68c:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     690:	8f ee       	ldi	r24, 0xEF	; 239
     692:	93 e0       	ldi	r25, 0x03	; 3
     694:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     698:	ce 01       	movw	r24, r28
     69a:	40 96       	adiw	r24, 0x10	; 16
     69c:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     6a0:	8d ee       	ldi	r24, 0xED	; 237
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     6a8:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <day>
     6ac:	8e 2f       	mov	r24, r30
     6ae:	ee 0f       	add	r30, r30
     6b0:	99 0b       	sbc	r25, r25
     6b2:	aa 0b       	sbc	r26, r26
     6b4:	bb 0b       	sbc	r27, r27
     6b6:	87 30       	cpi	r24, 0x07	; 7
     6b8:	91 05       	cpc	r25, r1
     6ba:	08 f0       	brcs	.+2      	; 0x6be <lcd_dispRealClock+0x132>
     6bc:	43 c0       	rjmp	.+134    	; 0x744 <lcd_dispRealClock+0x1b8>
     6be:	fc 01       	movw	r30, r24
     6c0:	e0 5c       	subi	r30, 0xC0	; 192
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__tablejump2__>
     6c8:	83 e5       	ldi	r24, 0x53	; 83
     6ca:	95 e7       	ldi	r25, 0x75	; 117
     6cc:	ae e6       	ldi	r26, 0x6E	; 110
     6ce:	b0 e0       	ldi	r27, 0x00	; 0
     6d0:	8b 8b       	std	Y+19, r24	; 0x13
     6d2:	9c 8b       	std	Y+20, r25	; 0x14
     6d4:	ad 8b       	std	Y+21, r26	; 0x15
     6d6:	be 8b       	std	Y+22, r27	; 0x16
     6d8:	35 c0       	rjmp	.+106    	; 0x744 <lcd_dispRealClock+0x1b8>
     6da:	8d e4       	ldi	r24, 0x4D	; 77
     6dc:	9f e6       	ldi	r25, 0x6F	; 111
     6de:	ae e6       	ldi	r26, 0x6E	; 110
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	8b 8b       	std	Y+19, r24	; 0x13
     6e4:	9c 8b       	std	Y+20, r25	; 0x14
     6e6:	ad 8b       	std	Y+21, r26	; 0x15
     6e8:	be 8b       	std	Y+22, r27	; 0x16
     6ea:	2c c0       	rjmp	.+88     	; 0x744 <lcd_dispRealClock+0x1b8>
     6ec:	84 e5       	ldi	r24, 0x54	; 84
     6ee:	95 e7       	ldi	r25, 0x75	; 117
     6f0:	a5 e6       	ldi	r26, 0x65	; 101
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	8b 8b       	std	Y+19, r24	; 0x13
     6f6:	9c 8b       	std	Y+20, r25	; 0x14
     6f8:	ad 8b       	std	Y+21, r26	; 0x15
     6fa:	be 8b       	std	Y+22, r27	; 0x16
     6fc:	23 c0       	rjmp	.+70     	; 0x744 <lcd_dispRealClock+0x1b8>
     6fe:	87 e5       	ldi	r24, 0x57	; 87
     700:	95 e6       	ldi	r25, 0x65	; 101
     702:	a4 e6       	ldi	r26, 0x64	; 100
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	8b 8b       	std	Y+19, r24	; 0x13
     708:	9c 8b       	std	Y+20, r25	; 0x14
     70a:	ad 8b       	std	Y+21, r26	; 0x15
     70c:	be 8b       	std	Y+22, r27	; 0x16
     70e:	1a c0       	rjmp	.+52     	; 0x744 <lcd_dispRealClock+0x1b8>
     710:	84 e5       	ldi	r24, 0x54	; 84
     712:	98 e6       	ldi	r25, 0x68	; 104
     714:	a5 e7       	ldi	r26, 0x75	; 117
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	8b 8b       	std	Y+19, r24	; 0x13
     71a:	9c 8b       	std	Y+20, r25	; 0x14
     71c:	ad 8b       	std	Y+21, r26	; 0x15
     71e:	be 8b       	std	Y+22, r27	; 0x16
     720:	11 c0       	rjmp	.+34     	; 0x744 <lcd_dispRealClock+0x1b8>
     722:	86 e4       	ldi	r24, 0x46	; 70
     724:	92 e7       	ldi	r25, 0x72	; 114
     726:	a9 e6       	ldi	r26, 0x69	; 105
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	8b 8b       	std	Y+19, r24	; 0x13
     72c:	9c 8b       	std	Y+20, r25	; 0x14
     72e:	ad 8b       	std	Y+21, r26	; 0x15
     730:	be 8b       	std	Y+22, r27	; 0x16
     732:	08 c0       	rjmp	.+16     	; 0x744 <lcd_dispRealClock+0x1b8>
     734:	83 e5       	ldi	r24, 0x53	; 83
     736:	91 e6       	ldi	r25, 0x61	; 97
     738:	a4 e7       	ldi	r26, 0x74	; 116
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	8b 8b       	std	Y+19, r24	; 0x13
     73e:	9c 8b       	std	Y+20, r25	; 0x14
     740:	ad 8b       	std	Y+21, r26	; 0x15
     742:	be 8b       	std	Y+22, r27	; 0x16
     744:	ce 01       	movw	r24, r28
     746:	43 96       	adiw	r24, 0x13	; 19
     748:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     74c:	89 ee       	ldi	r24, 0xE9	; 233
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     754:	8d e0       	ldi	r24, 0x0D	; 13
     756:	8a 95       	dec	r24
     758:	f1 f7       	brne	.-4      	; 0x756 <lcd_dispRealClock+0x1ca>
     75a:	00 00       	nop
     75c:	6c 96       	adiw	r28, 0x1c	; 28
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <lcd_dispAccumulatedTime>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	29 97       	sbiw	r28, 0x09	; 9
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	80 ec       	ldi	r24, 0xC0	; 192
     784:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     788:	8d e0       	ldi	r24, 0x0D	; 13
     78a:	8a 95       	dec	r24
     78c:	f1 f7       	brne	.-4      	; 0x78a <lcd_dispAccumulatedTime+0x1c>
     78e:	00 00       	nop
     790:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <accumulatedHour>
     794:	4a e0       	ldi	r20, 0x0A	; 10
     796:	be 01       	movw	r22, r28
     798:	69 5f       	subi	r22, 0xF9	; 249
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	08 2e       	mov	r0, r24
     79e:	00 0c       	add	r0, r0
     7a0:	99 0b       	sbc	r25, r25
     7a2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     7a6:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <accumulatedMin>
     7aa:	4a e0       	ldi	r20, 0x0A	; 10
     7ac:	be 01       	movw	r22, r28
     7ae:	6c 5f       	subi	r22, 0xFC	; 252
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	08 2e       	mov	r0, r24
     7b4:	00 0c       	add	r0, r0
     7b6:	99 0b       	sbc	r25, r25
     7b8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     7bc:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <accumulatedSec>
     7c0:	4a e0       	ldi	r20, 0x0A	; 10
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	08 2e       	mov	r0, r24
     7ca:	00 0c       	add	r0, r0
     7cc:	99 0b       	sbc	r25, r25
     7ce:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
     7d2:	ce 01       	movw	r24, r28
     7d4:	07 96       	adiw	r24, 0x07	; 7
     7d6:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     7da:	86 e0       	ldi	r24, 0x06	; 6
     7dc:	94 e0       	ldi	r25, 0x04	; 4
     7de:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     7e2:	ce 01       	movw	r24, r28
     7e4:	04 96       	adiw	r24, 0x04	; 4
     7e6:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     7ea:	86 e0       	ldi	r24, 0x06	; 6
     7ec:	94 e0       	ldi	r25, 0x04	; 4
     7ee:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     7f2:	ce 01       	movw	r24, r28
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     7fa:	87 ee       	ldi	r24, 0xE7	; 231
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     802:	8d e0       	ldi	r24, 0x0D	; 13
     804:	8a 95       	dec	r24
     806:	f1 f7       	brne	.-4      	; 0x804 <lcd_dispAccumulatedTime+0x96>
     808:	00 00       	nop
     80a:	29 96       	adiw	r28, 0x09	; 9
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <lcd_dispProgInfo>:
     81c:	80 e8       	ldi	r24, 0x80	; 128
     81e:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     822:	2d e0       	ldi	r18, 0x0D	; 13
     824:	2a 95       	dec	r18
     826:	f1 f7       	brne	.-4      	; 0x824 <lcd_dispProgInfo+0x8>
     828:	00 00       	nop
     82a:	8f e3       	ldi	r24, 0x3F	; 63
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     832:	80 ec       	ldi	r24, 0xC0	; 192
     834:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     838:	8d e0       	ldi	r24, 0x0D	; 13
     83a:	8a 95       	dec	r24
     83c:	f1 f7       	brne	.-4      	; 0x83a <lcd_dispProgInfo+0x1e>
     83e:	00 00       	nop
     840:	80 e3       	ldi	r24, 0x30	; 48
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     848:	9f e3       	ldi	r25, 0x3F	; 63
     84a:	2d e0       	ldi	r18, 0x0D	; 13
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	91 50       	subi	r25, 0x01	; 1
     850:	20 40       	sbci	r18, 0x00	; 0
     852:	80 40       	sbci	r24, 0x00	; 0
     854:	e1 f7       	brne	.-8      	; 0x84e <lcd_dispProgInfo+0x32>
     856:	00 c0       	rjmp	.+0      	; 0x858 <lcd_dispProgInfo+0x3c>
     858:	00 00       	nop
     85a:	80 ec       	ldi	r24, 0xC0	; 192
     85c:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     860:	9d e0       	ldi	r25, 0x0D	; 13
     862:	9a 95       	dec	r25
     864:	f1 f7       	brne	.-4      	; 0x862 <lcd_dispProgInfo+0x46>
     866:	00 00       	nop
     868:	81 e2       	ldi	r24, 0x21	; 33
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     870:	2f e7       	ldi	r18, 0x7F	; 127
     872:	8a e1       	ldi	r24, 0x1A	; 26
     874:	96 e0       	ldi	r25, 0x06	; 6
     876:	21 50       	subi	r18, 0x01	; 1
     878:	80 40       	sbci	r24, 0x00	; 0
     87a:	90 40       	sbci	r25, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <lcd_dispProgInfo+0x5a>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <lcd_dispProgInfo+0x64>
     880:	00 00       	nop
     882:	08 95       	ret

00000884 <lcd_dispMenu>:
     884:	80 e8       	ldi	r24, 0x80	; 128
     886:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     88a:	2d e0       	ldi	r18, 0x0D	; 13
     88c:	2a 95       	dec	r18
     88e:	f1 f7       	brne	.-4      	; 0x88c <lcd_dispMenu+0x8>
     890:	00 00       	nop
     892:	80 e1       	ldi	r24, 0x10	; 16
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     89a:	80 ec       	ldi	r24, 0xC0	; 192
     89c:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     8a0:	8d e0       	ldi	r24, 0x0D	; 13
     8a2:	8a 95       	dec	r24
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <lcd_dispMenu+0x1e>
     8a6:	00 00       	nop
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     8b0:	9f eb       	ldi	r25, 0xBF	; 191
     8b2:	27 e2       	ldi	r18, 0x27	; 39
     8b4:	89 e0       	ldi	r24, 0x09	; 9
     8b6:	91 50       	subi	r25, 0x01	; 1
     8b8:	20 40       	sbci	r18, 0x00	; 0
     8ba:	80 40       	sbci	r24, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <lcd_dispMenu+0x32>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <lcd_dispMenu+0x3c>
     8c0:	00 00       	nop
     8c2:	08 95       	ret

000008c4 <lcd_dispWords>:
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	e8 2e       	mov	r14, r24
     8d2:	80 e8       	ldi	r24, 0x80	; 128
     8d4:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     8d8:	2d e0       	ldi	r18, 0x0D	; 13
     8da:	2a 95       	dec	r18
     8dc:	f1 f7       	brne	.-4      	; 0x8da <lcd_dispWords+0x16>
     8de:	00 00       	nop
     8e0:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <min>
     8e4:	93 78       	andi	r25, 0x83	; 131
     8e6:	1c f4       	brge	.+6      	; 0x8ee <lcd_dispWords+0x2a>
     8e8:	91 50       	subi	r25, 0x01	; 1
     8ea:	9c 6f       	ori	r25, 0xFC	; 252
     8ec:	9f 5f       	subi	r25, 0xFF	; 255
     8ee:	99 23       	and	r25, r25
     8f0:	ec f0       	brlt	.+58     	; 0x92c <__stack+0x2d>
     8f2:	92 30       	cpi	r25, 0x02	; 2
     8f4:	1c f0       	brlt	.+6      	; 0x8fc <lcd_dispWords+0x38>
     8f6:	94 30       	cpi	r25, 0x04	; 4
     8f8:	6c f0       	brlt	.+26     	; 0x914 <__stack+0x15>
     8fa:	18 c0       	rjmp	.+48     	; 0x92c <__stack+0x2d>
     8fc:	30 e2       	ldi	r19, 0x20	; 32
     8fe:	e3 9e       	mul	r14, r19
     900:	c0 01       	movw	r24, r0
     902:	11 24       	eor	r1, r1
     904:	ec 01       	movw	r28, r24
     906:	c2 57       	subi	r28, 0x72	; 114
     908:	dd 4f       	sbci	r29, 0xFD	; 253
     90a:	9c 01       	movw	r18, r24
     90c:	22 56       	subi	r18, 0x62	; 98
     90e:	3d 4f       	sbci	r19, 0xFD	; 253
     910:	79 01       	movw	r14, r18
     912:	10 c0       	rjmp	.+32     	; 0x934 <__stack+0x35>
     914:	30 e2       	ldi	r19, 0x20	; 32
     916:	e3 9e       	mul	r14, r19
     918:	c0 01       	movw	r24, r0
     91a:	11 24       	eor	r1, r1
     91c:	ec 01       	movw	r28, r24
     91e:	c2 5b       	subi	r28, 0xB2	; 178
     920:	de 4f       	sbci	r29, 0xFE	; 254
     922:	9c 01       	movw	r18, r24
     924:	22 5a       	subi	r18, 0xA2	; 162
     926:	3e 4f       	sbci	r19, 0xFE	; 254
     928:	79 01       	movw	r14, r18
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0x35>
     92c:	e1 2c       	mov	r14, r1
     92e:	f1 2c       	mov	r15, r1
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	d0 e0       	ldi	r29, 0x00	; 0
     934:	ce 01       	movw	r24, r28
     936:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     93a:	fe 01       	movw	r30, r28
     93c:	01 90       	ld	r0, Z+
     93e:	00 20       	and	r0, r0
     940:	e9 f7       	brne	.-6      	; 0x93c <__stack+0x3d>
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	ec 1b       	sub	r30, r28
     946:	fd 0b       	sbc	r31, r29
     948:	00 e1       	ldi	r16, 0x10	; 16
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	0e 1b       	sub	r16, r30
     94e:	11 09       	sbc	r17, r1
     950:	10 16       	cp	r1, r16
     952:	11 06       	cpc	r1, r17
     954:	54 f4       	brge	.+20     	; 0x96a <__stack+0x6b>
     956:	c0 e0       	ldi	r28, 0x00	; 0
     958:	80 e2       	ldi	r24, 0x20	; 32
     95a:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
     95e:	cf 5f       	subi	r28, 0xFF	; 255
     960:	2c 2f       	mov	r18, r28
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	20 17       	cp	r18, r16
     966:	31 07       	cpc	r19, r17
     968:	bc f3       	brlt	.-18     	; 0x958 <__stack+0x59>
     96a:	80 ec       	ldi	r24, 0xC0	; 192
     96c:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
     970:	3d e0       	ldi	r19, 0x0D	; 13
     972:	3a 95       	dec	r19
     974:	f1 f7       	brne	.-4      	; 0x972 <__stack+0x73>
     976:	00 00       	nop
     978:	c7 01       	movw	r24, r14
     97a:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
     97e:	f7 01       	movw	r30, r14
     980:	01 90       	ld	r0, Z+
     982:	00 20       	and	r0, r0
     984:	e9 f7       	brne	.-6      	; 0x980 <__stack+0x81>
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	ee 19       	sub	r30, r14
     98a:	ff 09       	sbc	r31, r15
     98c:	00 e1       	ldi	r16, 0x10	; 16
     98e:	10 e0       	ldi	r17, 0x00	; 0
     990:	0e 1b       	sub	r16, r30
     992:	11 09       	sbc	r17, r1
     994:	10 16       	cp	r1, r16
     996:	11 06       	cpc	r1, r17
     998:	54 f4       	brge	.+20     	; 0x9ae <__stack+0xaf>
     99a:	c0 e0       	ldi	r28, 0x00	; 0
     99c:	80 e2       	ldi	r24, 0x20	; 32
     99e:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
     9a2:	cf 5f       	subi	r28, 0xFF	; 255
     9a4:	8c 2f       	mov	r24, r28
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	80 17       	cp	r24, r16
     9aa:	91 07       	cpc	r25, r17
     9ac:	bc f3       	brlt	.-18     	; 0x99c <__stack+0x9d>
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	08 95       	ret

000009bc <DS1307_GetTime>:
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	ec 01       	movw	r28, r24
     9ca:	7b 01       	movw	r14, r22
     9cc:	8a 01       	movw	r16, r20
     9ce:	62 e0       	ldi	r22, 0x02	; 2
     9d0:	80 ed       	ldi	r24, 0xD0	; 208
     9d2:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_ReadRegister>
     9d6:	88 83       	st	Y, r24
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	80 ed       	ldi	r24, 0xD0	; 208
     9dc:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_ReadRegister>
     9e0:	f7 01       	movw	r30, r14
     9e2:	80 83       	st	Z, r24
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	80 ed       	ldi	r24, 0xD0	; 208
     9e8:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_ReadRegister>
     9ec:	f8 01       	movw	r30, r16
     9ee:	80 83       	st	Z, r24
     9f0:	98 81       	ld	r25, Y
     9f2:	96 ff       	sbrs	r25, 6
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <DS1307_GetTime+0x40>
     9f6:	9f 71       	andi	r25, 0x1F	; 31
     9f8:	98 83       	st	Y, r25
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <DS1307_GetTime+0x44>
     9fc:	9f 73       	andi	r25, 0x3F	; 63
     9fe:	98 83       	st	Y, r25
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	08 95       	ret

00000a0e <DS1307_GetDate>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	7c 01       	movw	r14, r24
     a1c:	8b 01       	movw	r16, r22
     a1e:	ea 01       	movw	r28, r20
     a20:	65 e0       	ldi	r22, 0x05	; 5
     a22:	80 ed       	ldi	r24, 0xD0	; 208
     a24:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_ReadRegister>
     a28:	f7 01       	movw	r30, r14
     a2a:	80 83       	st	Z, r24
     a2c:	64 e0       	ldi	r22, 0x04	; 4
     a2e:	80 ed       	ldi	r24, 0xD0	; 208
     a30:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_ReadRegister>
     a34:	f8 01       	movw	r30, r16
     a36:	80 83       	st	Z, r24
     a38:	66 e0       	ldi	r22, 0x06	; 6
     a3a:	80 ed       	ldi	r24, 0xD0	; 208
     a3c:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_ReadRegister>
     a40:	88 83       	st	Y, r24
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	08 95       	ret

00000a50 <DS1307_GetWkDay>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	ec 01       	movw	r28, r24
     a56:	63 e0       	ldi	r22, 0x03	; 3
     a58:	80 ed       	ldi	r24, 0xD0	; 208
     a5a:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_ReadRegister>
     a5e:	88 83       	st	Y, r24
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <LCD_BCDDigits>:

void LCD_BCDDigits(uint8_t data)
// helper function for WriteDate()
// input is two digits in BCD format
// output is to LCD display at current cursor position
{
     a66:	cf 93       	push	r28
     a68:	c8 2f       	mov	r28, r24
	byte temp = data>>4;
     a6a:	82 95       	swap	r24
     a6c:	8f 70       	andi	r24, 0x0F	; 15
	//LCD_Char(temp+'0');
	lcd_write_character_4d(temp+'0');
     a6e:	80 5d       	subi	r24, 0xD0	; 208
     a70:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
	data &= 0x0F;
     a74:	8c 2f       	mov	r24, r28
     a76:	8f 70       	andi	r24, 0x0F	; 15
	//LCD_Char(data+'0');
	lcd_write_character_4d(data+'0');
     a78:	80 5d       	subi	r24, 0xD0	; 208
     a7a:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
}//LCD_BCDDigits
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <WriteDate>:

void WriteDate()
{
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	00 d0       	rcall	.+0      	; 0xa88 <WriteDate+0x6>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <WriteDate+0x8>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
	byte months, days, years;
	byte wkDays;

	DS1307_GetDate(&months,&days,&years);
     a8e:	ae 01       	movw	r20, r28
     a90:	4d 5f       	subi	r20, 0xFD	; 253
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	be 01       	movw	r22, r28
     a96:	6e 5f       	subi	r22, 0xFE	; 254
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	0e 94 07 05 	call	0xa0e	; 0xa0e <DS1307_GetDate>
	LCD_BCDDigits(months);
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_BCDDigits>
	//LCD_Char('/');
	lcd_write_character_4d('/');
     aa8:	8f e2       	ldi	r24, 0x2F	; 47
     aaa:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
	LCD_BCDDigits(days);
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_BCDDigits>
	//LCD_Char('/');
	lcd_write_character_4d('/');
     ab4:	8f e2       	ldi	r24, 0x2F	; 47
     ab6:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
	LCD_BCDDigits(years);
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_BCDDigits>

	lcd_write_character_4d(' ');
     ac0:	80 e2       	ldi	r24, 0x20	; 32
     ac2:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
	DS1307_GetWkDay(&wkDays);
     ac6:	ce 01       	movw	r24, r28
     ac8:	04 96       	adiw	r24, 0x04	; 4
     aca:	0e 94 28 05 	call	0xa50	; 0xa50 <DS1307_GetWkDay>
	LCD_BCDDigits(wkDays);
     ace:	8c 81       	ldd	r24, Y+4	; 0x04
     ad0:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_BCDDigits>

}//WriteDate
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <WriteTime>:

void WriteTime()
{
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <WriteTime+0x6>
     ae8:	1f 92       	push	r1
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
	byte hours, minutes, seconds;
	DS1307_GetTime(&hours,&minutes,&seconds);
     aee:	ae 01       	movw	r20, r28
     af0:	4d 5f       	subi	r20, 0xFD	; 253
     af2:	5f 4f       	sbci	r21, 0xFF	; 255
     af4:	be 01       	movw	r22, r28
     af6:	6e 5f       	subi	r22, 0xFE	; 254
     af8:	7f 4f       	sbci	r23, 0xFF	; 255
     afa:	ce 01       	movw	r24, r28
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	0e 94 de 04 	call	0x9bc	; 0x9bc <DS1307_GetTime>
	LCD_BCDDigits(hours);
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_BCDDigits>
	//LCD_Char(':');
	lcd_write_character_4d(':');
     b08:	8a e3       	ldi	r24, 0x3A	; 58
     b0a:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>

	LCD_BCDDigits(minutes);
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_BCDDigits>
	//LCD_Char(':');
	lcd_write_character_4d(':');
     b14:	8a e3       	ldi	r24, 0x3A	; 58
     b16:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>

	LCD_BCDDigits(seconds);
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_BCDDigits>
}//WriteTime
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <LCD_blankChar>:

void LCD_blankChar(uint8_t num)
{
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
	uint8_t i;
	for (i=0; i<num; i++)
     b30:	88 23       	and	r24, r24
     b32:	41 f0       	breq	.+16     	; 0xb44 <LCD_blankChar+0x18>
     b34:	d8 2f       	mov	r29, r24
     b36:	c0 e0       	ldi	r28, 0x00	; 0
		lcd_write_character_4d(' ');
     b38:	80 e2       	ldi	r24, 0x20	; 32
     b3a:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_write_character_4d>
}//WriteTime

void LCD_blankChar(uint8_t num)
{
	uint8_t i;
	for (i=0; i<num; i++)
     b3e:	cf 5f       	subi	r28, 0xFF	; 255
     b40:	cd 13       	cpse	r28, r29
     b42:	fa cf       	rjmp	.-12     	; 0xb38 <LCD_blankChar+0xc>
		lcd_write_character_4d(' ');
}//LCD_blankChar
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <LCD_TimeDate>:

void LCD_TimeDate()
{
	//LCD_Line(0); 
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     b4a:	80 e8       	ldi	r24, 0x80	; 128
     b4c:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
	WriteTime();
     b50:	0e 94 71 05 	call	0xae2	; 0xae2 <WriteTime>
	LCD_blankChar(8);
     b54:	88 e0       	ldi	r24, 0x08	; 8
     b56:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_blankChar>

	//LCD_Line(1); 
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     b5a:	80 ec       	ldi	r24, 0xC0	; 192
     b5c:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
	WriteDate();
     b60:	0e 94 41 05 	call	0xa82	; 0xa82 <WriteDate>
	LCD_blankChar(8);
     b64:	88 e0       	ldi	r24, 0x08	; 8
     b66:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_blankChar>
     b6a:	08 95       	ret

00000b6c <calcDay>:
    calcDay();
}//parseCompileTime

void calcDay()
{
    day = (date - 17)%7;
     b6c:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <date>
     b70:	08 2e       	mov	r0, r24
     b72:	00 0c       	add	r0, r0
     b74:	99 0b       	sbc	r25, r25
     b76:	41 97       	sbiw	r24, 0x11	; 17
     b78:	67 e0       	ldi	r22, 0x07	; 7
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	0e 94 c8 08 	call	0x1190	; 0x1190 <__divmodhi4>
     b80:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <day>
     b84:	08 95       	ret

00000b86 <parseCompileTime>:
extern uint8_t year, month, date;
extern uint8_t monthEndDate, day;
*/

void parseCompileTime()
{
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	e4 97       	sbiw	r28, 0x34	; 52
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
    char sTime[4][3];
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
     b9c:	66 e0       	ldi	r22, 0x06	; 6
     b9e:	74 e0       	ldi	r23, 0x04	; 4
     ba0:	88 e0       	ldi	r24, 0x08	; 8
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	0e 94 2f 09 	call	0x125e	; 0x125e <strtok>
     ba8:	bc 01       	movw	r22, r24
    while (*p)
     baa:	fc 01       	movw	r30, r24
     bac:	80 81       	ld	r24, Z
     bae:	88 23       	and	r24, r24
     bb0:	e9 f0       	breq	.+58     	; 0xbec <parseCompileTime+0x66>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sTime[n++], p);
     bb4:	11 e0       	ldi	r17, 0x01	; 1
     bb6:	12 0f       	add	r17, r18
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	c9 01       	movw	r24, r18
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	21 e0       	ldi	r18, 0x01	; 1
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	2c 0f       	add	r18, r28
     bca:	3d 1f       	adc	r19, r29
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	0e 94 3d 09 	call	0x127a	; 0x127a <strcpy>
        p=strtok(NULL, ":");
     bd4:	66 e0       	ldi	r22, 0x06	; 6
     bd6:	74 e0       	ldi	r23, 0x04	; 4
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 2f 09 	call	0x125e	; 0x125e <strtok>
     be0:	bc 01       	movw	r22, r24
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
    {
        strcpy((char *)&sTime[n++], p);
     be2:	21 2f       	mov	r18, r17
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	81 11       	cpse	r24, r1
     bea:	e4 cf       	rjmp	.-56     	; 0xbb4 <parseCompileTime+0x2e>
    {
        strcpy((char *)&sTime[n++], p);
        p=strtok(NULL, ":");
    }
    hour=atoi(sTime[0]);
     bec:	ce 01       	movw	r24, r28
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	0e 94 11 09 	call	0x1222	; 0x1222 <atoi>
     bf4:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <hour>
    min=atoi(sTime[1]);
     bf8:	ce 01       	movw	r24, r28
     bfa:	04 96       	adiw	r24, 0x04	; 4
     bfc:	0e 94 11 09 	call	0x1222	; 0x1222 <atoi>
     c00:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <min>
    //give some delay (8 seconds), to compile & upload by human click
    //sec=atoi(sTime[2]) + 8;

    //if you change power source to battery,
    //  you'd better put more time allowance
    sec=atoi(sTime[2]) + 15;
     c04:	ce 01       	movw	r24, r28
     c06:	07 96       	adiw	r24, 0x07	; 7
     c08:	0e 94 11 09 	call	0x1222	; 0x1222 <atoi>
     c0c:	81 5f       	subi	r24, 0xF1	; 241
     c0e:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <sec>
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
     c12:	6d ee       	ldi	r22, 0xED	; 237
     c14:	73 e0       	ldi	r23, 0x03	; 3
     c16:	87 ed       	ldi	r24, 0xD7	; 215
     c18:	93 e0       	ldi	r25, 0x03	; 3
     c1a:	0e 94 2f 09 	call	0x125e	; 0x125e <strtok>
     c1e:	bc 01       	movw	r22, r24
    while (*p)
     c20:	fc 01       	movw	r30, r24
     c22:	80 81       	ld	r24, Z
     c24:	88 23       	and	r24, r24
     c26:	19 f1       	breq	.+70     	; 0xc6e <parseCompileTime+0xe8>
     c28:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sDate[n++], p);
     c2a:	11 e0       	ldi	r17, 0x01	; 1
     c2c:	12 0f       	add	r17, r18
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	c9 01       	movw	r24, r18
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	22 0f       	add	r18, r18
     c38:	33 1f       	adc	r19, r19
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	22 0f       	add	r18, r18
     c40:	33 1f       	adc	r19, r19
     c42:	82 0f       	add	r24, r18
     c44:	93 1f       	adc	r25, r19
     c46:	2d e0       	ldi	r18, 0x0D	; 13
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	2c 0f       	add	r18, r28
     c4c:	3d 1f       	adc	r19, r29
     c4e:	82 0f       	add	r24, r18
     c50:	93 1f       	adc	r25, r19
     c52:	0e 94 3d 09 	call	0x127a	; 0x127a <strcpy>
        p=strtok(NULL, " ");
     c56:	6d ee       	ldi	r22, 0xED	; 237
     c58:	73 e0       	ldi	r23, 0x03	; 3
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 2f 09 	call	0x125e	; 0x125e <strtok>
     c62:	bc 01       	movw	r22, r24

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    {
        strcpy((char *)&sDate[n++], p);
     c64:	21 2f       	mov	r18, r17
    sec=atoi(sTime[2]) + 15;
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
     c66:	fc 01       	movw	r30, r24
     c68:	80 81       	ld	r24, Z
     c6a:	81 11       	cpse	r24, r1
     c6c:	de cf       	rjmp	.-68     	; 0xc2a <parseCompileTime+0xa4>
    {
        strcpy((char *)&sDate[n++], p);
        p=strtok(NULL, " ");
    }

    if ( strcmp(sDate[0], "Jan") == 0 )
     c6e:	61 e1       	ldi	r22, 0x11	; 17
     c70:	74 e0       	ldi	r23, 0x04	; 4
     c72:	ce 01       	movw	r24, r28
     c74:	0d 96       	adiw	r24, 0x0d	; 13
     c76:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     c7a:	89 2b       	or	r24, r25
     c7c:	21 f4       	brne	.+8      	; 0xc86 <parseCompileTime+0x100>
        month = 1;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     c84:	83 c0       	rjmp	.+262    	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Feb") == 0 )
     c86:	65 e1       	ldi	r22, 0x15	; 21
     c88:	74 e0       	ldi	r23, 0x04	; 4
     c8a:	ce 01       	movw	r24, r28
     c8c:	0d 96       	adiw	r24, 0x0d	; 13
     c8e:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     c92:	89 2b       	or	r24, r25
     c94:	21 f4       	brne	.+8      	; 0xc9e <parseCompileTime+0x118>
        month = 2;
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     c9c:	77 c0       	rjmp	.+238    	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Mar") == 0 )
     c9e:	69 e1       	ldi	r22, 0x19	; 25
     ca0:	74 e0       	ldi	r23, 0x04	; 4
     ca2:	ce 01       	movw	r24, r28
     ca4:	0d 96       	adiw	r24, 0x0d	; 13
     ca6:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     caa:	89 2b       	or	r24, r25
     cac:	21 f4       	brne	.+8      	; 0xcb6 <parseCompileTime+0x130>
        month = 3;
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     cb4:	6b c0       	rjmp	.+214    	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Apr") == 0 )
     cb6:	6d e1       	ldi	r22, 0x1D	; 29
     cb8:	74 e0       	ldi	r23, 0x04	; 4
     cba:	ce 01       	movw	r24, r28
     cbc:	0d 96       	adiw	r24, 0x0d	; 13
     cbe:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     cc2:	89 2b       	or	r24, r25
     cc4:	21 f4       	brne	.+8      	; 0xcce <parseCompileTime+0x148>
        month = 4;
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     ccc:	5f c0       	rjmp	.+190    	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "May") == 0 )
     cce:	61 e2       	ldi	r22, 0x21	; 33
     cd0:	74 e0       	ldi	r23, 0x04	; 4
     cd2:	ce 01       	movw	r24, r28
     cd4:	0d 96       	adiw	r24, 0x0d	; 13
     cd6:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     cda:	89 2b       	or	r24, r25
     cdc:	21 f4       	brne	.+8      	; 0xce6 <parseCompileTime+0x160>
        month = 5;
     cde:	85 e0       	ldi	r24, 0x05	; 5
     ce0:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     ce4:	53 c0       	rjmp	.+166    	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jun") == 0 )
     ce6:	65 e2       	ldi	r22, 0x25	; 37
     ce8:	74 e0       	ldi	r23, 0x04	; 4
     cea:	ce 01       	movw	r24, r28
     cec:	0d 96       	adiw	r24, 0x0d	; 13
     cee:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     cf2:	89 2b       	or	r24, r25
     cf4:	21 f4       	brne	.+8      	; 0xcfe <parseCompileTime+0x178>
        month = 6;
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     cfc:	47 c0       	rjmp	.+142    	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jul") == 0 )
     cfe:	69 e2       	ldi	r22, 0x29	; 41
     d00:	74 e0       	ldi	r23, 0x04	; 4
     d02:	ce 01       	movw	r24, r28
     d04:	0d 96       	adiw	r24, 0x0d	; 13
     d06:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     d0a:	89 2b       	or	r24, r25
     d0c:	21 f4       	brne	.+8      	; 0xd16 <parseCompileTime+0x190>
        month = 7;
     d0e:	87 e0       	ldi	r24, 0x07	; 7
     d10:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     d14:	3b c0       	rjmp	.+118    	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Aug") == 0 )
     d16:	6d e2       	ldi	r22, 0x2D	; 45
     d18:	74 e0       	ldi	r23, 0x04	; 4
     d1a:	ce 01       	movw	r24, r28
     d1c:	0d 96       	adiw	r24, 0x0d	; 13
     d1e:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     d22:	89 2b       	or	r24, r25
     d24:	21 f4       	brne	.+8      	; 0xd2e <parseCompileTime+0x1a8>
        month = 8;
     d26:	88 e0       	ldi	r24, 0x08	; 8
     d28:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     d2c:	2f c0       	rjmp	.+94     	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Sep") == 0 )
     d2e:	61 e3       	ldi	r22, 0x31	; 49
     d30:	74 e0       	ldi	r23, 0x04	; 4
     d32:	ce 01       	movw	r24, r28
     d34:	0d 96       	adiw	r24, 0x0d	; 13
     d36:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     d3a:	89 2b       	or	r24, r25
     d3c:	21 f4       	brne	.+8      	; 0xd46 <parseCompileTime+0x1c0>
        month = 9;
     d3e:	89 e0       	ldi	r24, 0x09	; 9
     d40:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     d44:	23 c0       	rjmp	.+70     	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Oct") == 0 )
     d46:	65 e3       	ldi	r22, 0x35	; 53
     d48:	74 e0       	ldi	r23, 0x04	; 4
     d4a:	ce 01       	movw	r24, r28
     d4c:	0d 96       	adiw	r24, 0x0d	; 13
     d4e:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     d52:	89 2b       	or	r24, r25
     d54:	21 f4       	brne	.+8      	; 0xd5e <parseCompileTime+0x1d8>
        month = 10;
     d56:	8a e0       	ldi	r24, 0x0A	; 10
     d58:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     d5c:	17 c0       	rjmp	.+46     	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Nov") == 0 )
     d5e:	69 e3       	ldi	r22, 0x39	; 57
     d60:	74 e0       	ldi	r23, 0x04	; 4
     d62:	ce 01       	movw	r24, r28
     d64:	0d 96       	adiw	r24, 0x0d	; 13
     d66:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     d6a:	89 2b       	or	r24, r25
     d6c:	21 f4       	brne	.+8      	; 0xd76 <parseCompileTime+0x1f0>
        month = 11;
     d6e:	8b e0       	ldi	r24, 0x0B	; 11
     d70:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Dec") == 0 )
     d76:	6d e3       	ldi	r22, 0x3D	; 61
     d78:	74 e0       	ldi	r23, 0x04	; 4
     d7a:	ce 01       	movw	r24, r28
     d7c:	0d 96       	adiw	r24, 0x0d	; 13
     d7e:	0e 94 34 09 	call	0x1268	; 0x1268 <strcmp>
     d82:	89 2b       	or	r24, r25
     d84:	19 f4       	brne	.+6      	; 0xd8c <parseCompileTime+0x206>
        month = 12;
     d86:	8c e0       	ldi	r24, 0x0C	; 12
     d88:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <month>

    date=atoi(sDate[1]);
     d8c:	ce 01       	movw	r24, r28
     d8e:	47 96       	adiw	r24, 0x17	; 23
     d90:	0e 94 11 09 	call	0x1222	; 0x1222 <atoi>
     d94:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <date>
    yearLong=atoi(sDate[2]);
     d98:	ce 01       	movw	r24, r28
     d9a:	81 96       	adiw	r24, 0x21	; 33
     d9c:	0e 94 11 09 	call	0x1222	; 0x1222 <atoi>
     da0:	ac 01       	movw	r20, r24
    year=yearLong%1000;
     da2:	9c 01       	movw	r18, r24
     da4:	36 95       	lsr	r19
     da6:	27 95       	ror	r18
     da8:	36 95       	lsr	r19
     daa:	27 95       	ror	r18
     dac:	36 95       	lsr	r19
     dae:	27 95       	ror	r18
     db0:	a5 ec       	ldi	r26, 0xC5	; 197
     db2:	b0 e2       	ldi	r27, 0x20	; 32
     db4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__umulhisi3>
     db8:	92 95       	swap	r25
     dba:	82 95       	swap	r24
     dbc:	8f 70       	andi	r24, 0x0F	; 15
     dbe:	89 27       	eor	r24, r25
     dc0:	9f 70       	andi	r25, 0x0F	; 15
     dc2:	89 27       	eor	r24, r25
     dc4:	68 ee       	ldi	r22, 0xE8	; 232
     dc6:	73 e0       	ldi	r23, 0x03	; 3
     dc8:	86 9f       	mul	r24, r22
     dca:	90 01       	movw	r18, r0
     dcc:	87 9f       	mul	r24, r23
     dce:	30 0d       	add	r19, r0
     dd0:	96 9f       	mul	r25, r22
     dd2:	30 0d       	add	r19, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	42 1b       	sub	r20, r18
     dd8:	53 0b       	sbc	r21, r19
     dda:	40 93 5c 04 	sts	0x045C, r20	; 0x80045c <year>

    calcDay();
     dde:	0e 94 b6 05 	call	0xb6c	; 0xb6c <calcDay>
}//parseCompileTime
     de2:	e4 96       	adiw	r28, 0x34	; 52
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	08 95       	ret

00000df6 <makePDasOutput>:
//by calling makePDasInput(). (added by Insoo: Jul 12, 2017)
void makePDasOutput()
{
	// configure the microprocessor pins for the data lines
	// 4 data lines - output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
     df6:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
     df8:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
     dfa:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
     dfc:	54 9a       	sbi	0x0a, 4	; 10

	// LCD backlight cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
     dfe:	20 9a       	sbi	0x04, 0	; 4

	// LCD VSS pin (Power Supply) - Output
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
     e00:	26 9a       	sbi	0x04, 6	; 4
	//turn on LCD power
	lcd_VDD_port |= _BV(lcd_VDD_bit);
     e02:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e04:	83 ec       	ldi	r24, 0xC3	; 195
     e06:	99 e0       	ldi	r25, 0x09	; 9
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <makePDasOutput+0x12>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <makePDasOutput+0x18>
     e0e:	00 00       	nop
	_delay_ms(10);

	// DS1307 Vcc pin (Power Supply) - output
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
     e10:	27 9a       	sbi	0x04, 7	; 4
	//turn on DS1307 power
	DS1307_VCC_port |= _BV(DS1307_VCC_bit);
     e12:	2f 9a       	sbi	0x05, 7	; 5
     e14:	83 ec       	ldi	r24, 0xC3	; 195
     e16:	99 e0       	ldi	r25, 0x09	; 9
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <makePDasOutput+0x22>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <makePDasOutput+0x28>
     e1e:	00 00       	nop
	//Tactile switch - Input
	//tactile_Switch_ddr |= _BV(tactile_Switch_bit);

	// configure the microprocessor pins for the control lines
	// E line - output
	lcd_E_ddr |= _BV(lcd_E_bit);
     e20:	53 9a       	sbi	0x0a, 3	; 10
	// RS line - output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
     e22:	52 9a       	sbi	0x0a, 2	; 10
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
     e24:	5a 98       	cbi	0x0b, 2	; 11
     e26:	08 95       	ret

00000e28 <makePDasInput>:
//to remove power usage by LCD (added by Insoo: Jul 12, 2017)
void makePDasInput()
{
	// configure the microprocessor pins for the data lines
	// 4 data lines - output, but make it input
	lcd_D7_ddr &= ~_BV(lcd_D7_bit);
     e28:	57 98       	cbi	0x0a, 7	; 10
	lcd_D6_ddr &= ~_BV(lcd_D6_bit);
     e2a:	56 98       	cbi	0x0a, 6	; 10
	lcd_D5_ddr &= ~_BV(lcd_D5_bit);
     e2c:	55 98       	cbi	0x0a, 5	; 10
	lcd_D4_ddr &= ~_BV(lcd_D4_bit);
     e2e:	54 98       	cbi	0x0a, 4	; 10

	// LCD backlight cathode pin (K) - output, but make it input
	lcd_Backlight_ddr &= ~_BV(lcd_Backlight_bit);
     e30:	20 98       	cbi	0x04, 0	; 4

	// turn off LCD 
	lcd_VDD_port &= ~_BV(lcd_VDD_bit);
     e32:	2e 98       	cbi	0x05, 6	; 5
	// then, LCD VSS pin (Power Supply) - output, but make it input
	lcd_VDD_ddr &= ~_BV(lcd_VDD_bit);
     e34:	26 98       	cbi	0x04, 6	; 4

	// turn off DS1307
	DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
     e36:	2f 98       	cbi	0x05, 7	; 5
	// then, DS1307 Vcc pin (Power Supply) - output, but make it input
	DS1307_VCC_ddr &= ~_BV(DS1307_VCC_bit);
     e38:	27 98       	cbi	0x04, 7	; 4
	//Tactile switch - Input
	//tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);

	// configure the microprocessor pins for the control lines
	// E line - output, but make it input
	lcd_E_ddr &= ~_BV(lcd_E_bit);
     e3a:	53 98       	cbi	0x0a, 3	; 10
	
	// turn off RS 
	lcd_RS_port &= ~_BV(lcd_RS_bit);
     e3c:	5a 98       	cbi	0x0b, 2	; 11
	// RS line - output, but make it input
	lcd_RS_ddr &= ~_BV(lcd_RS_bit);
     e3e:	52 98       	cbi	0x0a, 2	; 10
     e40:	08 95       	ret

00000e42 <adjustHour>:

}//makePDasInput

void adjustHour()
{
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <adjustHour+0xa>
     e4c:	1f 92       	push	r1
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	10 e0       	ldi	r17, 0x00	; 0
    char strHour[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e5c:	8d e0       	ldi	r24, 0x0D	; 13
     e5e:	8a 95       	dec	r24
     e60:	f1 f7       	brne	.-4      	; 0xe5e <adjustHour+0x1c>
     e62:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Hour: ");
     e64:	81 e4       	ldi	r24, 0x41	; 65
     e66:	94 e0       	ldi	r25, 0x04	; 4
     e68:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        itoa(hour, strHour, 10);
     e6c:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <hour>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     e70:	4a e0       	ldi	r20, 0x0A	; 10
     e72:	be 01       	movw	r22, r28
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	08 2e       	mov	r0, r24
     e7a:	00 0c       	add	r0, r0
     e7c:	99 0b       	sbc	r25, r25
     e7e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strHour);
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     e8a:	8d ee       	ldi	r24, 0xED	; 237
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     e92:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e94:	e7 ea       	ldi	r30, 0xA7	; 167
     e96:	f1 e6       	ldi	r31, 0x61	; 97
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <adjustHour+0x56>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <adjustHour+0x5c>
     e9e:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     ea0:	84 fd       	sbrc	r24, 4
     ea2:	0c c0       	rjmp	.+24     	; 0xebc <adjustHour+0x7a>
        {
            hour++;
     ea4:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <hour>
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
            if (hour > 23)
     eaa:	88 31       	cpi	r24, 0x18	; 24
     eac:	24 f4       	brge	.+8      	; 0xeb6 <adjustHour+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            hour++;
     eae:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <hour>
     eb2:	01 2f       	mov	r16, r17
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <adjustHour+0x7a>
            if (hour > 23)
                hour=0;
     eb6:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <hour>
     eba:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
     ebc:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
     ebe:	81 2f       	mov	r24, r17
     ec0:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
     ec2:	89 30       	cpi	r24, 0x09	; 9
     ec4:	38 f4       	brcc	.+14     	; 0xed4 <adjustHour+0x92>
     ec6:	81 e1       	ldi	r24, 0x11	; 17
     ec8:	9a e7       	ldi	r25, 0x7A	; 122
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <adjustHour+0x88>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <adjustHour+0x8e>
     ed0:	00 00       	nop
     ed2:	c1 cf       	rjmp	.-126    	; 0xe56 <adjustHour+0x14>
     ed4:	e1 e1       	ldi	r30, 0x11	; 17
     ed6:	fa e7       	ldi	r31, 0x7A	; 122
     ed8:	31 97       	sbiw	r30, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <adjustHour+0x96>
     edc:	00 c0       	rjmp	.+0      	; 0xede <adjustHour+0x9c>
     ede:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)
}//adjustHour
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <adjustMin>:

void adjustMin()
{
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	00 d0       	rcall	.+0      	; 0xefa <adjustMin+0xa>
     efa:	1f 92       	push	r1
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     f00:	00 e0       	ldi	r16, 0x00	; 0
     f02:	10 e0       	ldi	r17, 0x00	; 0
    char strMin[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     f04:	80 e8       	ldi	r24, 0x80	; 128
     f06:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f0a:	8d e0       	ldi	r24, 0x0D	; 13
     f0c:	8a 95       	dec	r24
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <adjustMin+0x1c>
     f10:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Min: ");
     f12:	88 e4       	ldi	r24, 0x48	; 72
     f14:	94 e0       	ldi	r25, 0x04	; 4
     f16:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        itoa(min, strMin, 10);
     f1a:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <min>
     f1e:	4a e0       	ldi	r20, 0x0A	; 10
     f20:	be 01       	movw	r22, r28
     f22:	6f 5f       	subi	r22, 0xFF	; 255
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	08 2e       	mov	r0, r24
     f28:	00 0c       	add	r0, r0
     f2a:	99 0b       	sbc	r25, r25
     f2c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strMin);
     f30:	ce 01       	movw	r24, r28
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     f38:	8d ee       	ldi	r24, 0xED	; 237
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     f40:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f42:	e7 ea       	ldi	r30, 0xA7	; 167
     f44:	f1 e6       	ldi	r31, 0x61	; 97
     f46:	31 97       	sbiw	r30, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <adjustMin+0x56>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <adjustMin+0x5c>
     f4c:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     f4e:	84 fd       	sbrc	r24, 4
     f50:	0c c0       	rjmp	.+24     	; 0xf6a <adjustMin+0x7a>
        {
            min++;
     f52:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <min>
     f56:	8f 5f       	subi	r24, 0xFF	; 255
            if (min > 59)
     f58:	8c 33       	cpi	r24, 0x3C	; 60
     f5a:	24 f4       	brge	.+8      	; 0xf64 <adjustMin+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            min++;
     f5c:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <min>
     f60:	01 2f       	mov	r16, r17
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <adjustMin+0x7a>
            if (min > 59)
                min=0;
     f64:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <min>
     f68:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
     f6a:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
     f6c:	81 2f       	mov	r24, r17
     f6e:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
     f70:	89 30       	cpi	r24, 0x09	; 9
     f72:	38 f4       	brcc	.+14     	; 0xf82 <adjustMin+0x92>
     f74:	81 e1       	ldi	r24, 0x11	; 17
     f76:	9a e7       	ldi	r25, 0x7A	; 122
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <adjustMin+0x88>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <adjustMin+0x8e>
     f7e:	00 00       	nop
     f80:	c1 cf       	rjmp	.-126    	; 0xf04 <adjustMin+0x14>
     f82:	e1 e1       	ldi	r30, 0x11	; 17
     f84:	fa e7       	ldi	r31, 0x7A	; 122
     f86:	31 97       	sbiw	r30, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <adjustMin+0x96>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <adjustMin+0x9c>
     f8c:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustMin
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <adjustSec>:

void adjustSec()
{
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <adjustSec+0xa>
     fa8:	1f 92       	push	r1
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     fae:	00 e0       	ldi	r16, 0x00	; 0
     fb0:	10 e0       	ldi	r17, 0x00	; 0
    char strSec[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     fb2:	80 e8       	ldi	r24, 0x80	; 128
     fb4:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fb8:	8d e0       	ldi	r24, 0x0D	; 13
     fba:	8a 95       	dec	r24
     fbc:	f1 f7       	brne	.-4      	; 0xfba <adjustSec+0x1c>
     fbe:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (sec)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"sec: ");
     fc0:	8e e4       	ldi	r24, 0x4E	; 78
     fc2:	94 e0       	ldi	r25, 0x04	; 4
     fc4:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        itoa(sec, strSec, 10);
     fc8:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <sec>
     fcc:	4a e0       	ldi	r20, 0x0A	; 10
     fce:	be 01       	movw	r22, r28
     fd0:	6f 5f       	subi	r22, 0xFF	; 255
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	08 2e       	mov	r0, r24
     fd6:	00 0c       	add	r0, r0
     fd8:	99 0b       	sbc	r25, r25
     fda:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strSec);
     fde:	ce 01       	movw	r24, r28
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     fe6:	8d ee       	ldi	r24, 0xED	; 237
     fe8:	93 e0       	ldi	r25, 0x03	; 3
     fea:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     fee:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff0:	e7 ea       	ldi	r30, 0xA7	; 167
     ff2:	f1 e6       	ldi	r31, 0x61	; 97
     ff4:	31 97       	sbiw	r30, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <adjustSec+0x56>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <adjustSec+0x5c>
     ffa:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     ffc:	84 fd       	sbrc	r24, 4
     ffe:	0c c0       	rjmp	.+24     	; 0x1018 <adjustSec+0x7a>
        {
            sec++;
    1000:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <sec>
    1004:	8f 5f       	subi	r24, 0xFF	; 255
            if (sec > 59)
    1006:	8c 33       	cpi	r24, 0x3C	; 60
    1008:	24 f4       	brge	.+8      	; 0x1012 <adjustSec+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            sec++;
    100a:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <sec>
    100e:	01 2f       	mov	r16, r17
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <adjustSec+0x7a>
            if (sec > 59)
                sec=0;
    1012:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <sec>
    1016:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
    1018:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
    101a:	81 2f       	mov	r24, r17
    101c:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
    101e:	89 30       	cpi	r24, 0x09	; 9
    1020:	38 f4       	brcc	.+14     	; 0x1030 <adjustSec+0x92>
    1022:	81 e1       	ldi	r24, 0x11	; 17
    1024:	9a e7       	ldi	r25, 0x7A	; 122
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <adjustSec+0x88>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <adjustSec+0x8e>
    102c:	00 00       	nop
    102e:	c1 cf       	rjmp	.-126    	; 0xfb2 <adjustSec+0x14>
    1030:	e1 e1       	ldi	r30, 0x11	; 17
    1032:	fa e7       	ldi	r31, 0x7A	; 122
    1034:	31 97       	sbiw	r30, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <adjustSec+0x96>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <adjustSec+0x9c>
    103a:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustSec
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	08 95       	ret

0000104c <countButton>:

    uint8_t val;
    uint8_t DONE=0;


    loopCnt=0;
    104c:	80 e0       	ldi	r24, 0x00	; 0
    prevLoop=0;
    104e:	30 e0       	ldi	r19, 0x00	; 0
}//sysClockTest

//-----------------------------------
void countButton()
{
    uint8_t menuCnt=0;
    1050:	20 e0       	ldi	r18, 0x00	; 0
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
            if (menuCnt != 0)
                DONE = 1;
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	40 e0       	ldi	r20, 0x00	; 0
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    1056:	52 e0       	ldi	r21, 0x02	; 2
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    {
        loopCnt++;
    1058:	8f 5f       	subi	r24, 0xFF	; 255
        curLoop = loopCnt;
        lapse = curLoop - prevLoop;
    105a:	98 2f       	mov	r25, r24
    105c:	93 1b       	sub	r25, r19

        //menuSelectInterval is
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
    105e:	95 30       	cpi	r25, 0x05	; 5
    1060:	18 f0       	brcs	.+6      	; 0x1068 <countButton+0x1c>
        {
            if (menuCnt != 0)
    1062:	21 11       	cpse	r18, r1
    1064:	84 c0       	rjmp	.+264    	; 0x116e <countButton+0x122>
    1066:	6e c0       	rjmp	.+220    	; 0x1144 <countButton+0xf8>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    1068:	99 30       	cpi	r25, 0x09	; 9
    106a:	08 f4       	brcc	.+2      	; 0x106e <countButton+0x22>
    106c:	75 c0       	rjmp	.+234    	; 0x1158 <countButton+0x10c>
    106e:	22 23       	and	r18, r18
    1070:	09 f4       	brne	.+2      	; 0x1074 <countButton+0x28>
    1072:	65 c0       	rjmp	.+202    	; 0x113e <countButton+0xf2>
    1074:	71 c0       	rjmp	.+226    	; 0x1158 <countButton+0x10c>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1076:	1c 99       	sbic	0x03, 4	; 3
    1078:	10 c0       	rjmp	.+32     	; 0x109a <countButton+0x4e>
    107a:	94 2f       	mov	r25, r20
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <countButton+0x3c>
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    107e:	95 2f       	mov	r25, r21
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <countButton+0x3c>

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1082:	94 2f       	mov	r25, r20
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <countButton+0x3c>
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
            if (menuCnt != 0)
                DONE = 1;
    1086:	96 2f       	mov	r25, r22
    1088:	e3 e2       	ldi	r30, 0x23	; 35
    108a:	f4 ef       	ldi	r31, 0xF4	; 244
    108c:	31 97       	sbiw	r30, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <countButton+0x40>
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <countButton+0x46>
    1092:	00 00       	nop
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
      {
        // for debounce
        _delay_ms(halfSec/2);
        menuCnt++;
    1094:	2f 5f       	subi	r18, 0xFF	; 255

        //Pressing the button, lap time calculation should be reset
        //to give 1 sec of time to choose menuCnt
        prevLoop = loopCnt;
    1096:	38 2f       	mov	r19, r24
    1098:	01 c0       	rjmp	.+2      	; 0x109c <countButton+0x50>
    109a:	94 2f       	mov	r25, r20
    109c:	e1 e1       	ldi	r30, 0x11	; 17
    109e:	fa e7       	ldi	r31, 0x7A	; 122
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <countButton+0x54>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <countButton+0x5a>
    10a6:	00 00       	nop
    //Get menuCnt by counting the button press
    //If pressing the button within 1 second of interval between each press,
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    10a8:	99 23       	and	r25, r25
    10aa:	b1 f2       	breq	.-84     	; 0x1058 <countButton+0xc>

    //menuCnt has been set within 3sec of a PCINT occurence
    //  then, play WDT count for a corresponding alarm period.
    if (DONE)
    {
        if (DONE == 2)
    10ac:	92 30       	cpi	r25, 0x02	; 2
    10ae:	11 f4       	brne	.+4      	; 0x10b4 <countButton+0x68>
            menuCnt = prevMenuCnt;
    10b0:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <prevMenuCnt>
        //visual cue to notifiy user selected menuCnt
        //blinkLED(menuCnt);
        //_delay_ms(halfSec);
        //turnOnLCDpower();
        //lcd_dispON();
        prevMenuCnt = menuCnt;
    10b4:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <prevMenuCnt>
        switch (menuCnt)
    10b8:	23 30       	cpi	r18, 0x03	; 3
    10ba:	91 f0       	breq	.+36     	; 0x10e0 <countButton+0x94>
    10bc:	28 f4       	brcc	.+10     	; 0x10c8 <countButton+0x7c>
    10be:	21 30       	cpi	r18, 0x01	; 1
    10c0:	49 f0       	breq	.+18     	; 0x10d4 <countButton+0x88>
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	51 f0       	breq	.+20     	; 0x10da <countButton+0x8e>
    10c6:	24 c0       	rjmp	.+72     	; 0x1110 <countButton+0xc4>
    10c8:	25 30       	cpi	r18, 0x05	; 5
    10ca:	e1 f0       	breq	.+56     	; 0x1104 <countButton+0xb8>
    10cc:	90 f0       	brcs	.+36     	; 0x10f2 <countButton+0xa6>
    10ce:	26 30       	cpi	r18, 0x06	; 6
    10d0:	e1 f0       	breq	.+56     	; 0x110a <countButton+0xbe>
    10d2:	1e c0       	rjmp	.+60     	; 0x1110 <countButton+0xc4>
        {
            case 1:
                //lcd_dispWords();
                //lcd_dispRealClock();
                lcd_dispMenu();
    10d4:	0e 94 42 04 	call	0x884	; 0x884 <lcd_dispMenu>
				//LCD_TimeDate();
				//LCD_TimeDateTempHumid();
                //_delay_ms(2000);
				//getDHT();
                break;
    10d8:	1d c0       	rjmp	.+58     	; 0x1114 <countButton+0xc8>
            case 2:
				LCD_TimeDate();
    10da:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_TimeDate>
                //_delay_ms(2000);
				//getDHT();
                //lcd_showDHT11();
                break;
    10de:	1a c0       	rjmp	.+52     	; 0x1114 <countButton+0xc8>
            case 3:
				makePDasOutput();
    10e0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <makePDasOutput>
                turnOnLCDBacklight();
    10e4:	0e 94 c2 02 	call	0x584	; 0x584 <turnOnLCDBacklight>
				LCD_TimeDate();
    10e8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_TimeDate>
                turnOffLCDBacklight();
    10ec:	0e 94 c4 02 	call	0x588	; 0x588 <turnOffLCDBacklight>
                break;
    10f0:	11 c0       	rjmp	.+34     	; 0x1114 <countButton+0xc8>
            case 4:
                //adjustClock();
                adjustMin();
    10f2:	0e 94 78 07 	call	0xef0	; 0xef0 <adjustMin>
                adjustHour();
    10f6:	0e 94 21 07 	call	0xe42	; 0xe42 <adjustHour>
                adjustSec();
    10fa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <adjustSec>
                lcd_dispRealClock();
    10fe:	0e 94 c6 02 	call	0x58c	; 0x58c <lcd_dispRealClock>
                break;
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <countButton+0xc8>
            case 5:
                lcd_dispAccumulatedTime();
    1104:	0e 94 b7 03 	call	0x76e	; 0x76e <lcd_dispAccumulatedTime>
                break;
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <countButton+0xc8>
            case 6:
                lcd_dispProgInfo();
    110a:	0e 94 0e 04 	call	0x81c	; 0x81c <lcd_dispProgInfo>
                break;
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <countButton+0xc8>
            default:
				LCD_TimeDate();
    1110:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_TimeDate>
    1114:	ff e3       	ldi	r31, 0x3F	; 63
    1116:	22 e4       	ldi	r18, 0x42	; 66
    1118:	8f e0       	ldi	r24, 0x0F	; 15
    111a:	f1 50       	subi	r31, 0x01	; 1
    111c:	20 40       	sbci	r18, 0x00	; 0
    111e:	80 40       	sbci	r24, 0x00	; 0
    1120:	e1 f7       	brne	.-8      	; 0x111a <countButton+0xce>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <countButton+0xd8>
    1124:	00 00       	nop
                //getDHT();
        }//switch (menuCnt)

        _delay_ms(5000); //show time of menu result

		makePDasInput(); //make LCD in deep power save mode
    1126:	0e 94 14 07 	call	0xe28	; 0xe28 <makePDasInput>
		pwrOn = 0;
    112a:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <pwrOn>
    112e:	08 95       	ret
    1130:	e1 e1       	ldi	r30, 0x11	; 17
    1132:	fa e7       	ldi	r31, 0x7A	; 122
    1134:	31 97       	sbiw	r30, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <countButton+0xe8>
    1138:	00 c0       	rjmp	.+0      	; 0x113a <countButton+0xee>
    113a:	00 00       	nop
    113c:	b9 cf       	rjmp	.-142    	; 0x10b0 <countButton+0x64>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    113e:	1c 99       	sbic	0x03, 4	; 3
    1140:	f7 cf       	rjmp	.-18     	; 0x1130 <countButton+0xe4>
    1142:	9d cf       	rjmp	.-198    	; 0x107e <countButton+0x32>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    1144:	99 30       	cpi	r25, 0x09	; 9
    1146:	d8 f7       	brcc	.-10     	; 0x113e <countButton+0xf2>
    1148:	96 cf       	rjmp	.-212    	; 0x1076 <countButton+0x2a>
    114a:	e1 e1       	ldi	r30, 0x11	; 17
    114c:	fa e7       	ldi	r31, 0x7A	; 122
    114e:	31 97       	sbiw	r30, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <countButton+0x102>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <countButton+0x108>
    1154:	00 00       	nop
    1156:	80 cf       	rjmp	.-256    	; 0x1058 <countButton+0xc>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1158:	1c 99       	sbic	0x03, 4	; 3
    115a:	f7 cf       	rjmp	.-18     	; 0x114a <countButton+0xfe>
    115c:	92 cf       	rjmp	.-220    	; 0x1082 <countButton+0x36>
    115e:	81 e1       	ldi	r24, 0x11	; 17
    1160:	9a e7       	ldi	r25, 0x7A	; 122
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <countButton+0x116>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <countButton+0x11c>
    1168:	00 00       	nop
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
            if (menuCnt != 0)
                DONE = 1;
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	9f cf       	rjmp	.-194    	; 0x10ac <countButton+0x60>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    116e:	1c 99       	sbic	0x03, 4	; 3
    1170:	f6 cf       	rjmp	.-20     	; 0x115e <countButton+0x112>
    1172:	89 cf       	rjmp	.-238    	; 0x1086 <countButton+0x3a>

00001174 <__divmodqi4>:
    1174:	87 fb       	bst	r24, 7
    1176:	08 2e       	mov	r0, r24
    1178:	06 26       	eor	r0, r22
    117a:	87 fd       	sbrc	r24, 7
    117c:	81 95       	neg	r24
    117e:	67 fd       	sbrc	r22, 7
    1180:	61 95       	neg	r22
    1182:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodqi4>
    1186:	0e f4       	brtc	.+2      	; 0x118a <__divmodqi4_1>
    1188:	91 95       	neg	r25

0000118a <__divmodqi4_1>:
    118a:	07 fc       	sbrc	r0, 7
    118c:	81 95       	neg	r24

0000118e <__divmodqi4_exit>:
    118e:	08 95       	ret

00001190 <__divmodhi4>:
    1190:	97 fb       	bst	r25, 7
    1192:	07 2e       	mov	r0, r23
    1194:	16 f4       	brtc	.+4      	; 0x119a <__divmodhi4+0xa>
    1196:	00 94       	com	r0
    1198:	07 d0       	rcall	.+14     	; 0x11a8 <__divmodhi4_neg1>
    119a:	77 fd       	sbrc	r23, 7
    119c:	09 d0       	rcall	.+18     	; 0x11b0 <__divmodhi4_neg2>
    119e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__udivmodhi4>
    11a2:	07 fc       	sbrc	r0, 7
    11a4:	05 d0       	rcall	.+10     	; 0x11b0 <__divmodhi4_neg2>
    11a6:	3e f4       	brtc	.+14     	; 0x11b6 <__divmodhi4_exit>

000011a8 <__divmodhi4_neg1>:
    11a8:	90 95       	com	r25
    11aa:	81 95       	neg	r24
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	08 95       	ret

000011b0 <__divmodhi4_neg2>:
    11b0:	70 95       	com	r23
    11b2:	61 95       	neg	r22
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255

000011b6 <__divmodhi4_exit>:
    11b6:	08 95       	ret

000011b8 <__tablejump2__>:
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	05 90       	lpm	r0, Z+
    11be:	f4 91       	lpm	r31, Z
    11c0:	e0 2d       	mov	r30, r0
    11c2:	09 94       	ijmp

000011c4 <__umulhisi3>:
    11c4:	a2 9f       	mul	r26, r18
    11c6:	b0 01       	movw	r22, r0
    11c8:	b3 9f       	mul	r27, r19
    11ca:	c0 01       	movw	r24, r0
    11cc:	a3 9f       	mul	r26, r19
    11ce:	70 0d       	add	r23, r0
    11d0:	81 1d       	adc	r24, r1
    11d2:	11 24       	eor	r1, r1
    11d4:	91 1d       	adc	r25, r1
    11d6:	b2 9f       	mul	r27, r18
    11d8:	70 0d       	add	r23, r0
    11da:	81 1d       	adc	r24, r1
    11dc:	11 24       	eor	r1, r1
    11de:	91 1d       	adc	r25, r1
    11e0:	08 95       	ret

000011e2 <__udivmodqi4>:
    11e2:	99 1b       	sub	r25, r25
    11e4:	79 e0       	ldi	r23, 0x09	; 9
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <__udivmodqi4_ep>

000011e8 <__udivmodqi4_loop>:
    11e8:	99 1f       	adc	r25, r25
    11ea:	96 17       	cp	r25, r22
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <__udivmodqi4_ep>
    11ee:	96 1b       	sub	r25, r22

000011f0 <__udivmodqi4_ep>:
    11f0:	88 1f       	adc	r24, r24
    11f2:	7a 95       	dec	r23
    11f4:	c9 f7       	brne	.-14     	; 0x11e8 <__udivmodqi4_loop>
    11f6:	80 95       	com	r24
    11f8:	08 95       	ret

000011fa <__udivmodhi4>:
    11fa:	aa 1b       	sub	r26, r26
    11fc:	bb 1b       	sub	r27, r27
    11fe:	51 e1       	ldi	r21, 0x11	; 17
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <__udivmodhi4_ep>

00001202 <__udivmodhi4_loop>:
    1202:	aa 1f       	adc	r26, r26
    1204:	bb 1f       	adc	r27, r27
    1206:	a6 17       	cp	r26, r22
    1208:	b7 07       	cpc	r27, r23
    120a:	10 f0       	brcs	.+4      	; 0x1210 <__udivmodhi4_ep>
    120c:	a6 1b       	sub	r26, r22
    120e:	b7 0b       	sbc	r27, r23

00001210 <__udivmodhi4_ep>:
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	5a 95       	dec	r21
    1216:	a9 f7       	brne	.-22     	; 0x1202 <__udivmodhi4_loop>
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	08 95       	ret

00001222 <atoi>:
    1222:	fc 01       	movw	r30, r24
    1224:	88 27       	eor	r24, r24
    1226:	99 27       	eor	r25, r25
    1228:	e8 94       	clt
    122a:	21 91       	ld	r18, Z+
    122c:	20 32       	cpi	r18, 0x20	; 32
    122e:	e9 f3       	breq	.-6      	; 0x122a <atoi+0x8>
    1230:	29 30       	cpi	r18, 0x09	; 9
    1232:	10 f0       	brcs	.+4      	; 0x1238 <atoi+0x16>
    1234:	2e 30       	cpi	r18, 0x0E	; 14
    1236:	c8 f3       	brcs	.-14     	; 0x122a <atoi+0x8>
    1238:	2b 32       	cpi	r18, 0x2B	; 43
    123a:	41 f0       	breq	.+16     	; 0x124c <atoi+0x2a>
    123c:	2d 32       	cpi	r18, 0x2D	; 45
    123e:	39 f4       	brne	.+14     	; 0x124e <atoi+0x2c>
    1240:	68 94       	set
    1242:	04 c0       	rjmp	.+8      	; 0x124c <atoi+0x2a>
    1244:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulhi_const_10>
    1248:	82 0f       	add	r24, r18
    124a:	91 1d       	adc	r25, r1
    124c:	21 91       	ld	r18, Z+
    124e:	20 53       	subi	r18, 0x30	; 48
    1250:	2a 30       	cpi	r18, 0x0A	; 10
    1252:	c0 f3       	brcs	.-16     	; 0x1244 <atoi+0x22>
    1254:	1e f4       	brtc	.+6      	; 0x125c <atoi+0x3a>
    1256:	90 95       	com	r25
    1258:	81 95       	neg	r24
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	08 95       	ret

0000125e <strtok>:
    125e:	44 e5       	ldi	r20, 0x54	; 84
    1260:	54 e0       	ldi	r21, 0x04	; 4
    1262:	0e 94 44 09 	call	0x1288	; 0x1288 <strtok_r>
    1266:	08 95       	ret

00001268 <strcmp>:
    1268:	fb 01       	movw	r30, r22
    126a:	dc 01       	movw	r26, r24
    126c:	8d 91       	ld	r24, X+
    126e:	01 90       	ld	r0, Z+
    1270:	80 19       	sub	r24, r0
    1272:	01 10       	cpse	r0, r1
    1274:	d9 f3       	breq	.-10     	; 0x126c <strcmp+0x4>
    1276:	99 0b       	sbc	r25, r25
    1278:	08 95       	ret

0000127a <strcpy>:
    127a:	fb 01       	movw	r30, r22
    127c:	dc 01       	movw	r26, r24
    127e:	01 90       	ld	r0, Z+
    1280:	0d 92       	st	X+, r0
    1282:	00 20       	and	r0, r0
    1284:	e1 f7       	brne	.-8      	; 0x127e <strcpy+0x4>
    1286:	08 95       	ret

00001288 <strtok_r>:
    1288:	fa 01       	movw	r30, r20
    128a:	a1 91       	ld	r26, Z+
    128c:	b0 81       	ld	r27, Z
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	19 f4       	brne	.+6      	; 0x1298 <strtok_r+0x10>
    1292:	10 97       	sbiw	r26, 0x00	; 0
    1294:	e1 f0       	breq	.+56     	; 0x12ce <strtok_r+0x46>
    1296:	cd 01       	movw	r24, r26
    1298:	dc 01       	movw	r26, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0d 90       	ld	r0, X+
    129e:	00 20       	and	r0, r0
    12a0:	11 f4       	brne	.+4      	; 0x12a6 <strtok_r+0x1e>
    12a2:	c0 01       	movw	r24, r0
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <strtok_r+0x44>
    12a6:	fb 01       	movw	r30, r22
    12a8:	21 91       	ld	r18, Z+
    12aa:	22 23       	and	r18, r18
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <strtok_r+0x2c>
    12ae:	20 15       	cp	r18, r0
    12b0:	d9 f7       	brne	.-10     	; 0x12a8 <strtok_r+0x20>
    12b2:	f3 cf       	rjmp	.-26     	; 0x129a <strtok_r+0x12>
    12b4:	fb 01       	movw	r30, r22
    12b6:	21 91       	ld	r18, Z+
    12b8:	20 15       	cp	r18, r0
    12ba:	19 f4       	brne	.+6      	; 0x12c2 <strtok_r+0x3a>
    12bc:	1e 92       	st	-X, r1
    12be:	11 96       	adiw	r26, 0x01	; 1
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <strtok_r+0x46>
    12c2:	22 23       	and	r18, r18
    12c4:	c1 f7       	brne	.-16     	; 0x12b6 <strtok_r+0x2e>
    12c6:	0d 90       	ld	r0, X+
    12c8:	00 20       	and	r0, r0
    12ca:	a1 f7       	brne	.-24     	; 0x12b4 <strtok_r+0x2c>
    12cc:	d0 01       	movw	r26, r0
    12ce:	fa 01       	movw	r30, r20
    12d0:	a1 93       	st	Z+, r26
    12d2:	b0 83       	st	Z, r27
    12d4:	08 95       	ret

000012d6 <__itoa_ncheck>:
    12d6:	bb 27       	eor	r27, r27
    12d8:	4a 30       	cpi	r20, 0x0A	; 10
    12da:	31 f4       	brne	.+12     	; 0x12e8 <__itoa_ncheck+0x12>
    12dc:	99 23       	and	r25, r25
    12de:	22 f4       	brpl	.+8      	; 0x12e8 <__itoa_ncheck+0x12>
    12e0:	bd e2       	ldi	r27, 0x2D	; 45
    12e2:	90 95       	com	r25
    12e4:	81 95       	neg	r24
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__utoa_common>

000012ec <__mulhi_const_10>:
    12ec:	7a e0       	ldi	r23, 0x0A	; 10
    12ee:	97 9f       	mul	r25, r23
    12f0:	90 2d       	mov	r25, r0
    12f2:	87 9f       	mul	r24, r23
    12f4:	80 2d       	mov	r24, r0
    12f6:	91 0d       	add	r25, r1
    12f8:	11 24       	eor	r1, r1
    12fa:	08 95       	ret

000012fc <__utoa_ncheck>:
    12fc:	bb 27       	eor	r27, r27

000012fe <__utoa_common>:
    12fe:	fb 01       	movw	r30, r22
    1300:	55 27       	eor	r21, r21
    1302:	aa 27       	eor	r26, r26
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	aa 1f       	adc	r26, r26
    130a:	a4 17       	cp	r26, r20
    130c:	10 f0       	brcs	.+4      	; 0x1312 <__utoa_common+0x14>
    130e:	a4 1b       	sub	r26, r20
    1310:	83 95       	inc	r24
    1312:	50 51       	subi	r21, 0x10	; 16
    1314:	b9 f7       	brne	.-18     	; 0x1304 <__utoa_common+0x6>
    1316:	a0 5d       	subi	r26, 0xD0	; 208
    1318:	aa 33       	cpi	r26, 0x3A	; 58
    131a:	08 f0       	brcs	.+2      	; 0x131e <__utoa_common+0x20>
    131c:	a9 5d       	subi	r26, 0xD9	; 217
    131e:	a1 93       	st	Z+, r26
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	79 f7       	brne	.-34     	; 0x1302 <__utoa_common+0x4>
    1324:	b1 11       	cpse	r27, r1
    1326:	b1 93       	st	Z+, r27
    1328:	11 92       	st	Z+, r1
    132a:	cb 01       	movw	r24, r22
    132c:	0c 94 98 09 	jmp	0x1330	; 0x1330 <strrev>

00001330 <strrev>:
    1330:	dc 01       	movw	r26, r24
    1332:	fc 01       	movw	r30, r24
    1334:	67 2f       	mov	r22, r23
    1336:	71 91       	ld	r23, Z+
    1338:	77 23       	and	r23, r23
    133a:	e1 f7       	brne	.-8      	; 0x1334 <strrev+0x4>
    133c:	32 97       	sbiw	r30, 0x02	; 2
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <strrev+0x18>
    1340:	7c 91       	ld	r23, X
    1342:	6d 93       	st	X+, r22
    1344:	70 83       	st	Z, r23
    1346:	62 91       	ld	r22, -Z
    1348:	ae 17       	cp	r26, r30
    134a:	bf 07       	cpc	r27, r31
    134c:	c8 f3       	brcs	.-14     	; 0x1340 <strrev+0x10>
    134e:	08 95       	ret

00001350 <_exit>:
    1350:	f8 94       	cli

00001352 <__stop_program>:
    1352:	ff cf       	rjmp	.-2      	; 0x1352 <__stop_program>
