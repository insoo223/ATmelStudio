
LCD_RTC_DS1307_Structured.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001c6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001690  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000960  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fe  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00002ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000603  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a92  00000000  00000000  00003603  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  8e:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <InitAVR>:
{
	while(1)
	{
		LCD_TimeDate(); // put time & date on LCD
		msDelay(1000); // one second between updates
	}
  96:	8c ef       	ldi	r24, 0xFC	; 252
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	81 ee       	ldi	r24, 0xE1	; 225
  9c:	84 b9       	out	0x04, r24	; 4
  9e:	08 95       	ret

000000a0 <msDelay>:
  a0:	18 16       	cp	r1, r24
  a2:	19 06       	cpc	r1, r25
  a4:	6c f4       	brge	.+26     	; 0xc0 <msDelay+0x20>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	e9 ef       	ldi	r30, 0xF9	; 249
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <msDelay+0xe>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <msDelay+0x14>
  b4:	00 00       	nop
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	a9 f7       	brne	.-22     	; 0xaa <msDelay+0xa>
  c0:	08 95       	ret

000000c2 <PulseEnableLine>:
  c2:	5b 9a       	sbi	0x0b, 3	; 11
  c4:	8d e0       	ldi	r24, 0x0D	; 13
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <PulseEnableLine+0x4>
  ca:	00 00       	nop
  cc:	5b 98       	cbi	0x0b, 3	; 11
  ce:	08 95       	ret

000000d0 <SendNibble>:
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	93 7c       	andi	r25, 0xC3	; 195
  d4:	9b b9       	out	0x0b, r25	; 11
  d6:	84 fd       	sbrc	r24, 4
  d8:	5c 9a       	sbi	0x0b, 4	; 11
  da:	85 fd       	sbrc	r24, 5
  dc:	5d 9a       	sbi	0x0b, 5	; 11
  de:	86 fd       	sbrc	r24, 6
  e0:	5e 9a       	sbi	0x0b, 6	; 11
  e2:	88 23       	and	r24, r24
  e4:	0c f4       	brge	.+2      	; 0xe8 <SendNibble+0x18>
  e6:	5f 9a       	sbi	0x0b, 7	; 11
  e8:	0e 94 61 00 	call	0xc2	; 0xc2 <PulseEnableLine>
  ec:	08 95       	ret

000000ee <SendByte>:
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
  f2:	0e 94 68 00 	call	0xd0	; 0xd0 <SendNibble>
  f6:	8c 2f       	mov	r24, r28
  f8:	82 95       	swap	r24
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	0e 94 68 00 	call	0xd0	; 0xd0 <SendNibble>
 100:	5d 98       	cbi	0x0b, 5	; 11
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <LCD_Cmd>:
 106:	5a 98       	cbi	0x0b, 2	; 11
 108:	0e 94 77 00 	call	0xee	; 0xee <SendByte>
 10c:	08 95       	ret

0000010e <LCD_Char>:
 10e:	5a 9a       	sbi	0x0b, 2	; 11
 110:	0e 94 77 00 	call	0xee	; 0xee <SendByte>
 114:	08 95       	ret

00000116 <LCD_Init>:
 116:	87 ea       	ldi	r24, 0xA7	; 167
 118:	91 e6       	ldi	r25, 0x61	; 97
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_Init+0x4>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_Init+0xa>
 120:	00 00       	nop
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 128:	82 e3       	ldi	r24, 0x32	; 50
 12a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 146:	83 ec       	ldi	r24, 0xC3	; 195
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_Init+0x34>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Init+0x3a>
 150:	00 00       	nop
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 158:	92 e4       	ldi	r25, 0x42	; 66
 15a:	9a 95       	dec	r25
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x44>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x4a>
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_Init+0x52>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_Init+0x58>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Cmd>
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 50 00 	call	0xa0	; 0xa0 <msDelay>
 17c:	08 95       	ret

0000017e <LCD_String>:
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
 184:	88 81       	ld	r24, Y
 186:	88 23       	and	r24, r24
 188:	31 f0       	breq	.+12     	; 0x196 <LCD_String+0x18>
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Char>
 190:	89 91       	ld	r24, Y+
 192:	81 11       	cpse	r24, r1
 194:	fb cf       	rjmp	.-10     	; 0x18c <LCD_String+0xe>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <I2C_Init>:
 19c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1a0:	8d ef       	ldi	r24, 0xFD	; 253
 1a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 1a6:	08 95       	ret

000001a8 <main>:
}
// ---------------------------------------------------------------------------
// MAIN PROGRAM
int main(void)
{
	InitAVR(); // set port direction
 1a8:	0e 94 4b 00 	call	0x96	; 0x96 <InitAVR>
	LCD_Init(); // initialize HD44780 LCD controller
 1ac:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Init>
	I2C_Init(); // set I2C clock frequency
 1b0:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_Init>
	LCD_String("Ready.");
 1b4:	87 e0       	ldi	r24, 0x07	; 7
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_String>
	//ShowDevices(); // show that I2C is working OK
	//msDelay(4000);
	//LCD_Clear();
	//MainLoop(); // display time
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
