
LCD_RTC_DS1307_DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  000015ce  00001662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080046a  0080046a  000019cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052cc  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a4d  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024f7  00000000  00000000  00008ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000808  00000000  00000000  0000afbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000acb  00000000  00000000  0000b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001eeb  00000000  00000000  0000c28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e17a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_3>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	c0 03       	fmuls	r20, r16
      6a:	c4 03       	fmuls	r20, r20
      6c:	c0 03       	fmuls	r20, r16
      6e:	c8 03       	fmulsu	r20, r16
      70:	c0 03       	fmuls	r20, r16
      72:	c8 03       	fmulsu	r20, r16
      74:	c0 03       	fmuls	r20, r16
      76:	c0 03       	fmuls	r20, r16
      78:	c8 03       	fmulsu	r20, r16
      7a:	c0 03       	fmuls	r20, r16
      7c:	c8 03       	fmulsu	r20, r16
      7e:	c0 03       	fmuls	r20, r16
      80:	80 05       	cpc	r24, r0
      82:	89 05       	cpc	r24, r9
      84:	92 05       	cpc	r25, r2
      86:	9b 05       	cpc	r25, r11
      88:	a4 05       	cpc	r26, r4
      8a:	ad 05       	cpc	r26, r13
      8c:	b6 05       	cpc	r27, r6

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	14 e0       	ldi	r17, 0x04	; 4
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	ee ec       	ldi	r30, 0xCE	; 206
      a2:	f5 e1       	ldi	r31, 0x15	; 21
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	aa 36       	cpi	r26, 0x6A	; 106
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	24 e0       	ldi	r18, 0x04	; 4
      b2:	aa e6       	ldi	r26, 0x6A	; 106
      b4:	b4 e0       	ldi	r27, 0x04	; 4
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a1 38       	cpi	r26, 0x81	; 129
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 1a 07 	call	0xe34	; 0xe34 <main>
      c4:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <LCDconfig>:
PORTD for LCD
----------------*/
void LCDconfig()
{
// Data lines of nibble - Output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
      cc:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
      ce:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
      d0:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
      d2:	54 9a       	sbi	0x0a, 4	; 10

// E pin (Enable) - Output
	lcd_E_ddr |= _BV(lcd_E_bit);
      d4:	53 9a       	sbi	0x0a, 3	; 10
	//turn off lcd_E
	lcd_E_port &= ~_BV(lcd_E_bit);
      d6:	5b 98       	cbi	0x0b, 3	; 11


// RS pin (Register Select) - Output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
      d8:	52 9a       	sbi	0x0a, 2	; 10
	//turn off lcd_RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
      da:	5a 98       	cbi	0x0b, 2	; 11

// Back light cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
      dc:	20 9a       	sbi	0x04, 0	; 4
	// Turn off back light
	// for it is GND or cathode pin, HIGH make it off
	lcd_Backlight_port |= _BV(lcd_Backlight_bit);
      de:	28 9a       	sbi	0x05, 0	; 5

// VDD pin (Power Supply) - Output
	// added by Insoo (Jul 11, 2017) to control LCD power consumption while sleep
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
      e0:	26 9a       	sbi	0x04, 6	; 4
	//turn off VDD
	lcd_VDD_port &= ~_BV(lcd_VDD_bit);
      e2:	2e 98       	cbi	0x05, 6	; 5
      e4:	08 95       	ret

000000e6 <SwitchConfig>:
PORTB for the button/tactile switch
----------------*/
void SwitchConfig()
{
	//Tactile switch - Input
	tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);
      e6:	24 98       	cbi	0x04, 4	; 4
      e8:	08 95       	ret

000000ea <RTC_DS1307config>:
----------------*/
void RTC_DS1307config()
{
	// DS1307 VCC pin (Power Supply) - Output
	//added by Insoo (Jul 11, 2017)
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
      ea:	27 9a       	sbi	0x04, 7	; 4
	//turn off DS1307 RTC chip power
	DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
      ec:	2f 98       	cbi	0x05, 7	; 5
      ee:	08 95       	ret

000000f0 <DHT11config>:
----------------*/
void DHT11config()
{
	// DHT11 (temp & humid sensor) VCC pin (Power Supply) - Output
	//added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr |= _BV(DHT_VCC_bit);
      f0:	22 9a       	sbi	0x04, 2	; 4
	//turn off DS1307 RTC chip power
	DHT_VCC_port &= ~_BV(DHT_VCC_bit);
      f2:	2a 98       	cbi	0x05, 2	; 5
      f4:	08 95       	ret

000000f6 <debugPinConfig>:
PORTB for the debug pin 
----------------*/
void debugPinConfig()
{
	// debug pin - Output
	debug_PIN_ddr |= _BV(debug_PIN_bit);
      f6:	23 9a       	sbi	0x04, 3	; 4
	//turn off debug_PIN_bit
	debug_PIN_port &= ~_BV(debug_PIN_bit);
      f8:	2b 98       	cbi	0x05, 3	; 5
      fa:	08 95       	ret

000000fc <config>:
#include <util/delay.h>

//------------------------------------
void config()
{
	LCDconfig();
      fc:	0e 94 66 00 	call	0xcc	; 0xcc <LCDconfig>
	SwitchConfig();
     100:	0e 94 73 00 	call	0xe6	; 0xe6 <SwitchConfig>
	RTC_DS1307config();
     104:	0e 94 75 00 	call	0xea	; 0xea <RTC_DS1307config>
	DHT11config();
     108:	0e 94 78 00 	call	0xf0	; 0xf0 <DHT11config>
	debugPinConfig();
     10c:	0e 94 7b 00 	call	0xf6	; 0xf6 <debugPinConfig>
     110:	08 95       	ret

00000112 <getDHT>:

char strTemp[3], strHumid[3];

//-------------------------------------------
void getDHT()
{
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	00 d0       	rcall	.+0      	; 0x11c <getDHT+0xa>
     11c:	00 d0       	rcall	.+0      	; 0x11e <getDHT+0xc>
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
	uint16_t temp; 
	uint16_t humid; 
	TinuDHT tinudht;
	DHT_VCC_ddr |= _BV(DHT_VCC_bit);
     122:	22 9a       	sbi	0x04, 2	; 4
	DHT_VCC_port |= _BV(DHT_VCC_bit);
     124:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     126:	2f e9       	ldi	r18, 0x9F	; 159
     128:	86 e8       	ldi	r24, 0x86	; 134
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	21 50       	subi	r18, 0x01	; 1
     12e:	80 40       	sbci	r24, 0x00	; 0
     130:	90 40       	sbci	r25, 0x00	; 0
     132:	e1 f7       	brne	.-8      	; 0x12c <getDHT+0x1a>
     134:	00 c0       	rjmp	.+0      	; 0x136 <getDHT+0x24>
     136:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, DHT_SIG_bit);
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	ce 01       	movw	r24, r28
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	0e 94 a9 08 	call	0x1152	; 0x1152 <tinudht_read>
     142:	2f e9       	ldi	r18, 0x9F	; 159
     144:	86 e8       	ldi	r24, 0x86	; 134
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	21 50       	subi	r18, 0x01	; 1
     14a:	80 40       	sbci	r24, 0x00	; 0
     14c:	90 40       	sbci	r25, 0x00	; 0
     14e:	e1 f7       	brne	.-8      	; 0x148 <getDHT+0x36>
     150:	00 c0       	rjmp	.+0      	; 0x152 <getDHT+0x40>
     152:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, DHT_SIG_bit);
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	ce 01       	movw	r24, r28
     158:	01 96       	adiw	r24, 0x01	; 1
     15a:	0e 94 a9 08 	call	0x1152	; 0x1152 <tinudht_read>
	temp = tinudht.temperature;
	humid = tinudht.humidity;
     15e:	09 81       	ldd	r16, Y+1	; 0x01
     160:	1a 81       	ldd	r17, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     162:	4a e0       	ldi	r20, 0x0A	; 10
     164:	6c e7       	ldi	r22, 0x7C	; 124
     166:	74 e0       	ldi	r23, 0x04	; 4
     168:	8b 81       	ldd	r24, Y+3	; 0x03
     16a:	9c 81       	ldd	r25, Y+4	; 0x04
     16c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     170:	4a e0       	ldi	r20, 0x0A	; 10
     172:	69 e7       	ldi	r22, 0x79	; 121
     174:	74 e0       	ldi	r23, 0x04	; 4
     176:	c8 01       	movw	r24, r16
     178:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>

	// display the first line of information
	itoa(temp, strTemp, 10);
	itoa(humid, strHumid, 10);

     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	08 95       	ret

0000018e <DS1307_GetTime>:
	SetTimeDate(wkDay, month, day, year,  ampm,  h,  m,  s);
	_delay_ms(1000);
	
	LCD_WriteTimeDate();
	_delay_ms(3000);
}//setTime2DS1307
     18e:	ef 92       	push	r14
     190:	ff 92       	push	r15
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	ec 01       	movw	r28, r24
     19c:	7b 01       	movw	r14, r22
     19e:	8a 01       	movw	r16, r20
     1a0:	62 e0       	ldi	r22, 0x02	; 2
     1a2:	80 ed       	ldi	r24, 0xD0	; 208
     1a4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     1a8:	88 83       	st	Y, r24
     1aa:	61 e0       	ldi	r22, 0x01	; 1
     1ac:	80 ed       	ldi	r24, 0xD0	; 208
     1ae:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     1b2:	f7 01       	movw	r30, r14
     1b4:	80 83       	st	Z, r24
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	80 ed       	ldi	r24, 0xD0	; 208
     1ba:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     1be:	f8 01       	movw	r30, r16
     1c0:	80 83       	st	Z, r24
     1c2:	98 81       	ld	r25, Y
     1c4:	96 ff       	sbrs	r25, 6
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <DS1307_GetTime+0x40>
     1c8:	9f 71       	andi	r25, 0x1F	; 31
     1ca:	98 83       	st	Y, r25
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DS1307_GetTime+0x44>
     1ce:	9f 73       	andi	r25, 0x3F	; 63
     1d0:	98 83       	st	Y, r25
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	08 95       	ret

000001e0 <DS1307_GetDate>:
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	7c 01       	movw	r14, r24
     1ee:	8b 01       	movw	r16, r22
     1f0:	ea 01       	movw	r28, r20
     1f2:	65 e0       	ldi	r22, 0x05	; 5
     1f4:	80 ed       	ldi	r24, 0xD0	; 208
     1f6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     1fa:	f7 01       	movw	r30, r14
     1fc:	80 83       	st	Z, r24
     1fe:	64 e0       	ldi	r22, 0x04	; 4
     200:	80 ed       	ldi	r24, 0xD0	; 208
     202:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     206:	f8 01       	movw	r30, r16
     208:	80 83       	st	Z, r24
     20a:	66 e0       	ldi	r22, 0x06	; 6
     20c:	80 ed       	ldi	r24, 0xD0	; 208
     20e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     212:	88 83       	st	Y, r24
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	08 95       	ret

00000222 <DS1307_GetWkDay>:
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ec 01       	movw	r28, r24
     228:	63 e0       	ldi	r22, 0x03	; 3
     22a:	80 ed       	ldi	r24, 0xD0	; 208
     22c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     230:	88 83       	st	Y, r24
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <adjustHour>:
	_delay_ms(10);
}//SetTimeDate

//-----------------------------------
void adjustHour()
{
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	00 d0       	rcall	.+0      	; 0x242 <adjustHour+0xa>
     242:	1f 92       	push	r1
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	10 e0       	ldi	r17, 0x00	; 0
	char strHour[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     252:	84 e1       	ldi	r24, 0x14	; 20
     254:	8a 95       	dec	r24
     256:	f1 f7       	brne	.-4      	; 0x254 <adjustHour+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (min)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"Hour: ");
     258:	8e ec       	ldi	r24, 0xCE	; 206
     25a:	93 e0       	ldi	r25, 0x03	; 3
     25c:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		itoa(hour, strHour, 10);
     260:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     264:	4a e0       	ldi	r20, 0x0A	; 10
     266:	be 01       	movw	r22, r28
     268:	6f 5f       	subi	r22, 0xFF	; 255
     26a:	7f 4f       	sbci	r23, 0xFF	; 255
     26c:	08 2e       	mov	r0, r24
     26e:	00 0c       	add	r0, r0
     270:	99 0b       	sbc	r25, r25
     272:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strHour);
     276:	ce 01       	movw	r24, r28
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	94 e0       	ldi	r25, 0x04	; 4
     282:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     286:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     288:	e7 ea       	ldi	r30, 0xA7	; 167
     28a:	f1 e6       	ldi	r31, 0x61	; 97
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <adjustHour+0x54>
     290:	00 c0       	rjmp	.+0      	; 0x292 <adjustHour+0x5a>
     292:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     294:	84 fd       	sbrc	r24, 4
     296:	0c c0       	rjmp	.+24     	; 0x2b0 <adjustHour+0x78>
		{
			hour++;
     298:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     29c:	8f 5f       	subi	r24, 0xFF	; 255
			if (hour > 23)
     29e:	88 31       	cpi	r24, 0x18	; 24
     2a0:	24 f4       	brge	.+8      	; 0x2aa <adjustHour+0x72>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			hour++;
     2a2:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <hour>
     2a6:	01 2f       	mov	r16, r17
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <adjustHour+0x78>
			if (hour > 23)
			hour=0;
     2aa:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <hour>
     2ae:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     2b0:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     2b2:	81 2f       	mov	r24, r17
     2b4:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     2b6:	89 30       	cpi	r24, 0x09	; 9
     2b8:	38 f4       	brcc	.+14     	; 0x2c8 <adjustHour+0x90>
     2ba:	81 e1       	ldi	r24, 0x11	; 17
     2bc:	9a e7       	ldi	r25, 0x7A	; 122
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <adjustHour+0x86>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <adjustHour+0x8c>
     2c4:	00 00       	nop
     2c6:	c2 cf       	rjmp	.-124    	; 0x24c <adjustHour+0x14>
     2c8:	e1 e1       	ldi	r30, 0x11	; 17
     2ca:	fa e7       	ldi	r31, 0x7A	; 122
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <adjustHour+0x94>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <adjustHour+0x9a>
     2d2:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)
}//adjustHour
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	08 95       	ret

000002e4 <adjustMin>:

//-----------------------------------
void adjustMin()
{
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <adjustMin+0xa>
     2ee:	1f 92       	push	r1
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	10 e0       	ldi	r17, 0x00	; 0
	char strMin[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     2f8:	80 e8       	ldi	r24, 0x80	; 128
     2fa:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fe:	84 e1       	ldi	r24, 0x14	; 20
     300:	8a 95       	dec	r24
     302:	f1 f7       	brne	.-4      	; 0x300 <adjustMin+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (min)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"Min: ");
     304:	85 ed       	ldi	r24, 0xD5	; 213
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		itoa(min, strMin, 10);
     30c:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <min>
     310:	4a e0       	ldi	r20, 0x0A	; 10
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	08 2e       	mov	r0, r24
     31a:	00 0c       	add	r0, r0
     31c:	99 0b       	sbc	r25, r25
     31e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strMin);
     322:	ce 01       	movw	r24, r28
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	94 e0       	ldi	r25, 0x04	; 4
     32e:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     332:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     334:	e7 ea       	ldi	r30, 0xA7	; 167
     336:	f1 e6       	ldi	r31, 0x61	; 97
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <adjustMin+0x54>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <adjustMin+0x5a>
     33e:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     340:	84 fd       	sbrc	r24, 4
     342:	0c c0       	rjmp	.+24     	; 0x35c <adjustMin+0x78>
		{
			min++;
     344:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <min>
     348:	8f 5f       	subi	r24, 0xFF	; 255
			if (min > 59)
     34a:	8c 33       	cpi	r24, 0x3C	; 60
     34c:	24 f4       	brge	.+8      	; 0x356 <adjustMin+0x72>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			min++;
     34e:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <min>
     352:	01 2f       	mov	r16, r17
     354:	03 c0       	rjmp	.+6      	; 0x35c <adjustMin+0x78>
			if (min > 59)
			min=0;
     356:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <min>
     35a:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     35c:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     35e:	81 2f       	mov	r24, r17
     360:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     362:	89 30       	cpi	r24, 0x09	; 9
     364:	38 f4       	brcc	.+14     	; 0x374 <adjustMin+0x90>
     366:	81 e1       	ldi	r24, 0x11	; 17
     368:	9a e7       	ldi	r25, 0x7A	; 122
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <adjustMin+0x86>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <adjustMin+0x8c>
     370:	00 00       	nop
     372:	c2 cf       	rjmp	.-124    	; 0x2f8 <adjustMin+0x14>
     374:	e1 e1       	ldi	r30, 0x11	; 17
     376:	fa e7       	ldi	r31, 0x7A	; 122
     378:	31 97       	sbiw	r30, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <adjustMin+0x94>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <adjustMin+0x9a>
     37e:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)

}//adjustMin
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <adjustSec>:

//-----------------------------------
void adjustSec()
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	00 d0       	rcall	.+0      	; 0x39a <adjustSec+0xa>
     39a:	1f 92       	push	r1
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     3a0:	00 e0       	ldi	r16, 0x00	; 0
     3a2:	10 e0       	ldi	r17, 0x00	; 0
	char strSec[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3aa:	84 e1       	ldi	r24, 0x14	; 20
     3ac:	8a 95       	dec	r24
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <adjustSec+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (sec)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"sec: ");
     3b0:	8b ed       	ldi	r24, 0xDB	; 219
     3b2:	93 e0       	ldi	r25, 0x03	; 3
     3b4:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		itoa(sec, strSec, 10);
     3b8:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     3bc:	4a e0       	ldi	r20, 0x0A	; 10
     3be:	be 01       	movw	r22, r28
     3c0:	6f 5f       	subi	r22, 0xFF	; 255
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	08 2e       	mov	r0, r24
     3c6:	00 0c       	add	r0, r0
     3c8:	99 0b       	sbc	r25, r25
     3ca:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strSec);
     3ce:	ce 01       	movw	r24, r28
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     3de:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e0:	e7 ea       	ldi	r30, 0xA7	; 167
     3e2:	f1 e6       	ldi	r31, 0x61	; 97
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <adjustSec+0x54>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <adjustSec+0x5a>
     3ea:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     3ec:	84 fd       	sbrc	r24, 4
     3ee:	0c c0       	rjmp	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			sec++;
     3f0:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
			if (sec > 59)
     3f6:	8c 33       	cpi	r24, 0x3C	; 60
     3f8:	24 f4       	brge	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			sec++;
     3fa:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sec>
     3fe:	01 2f       	mov	r16, r17
     400:	03 c0       	rjmp	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			if (sec > 59)
			sec=0;
     402:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <sec>
     406:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     408:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     40a:	81 2f       	mov	r24, r17
     40c:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     40e:	89 30       	cpi	r24, 0x09	; 9
     410:	38 f4       	brcc	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     412:	81 e1       	ldi	r24, 0x11	; 17
     414:	9a e7       	ldi	r25, 0x7A	; 122
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41c:	00 00       	nop
     41e:	c2 cf       	rjmp	.-124    	; 0x3a4 <adjustSec+0x14>
     420:	e1 e1       	ldi	r30, 0x11	; 17
     422:	fa e7       	ldi	r31, 0x7A	; 122
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)

}//adjustSec
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <LCD_WriteDate>:
}//ShowDevices


//----------------------------------
void LCD_WriteDate()
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	00 d0       	rcall	.+0      	; 0x442 <LCD_WriteDate+0x6>
     442:	00 d0       	rcall	.+0      	; 0x444 <LCD_WriteDate+0x8>
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
	byte months, days, years;
	byte wkDays;

	DS1307_GetDate(&months,&days,&years);
     448:	ae 01       	movw	r20, r28
     44a:	4d 5f       	subi	r20, 0xFD	; 253
     44c:	5f 4f       	sbci	r21, 0xFF	; 255
     44e:	be 01       	movw	r22, r28
     450:	6e 5f       	subi	r22, 0xFE	; 254
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DS1307_GetDate>
	LCD_BCDDigits(months);
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	0e 94 c4 04 	call	0x988	; 0x988 <LCD_BCDDigits>
	//LCD_Char('/');
	lcd_write_character_4d('/');
     462:	8f e2       	ldi	r24, 0x2F	; 47
     464:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
	LCD_BCDDigits(days);
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	0e 94 c4 04 	call	0x988	; 0x988 <LCD_BCDDigits>
	//LCD_Char('/');
	lcd_write_character_4d('/');
     46e:	8f e2       	ldi	r24, 0x2F	; 47
     470:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
	LCD_BCDDigits(years);
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	0e 94 c4 04 	call	0x988	; 0x988 <LCD_BCDDigits>

	lcd_write_character_4d(' ');
     47a:	80 e2       	ldi	r24, 0x20	; 32
     47c:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
	DS1307_GetWkDay(&wkDays);
     480:	ce 01       	movw	r24, r28
     482:	04 96       	adiw	r24, 0x04	; 4
     484:	0e 94 11 01 	call	0x222	; 0x222 <DS1307_GetWkDay>
	LCD_BCDDigits(wkDays);
     488:	8c 81       	ldd	r24, Y+4	; 0x04
     48a:	0e 94 c4 04 	call	0x988	; 0x988 <LCD_BCDDigits>

}//LCD_WriteDate
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <LCD_WriteTime>:

//----------------------------------
void LCD_WriteTime()
{
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <LCD_WriteTime+0x6>
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
	byte hours, minutes, seconds;
	DS1307_GetTime(&hours,&minutes,&seconds);
     4a8:	ae 01       	movw	r20, r28
     4aa:	4d 5f       	subi	r20, 0xFD	; 253
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	be 01       	movw	r22, r28
     4b0:	6e 5f       	subi	r22, 0xFE	; 254
     4b2:	7f 4f       	sbci	r23, 0xFF	; 255
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	0e 94 c7 00 	call	0x18e	; 0x18e <DS1307_GetTime>
	LCD_BCDDigits(hours);
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	0e 94 c4 04 	call	0x988	; 0x988 <LCD_BCDDigits>
	//LCD_Char(':');
	lcd_write_character_4d(':');
     4c2:	8a e3       	ldi	r24, 0x3A	; 58
     4c4:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>

	LCD_BCDDigits(minutes);
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	0e 94 c4 04 	call	0x988	; 0x988 <LCD_BCDDigits>
	//LCD_Char(':');
	lcd_write_character_4d(':');
     4ce:	8a e3       	ldi	r24, 0x3A	; 58
     4d0:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>

	LCD_BCDDigits(seconds);
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	0e 94 c4 04 	call	0x988	; 0x988 <LCD_BCDDigits>
}//LCD_WriteTime
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <LCD_WriteTimeDate>:

//----------------------------------
void LCD_WriteTimeDate()
{
	//LCD_Line(0);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	LCD_WriteTime();
     4ec:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_WriteTime>
	LCD_blankChar(8);
     4f0:	88 e0       	ldi	r24, 0x08	; 8
     4f2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_blankChar>

	//LCD_Line(1);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     4f6:	80 ec       	ldi	r24, 0xC0	; 192
     4f8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	LCD_WriteDate();
     4fc:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteDate>
	LCD_blankChar(8);
     500:	88 e0       	ldi	r24, 0x08	; 8
     502:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_blankChar>
     506:	08 95       	ret

00000508 <LCD_WriteTimeDateTempHumid>:

//----------------------------------
void LCD_WriteTimeDateTempHumid()
{
	//LCD_Line(0);
	getDHT();
     508:	0e 94 89 00 	call	0x112	; 0x112 <getDHT>
	//_delay_ms(1000);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     50c:	80 e8       	ldi	r24, 0x80	; 128
     50e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	LCD_WriteTime();
     512:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_WriteTime>
	LCD_blankChar(5);
     516:	85 e0       	ldi	r24, 0x05	; 5
     518:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strTemp);
     51c:	8c e7       	ldi	r24, 0x7C	; 124
     51e:	94 e0       	ldi	r25, 0x04	; 4
     520:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
	//LCD_blankChar(1);
	lcd_write_character_4d('C');
     524:	83 e4       	ldi	r24, 0x43	; 67
     526:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>

	//LCD_Line(1);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     52a:	80 ec       	ldi	r24, 0xC0	; 192
     52c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	LCD_WriteDate();
     530:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteDate>
	LCD_blankChar(2);
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strHumid);
     53a:	89 e7       	ldi	r24, 0x79	; 121
     53c:	94 e0       	ldi	r25, 0x04	; 4
     53e:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
	//LCD_blankChar(1);
	//lcd_write_character_4d('%');
	lcd_write_character_4d(37);
     542:	85 e2       	ldi	r24, 0x25	; 37
     544:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
     548:	08 95       	ret

0000054a <I2C_Init>:
{
	I2C_Start(busAddr); // send bus address
	I2C_Write(deviceRegister); // first byte = device register address
	I2C_Write(data); // second byte = data for device register
	I2C_Stop();
}//I2C_WriteRegister
     54a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     54e:	8d ef       	ldi	r24, 0xFD	; 253
     550:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     554:	08 95       	ret

00000556 <I2C_Detect>:
     556:	94 ea       	ldi	r25, 0xA4	; 164
     558:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     55c:	ec eb       	ldi	r30, 0xBC	; 188
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	90 81       	ld	r25, Z
     562:	99 23       	and	r25, r25
     564:	ec f7       	brge	.-6      	; 0x560 <I2C_Detect+0xa>
     566:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     56a:	84 e8       	ldi	r24, 0x84	; 132
     56c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     570:	ec eb       	ldi	r30, 0xBC	; 188
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	88 23       	and	r24, r24
     578:	ec f7       	brge	.-6      	; 0x574 <I2C_Detect+0x1e>
     57a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     57e:	98 7f       	andi	r25, 0xF8	; 248
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	98 31       	cpi	r25, 0x18	; 24
     584:	09 f0       	breq	.+2      	; 0x588 <I2C_Detect+0x32>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	08 95       	ret

0000058a <I2C_Write>:
     58a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     58e:	84 e8       	ldi	r24, 0x84	; 132
     590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     594:	ec eb       	ldi	r30, 0xBC	; 188
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	88 23       	and	r24, r24
     59c:	ec f7       	brge	.-6      	; 0x598 <I2C_Write+0xe>
     59e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a2:	98 7f       	andi	r25, 0xF8	; 248
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	98 32       	cpi	r25, 0x28	; 40
     5a8:	09 f4       	brne	.+2      	; 0x5ac <I2C_Write+0x22>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret

000005ae <I2C_ReadNACK>:
     5ae:	84 e8       	ldi	r24, 0x84	; 132
     5b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5b4:	ec eb       	ldi	r30, 0xBC	; 188
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	88 23       	and	r24, r24
     5bc:	ec f7       	brge	.-6      	; 0x5b8 <I2C_ReadNACK+0xa>
     5be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5c2:	08 95       	ret

000005c4 <I2C_ReadRegister>:

//----------------------------------
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	c8 2f       	mov	r28, r24
     5ca:	d6 2f       	mov	r29, r22
}//I2C_FindDevice

//----------------------------------
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
     5cc:	0e 94 ab 02 	call	0x556	; 0x556 <I2C_Detect>
//----------------------------------
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
     5d0:	8d 2f       	mov	r24, r29
     5d2:	0e 94 c5 02 	call	0x58a	; 0x58a <I2C_Write>
}//I2C_FindDevice

//----------------------------------
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	8c 0f       	add	r24, r28
     5da:	0e 94 ab 02 	call	0x556	; 0x556 <I2C_Detect>
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
	I2C_Start(busAddr+READ); // restart as a read operation
	data = I2C_ReadNACK(); // read the register data
     5de:	0e 94 d7 02 	call	0x5ae	; 0x5ae <I2C_ReadNACK>
	I2C_Stop(); // stop
     5e2:	94 e9       	ldi	r25, 0x94	; 148
     5e4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	return data;
}//I2C_ReadRegister
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <__vector_3>:
    EIMSK = 0x00;

    TIMSK0 = 0x02; //timer 0 interrupt sources

    PRR = 0x00; //power controller
    sei(); //re-enable interrupts
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	2f 93       	push	r18
     5fa:	3f 93       	push	r19
     5fc:	4f 93       	push	r20
     5fe:	5f 93       	push	r21
     600:	6f 93       	push	r22
     602:	7f 93       	push	r23
     604:	8f 93       	push	r24
     606:	9f 93       	push	r25
     608:	af 93       	push	r26
     60a:	bf 93       	push	r27
     60c:	ef 93       	push	r30
     60e:	ff 93       	push	r31
     610:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <btcnt>
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	98 0f       	add	r25, r24
     618:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <btcnt>
     61c:	80 fd       	sbrc	r24, 0
     61e:	1a c0       	rjmp	.+52     	; 0x654 <__vector_3+0x66>
     620:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <pwrOn>
     624:	81 11       	cpse	r24, r1
     626:	0d c0       	rjmp	.+26     	; 0x642 <__vector_3+0x54>
     628:	0e 94 30 07 	call	0xe60	; 0xe60 <makePDasOutput>
     62c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_init_4d>
     630:	83 ec       	ldi	r24, 0xC3	; 195
     632:	99 e0       	ldi	r25, 0x09	; 9
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <__vector_3+0x46>
     638:	00 c0       	rjmp	.+0      	; 0x63a <__vector_3+0x4c>
     63a:	00 00       	nop
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <pwrOn>
     642:	1c 99       	sbic	0x03, 4	; 3
     644:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <countButton>
     648:	8f e4       	ldi	r24, 0x4F	; 79
     64a:	93 ec       	ldi	r25, 0xC3	; 195
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <__vector_3+0x5e>
     650:	00 c0       	rjmp	.+0      	; 0x652 <__vector_3+0x64>
     652:	00 00       	nop
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <initINT>:
     676:	f8 94       	cli
     678:	e8 e6       	ldi	r30, 0x68	; 104
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	81 60       	ori	r24, 0x01	; 1
     680:	80 83       	st	Z, r24
     682:	eb e6       	ldi	r30, 0x6B	; 107
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	80 61       	ori	r24, 0x10	; 16
     68a:	80 83       	st	Z, r24
     68c:	78 94       	sei
     68e:	08 95       	ret

00000690 <proceedClock>:

//----------------------------------
void proceedClock()
{
    //WDT interrupt occurs every 8 seconds
    sec += 8;
     690:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     694:	88 5f       	subi	r24, 0xF8	; 248
     696:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sec>
    accumulatedSec += 8;
     69a:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <accumulatedSec>
     69e:	28 5f       	subi	r18, 0xF8	; 248
     6a0:	20 93 6c 04 	sts	0x046C, r18	; 0x80046c <accumulatedSec>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
     6a4:	8c 33       	cpi	r24, 0x3C	; 60
     6a6:	5c f0       	brlt	.+22     	; 0x6be <proceedClock+0x2e>
    {
        sec%=60;
        min++;
     6a8:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <min>
     6ac:	9f 5f       	subi	r25, 0xFF	; 255
     6ae:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <min>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
    {
        sec%=60;
     6b2:	6c e3       	ldi	r22, 0x3C	; 60
     6b4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__divmodqi4>
        min++;
        sec += 2;
     6b8:	9e 5f       	subi	r25, 0xFE	; 254
     6ba:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <sec>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
     6be:	2c 33       	cpi	r18, 0x3C	; 60
     6c0:	64 f0       	brlt	.+24     	; 0x6da <proceedClock+0x4a>
    {
        accumulatedSec%=60;
        accumulatedMin++;
     6c2:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <accumulatedMin>
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <accumulatedMin>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
    {
        accumulatedSec%=60;
     6cc:	82 2f       	mov	r24, r18
     6ce:	6c e3       	ldi	r22, 0x3C	; 60
     6d0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__divmodqi4>
        accumulatedMin++;
        accumulatedSec += 2;
     6d4:	9e 5f       	subi	r25, 0xFE	; 254
     6d6:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <accumulatedSec>
    }

    //real-time fetched from compiled time constant __TIME__
    //calculate hours
    if (min >= 60)
     6da:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <min>
     6de:	8c 33       	cpi	r24, 0x3C	; 60
     6e0:	54 f0       	brlt	.+20     	; 0x6f6 <proceedClock+0x66>
    {
        min%=60;
     6e2:	6c e3       	ldi	r22, 0x3C	; 60
     6e4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__divmodqi4>
     6e8:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <min>
        hour++;
     6ec:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <hour>
    }
    //system run-time acculated time
    //calculate hours
    //if ((accumulatedMin == 60) && (hourlyAdjusted == 0))
    if (accumulatedMin == 60)
     6f6:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <accumulatedMin>
     6fa:	8c 33       	cpi	r24, 0x3C	; 60
     6fc:	61 f4       	brne	.+24     	; 0x716 <proceedClock+0x86>
    {
        // adjust time by experiments
        //hourlyAdjusted = 1;
        sec -= 20;
     6fe:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     702:	84 51       	subi	r24, 0x14	; 20
     704:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sec>
        accumulatedMin = 0;
     708:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <accumulatedMin>
        accumulatedHour++;
     70c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <accumulatedHour>
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <accumulatedHour>
    }
    /*
    if (accumulatedMin == 59)
        hourlyAdjusted = 0;
    */
    if (hour >= 24)
     716:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     71a:	88 31       	cpi	r24, 0x18	; 24
     71c:	04 f1       	brlt	.+64     	; 0x75e <proceedClock+0xce>
    {
        hour=0;
     71e:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <hour>
        date++;
     722:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <date>
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <date>
        day++;
     72c:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <day>
     730:	8f 5f       	subi	r24, 0xFF	; 255
        if (day >= 7)
     732:	87 30       	cpi	r24, 0x07	; 7
     734:	1c f4       	brge	.+6      	; 0x73c <proceedClock+0xac>
    */
    if (hour >= 24)
    {
        hour=0;
        date++;
        day++;
     736:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <day>
     73a:	11 c0       	rjmp	.+34     	; 0x75e <proceedClock+0xce>
        if (day >= 7)
            day %= 7;
     73c:	93 e9       	ldi	r25, 0x93	; 147
     73e:	89 02       	muls	r24, r25
     740:	91 2d       	mov	r25, r1
     742:	11 24       	eor	r1, r1
     744:	98 0f       	add	r25, r24
     746:	95 95       	asr	r25
     748:	95 95       	asr	r25
     74a:	87 fd       	sbrc	r24, 7
     74c:	93 95       	inc	r25
     74e:	29 2f       	mov	r18, r25
     750:	22 0f       	add	r18, r18
     752:	22 0f       	add	r18, r18
     754:	22 0f       	add	r18, r18
     756:	29 1b       	sub	r18, r25
     758:	82 1b       	sub	r24, r18
     75a:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <day>
    }
    switch (month)
     75e:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <month>
     762:	82 2f       	mov	r24, r18
     764:	02 2e       	mov	r0, r18
     766:	00 0c       	add	r0, r0
     768:	99 0b       	sbc	r25, r25
     76a:	aa 0b       	sbc	r26, r26
     76c:	bb 0b       	sbc	r27, r27
     76e:	fc 01       	movw	r30, r24
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	ec 30       	cpi	r30, 0x0C	; 12
     774:	f1 05       	cpc	r31, r1
     776:	60 f4       	brcc	.+24     	; 0x790 <proceedClock+0x100>
     778:	ec 5c       	subi	r30, 0xCC	; 204
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__tablejump2__>
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            monthEndDate = 31;
     780:	8f e1       	ldi	r24, 0x1F	; 31
     782:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <monthEndDate>
            break;
     786:	07 c0       	rjmp	.+14     	; 0x796 <proceedClock+0x106>
        case 2:
            monthEndDate = 28;
     788:	8c e1       	ldi	r24, 0x1C	; 28
     78a:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <monthEndDate>
            break;
     78e:	03 c0       	rjmp	.+6      	; 0x796 <proceedClock+0x106>
        default:
            monthEndDate = 30;
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <monthEndDate>
    }//switch (month)

    if (date > monthEndDate)
     796:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <date>
     79a:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <monthEndDate>
     79e:	89 17       	cp	r24, r25
     7a0:	34 f4       	brge	.+12     	; 0x7ae <proceedClock+0x11e>
    {
        date=1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <date>
        month++;
     7a8:	2f 5f       	subi	r18, 0xFF	; 255
     7aa:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <month>
    }

    if (month > 12)
     7ae:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <month>
     7b2:	8d 30       	cpi	r24, 0x0D	; 13
     7b4:	44 f0       	brlt	.+16     	; 0x7c6 <proceedClock+0x136>
    {
        month=1;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
        year++;
     7bc:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <year>
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <year>
     7c6:	08 95       	ret

000007c8 <__vector_6>:
	}//if ((btcnt++ % 2) == 0)
}//ISR(PCINT0_vect)

//-----------------------------------
ISR(WDT_vect)
{
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
    //PORTB |= _BV(PB4);
    proceedClock();
     7ea:	0e 94 48 03 	call	0x690	; 0x690 <proceedClock>
    lcd_dispWords(wd%MAXWORDCNT);
     7ee:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <wd>
     7f2:	9d ec       	ldi	r25, 0xCD	; 205
     7f4:	89 9f       	mul	r24, r25
     7f6:	91 2d       	mov	r25, r1
     7f8:	11 24       	eor	r1, r1
     7fa:	96 95       	lsr	r25
     7fc:	96 95       	lsr	r25
     7fe:	96 95       	lsr	r25
     800:	99 0f       	add	r25, r25
     802:	29 2f       	mov	r18, r25
     804:	22 0f       	add	r18, r18
     806:	22 0f       	add	r18, r18
     808:	92 0f       	add	r25, r18
     80a:	89 1b       	sub	r24, r25
     80c:	0e 94 76 06 	call	0xcec	; 0xcec <lcd_dispWords>
    wd++;
     810:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <wd>
     814:	8f 5f       	subi	r24, 0xFF	; 255
     816:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <wd>
    //lcd_dispRealClock();
    //PORTB &= ~_BV(PB4);
}//ISR(WDT_vect)
     81a:	ff 91       	pop	r31
     81c:	ef 91       	pop	r30
     81e:	bf 91       	pop	r27
     820:	af 91       	pop	r26
     822:	9f 91       	pop	r25
     824:	8f 91       	pop	r24
     826:	7f 91       	pop	r23
     828:	6f 91       	pop	r22
     82a:	5f 91       	pop	r21
     82c:	4f 91       	pop	r20
     82e:	3f 91       	pop	r19
     830:	2f 91       	pop	r18
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~_BV(lcd_D7_bit);                        // assume that data is '0'
     83c:	5f 98       	cbi	0x0b, 7	; 11
    if (theByte & 1<<7) lcd_D7_port |= _BV(lcd_D7_bit);     // make data = '1' if necessary
     83e:	88 23       	and	r24, r24
     840:	0c f4       	brge	.+2      	; 0x844 <lcd_write_4+0x8>
     842:	5f 9a       	sbi	0x0b, 7	; 11

    lcd_D6_port &= ~_BV(lcd_D6_bit);                        // repeat for each data bit
     844:	5e 98       	cbi	0x0b, 6	; 11
    if (theByte & 1<<6) lcd_D6_port |= _BV(lcd_D6_bit);
     846:	86 fd       	sbrc	r24, 6
     848:	5e 9a       	sbi	0x0b, 6	; 11

    lcd_D5_port &= ~_BV(lcd_D5_bit);
     84a:	5d 98       	cbi	0x0b, 5	; 11
    if (theByte & 1<<5) lcd_D5_port |= _BV(lcd_D5_bit);
     84c:	85 fd       	sbrc	r24, 5
     84e:	5d 9a       	sbi	0x0b, 5	; 11

    lcd_D4_port &= ~_BV(lcd_D4_bit);
     850:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<4) lcd_D4_port |= _BV(lcd_D4_bit);
     852:	84 fd       	sbrc	r24, 4
     854:	5c 9a       	sbi	0x0b, 4	; 11

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= _BV(lcd_E_bit);                   // Enable pin high
     856:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     858:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~_BV(lcd_E_bit);                  // Enable pin low
     85a:	5b 98       	cbi	0x0b, 3	; 11
     85c:	00 00       	nop
     85e:	08 95       	ret

00000860 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     860:	cf 93       	push	r28
     862:	c8 2f       	mov	r28, r24
    lcd_RS_port |= _BV(lcd_RS_bit);                 // select the Data Register (RS high)
     864:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     866:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     868:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     86c:	8c 2f       	mov	r24, r28
     86e:	82 95       	swap	r24
     870:	80 7f       	andi	r24, 0xF0	; 240
     872:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_write_4>
}
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	00 d0       	rcall	.+0      	; 0x884 <lcd_write_string_4d+0xa>
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     88a:	1a 82       	std	Y+2, r1	; 0x02
     88c:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     88e:	e9 81       	ldd	r30, Y+1	; 0x01
     890:	fa 81       	ldd	r31, Y+2	; 0x02
     892:	e8 0f       	add	r30, r24
     894:	f9 1f       	adc	r31, r25
     896:	80 81       	ld	r24, Z
     898:	88 23       	and	r24, r24
     89a:	b9 f0       	breq	.+46     	; 0x8ca <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     89c:	e9 81       	ldd	r30, Y+1	; 0x01
     89e:	fa 81       	ldd	r31, Y+2	; 0x02
     8a0:	e0 0f       	add	r30, r16
     8a2:	f1 1f       	adc	r31, r17
     8a4:	80 81       	ld	r24, Z
     8a6:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
        i++;
     8aa:	29 81       	ldd	r18, Y+1	; 0x01
     8ac:	3a 81       	ldd	r19, Y+2	; 0x02
     8ae:	2f 5f       	subi	r18, 0xFF	; 255
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	3a 83       	std	Y+2, r19	; 0x02
     8b4:	29 83       	std	Y+1, r18	; 0x01
     8b6:	84 e1       	ldi	r24, 0x14	; 20
     8b8:	8a 95       	dec	r24
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <lcd_write_string_4d+0x3e>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     8bc:	e9 81       	ldd	r30, Y+1	; 0x01
     8be:	fa 81       	ldd	r31, Y+2	; 0x02
     8c0:	e0 0f       	add	r30, r16
     8c2:	f1 1f       	adc	r31, r17
     8c4:	80 81       	ld	r24, Z
     8c6:	81 11       	cpse	r24, r1
     8c8:	e9 cf       	rjmp	.-46     	; 0x89c <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(DELAY_INST);                              // 40 uS delay (min)
    }
}
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     8d8:	cf 93       	push	r28
     8da:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     8dc:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     8de:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     8e0:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     8e4:	8c 2f       	mov	r24, r28
     8e6:	82 95       	swap	r24
     8e8:	80 7f       	andi	r24, 0xF0	; 240
     8ea:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_write_4>
}
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	8f e0       	ldi	r24, 0x0F	; 15
     8f4:	97 e2       	ldi	r25, 0x27	; 39
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <lcd_init_4d+0x4>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <lcd_init_4d+0xa>
     8fc:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     8fe:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     900:	5b 98       	cbi	0x0b, 3	; 11

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     902:	80 e3       	ldi	r24, 0x30	; 48
     904:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_write_4>
     908:	81 ee       	ldi	r24, 0xE1	; 225
     90a:	94 e0       	ldi	r25, 0x04	; 4
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xd>
     910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0x13>
     912:	00 00       	nop
    //_delay_ms(10);                                  // 4.1 mS delay (min)
	_delay_ms(5); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     914:	80 e3       	ldi	r24, 0x30	; 48
     916:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_write_4>
     91a:	8f e2       	ldi	r24, 0x2F	; 47
     91c:	95 e7       	ldi	r25, 0x75	; 117
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <__stack+0x1f>
     922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0x25>
     924:	00 00       	nop
    //_delay_us(200);                                 // 100uS delay (min)
	_delay_ms(120); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     926:	80 e3       	ldi	r24, 0x30	; 48
     928:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_write_4>
     92c:	83 ec       	ldi	r24, 0xC3	; 195
     92e:	99 e0       	ldi	r25, 0x09	; 9
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <__stack+0x31>
     934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0x37>
     936:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     938:	88 e2       	ldi	r24, 0x28	; 40
     93a:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93e:	94 e1       	ldi	r25, 0x14	; 20
     940:	9a 95       	dec	r25
     942:	f1 f7       	brne	.-4      	; 0x940 <__stack+0x41>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     944:	88 e2       	ldi	r24, 0x28	; 40
     946:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     94a:	84 e1       	ldi	r24, 0x14	; 20
     94c:	8a 95       	dec	r24
     94e:	f1 f7       	brne	.-4      	; 0x94c <__stack+0x4d>
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     950:	88 e0       	ldi	r24, 0x08	; 8
     952:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     956:	94 e1       	ldi	r25, 0x14	; 20
     958:	9a 95       	dec	r25
     95a:	f1 f7       	brne	.-4      	; 0x958 <__stack+0x59>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     962:	87 ee       	ldi	r24, 0xE7	; 231
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <__stack+0x67>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <__stack+0x6d>
     96c:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	94 e1       	ldi	r25, 0x14	; 20
     976:	9a 95       	dec	r25
     978:	f1 f7       	brne	.-4      	; 0x976 <__stack+0x77>

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     97a:	8c e0       	ldi	r24, 0x0C	; 12
     97c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     980:	84 e1       	ldi	r24, 0x14	; 20
     982:	8a 95       	dec	r24
     984:	f1 f7       	brne	.-4      	; 0x982 <__stack+0x83>
     986:	08 95       	ret

00000988 <LCD_BCDDigits>:
	_delay_ms(1000);

	lcd_write_instruction_4d(lcd_DisplayOff);
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	_delay_ms(1000);
	lcd_write_instruction_4d(lcd_DisplayOn);
     988:	cf 93       	push	r28
     98a:	c8 2f       	mov	r28, r24
     98c:	82 95       	swap	r24
     98e:	8f 70       	andi	r24, 0x0F	; 15
     990:	80 5d       	subi	r24, 0xD0	; 208
     992:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
     996:	8c 2f       	mov	r24, r28
     998:	8f 70       	andi	r24, 0x0F	; 15
     99a:	80 5d       	subi	r24, 0xD0	; 208
     99c:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <turnOnLCDBacklight>:
     9a4:	28 98       	cbi	0x05, 0	; 5
     9a6:	08 95       	ret

000009a8 <LCD_blankChar>:
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	88 23       	and	r24, r24
     9ae:	41 f0       	breq	.+16     	; 0x9c0 <LCD_blankChar+0x18>
     9b0:	d8 2f       	mov	r29, r24
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
     9b4:	80 e2       	ldi	r24, 0x20	; 32
     9b6:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
     9ba:	cf 5f       	subi	r28, 0xFF	; 255
     9bc:	cd 13       	cpse	r28, r29
     9be:	fa cf       	rjmp	.-12     	; 0x9b4 <LCD_blankChar+0xc>
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <turnOffLCDBacklight>:
     9c6:	28 9a       	sbi	0x05, 0	; 5
     9c8:	08 95       	ret

000009ca <lcd_dispRealClock>:
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	6c 97       	sbiw	r28, 0x1c	; 28
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	80 e8       	ldi	r24, 0x80	; 128
     9e0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     9e4:	84 e1       	ldi	r24, 0x14	; 20
     9e6:	8a 95       	dec	r24
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <lcd_dispRealClock+0x1c>
     9ea:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     9ee:	4a e0       	ldi	r20, 0x0A	; 10
     9f0:	be 01       	movw	r22, r28
     9f2:	69 5f       	subi	r22, 0xF9	; 249
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	08 2e       	mov	r0, r24
     9f8:	00 0c       	add	r0, r0
     9fa:	99 0b       	sbc	r25, r25
     9fc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     a00:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <min>
     a04:	4a e0       	ldi	r20, 0x0A	; 10
     a06:	be 01       	movw	r22, r28
     a08:	6c 5f       	subi	r22, 0xFC	; 252
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	08 2e       	mov	r0, r24
     a0e:	00 0c       	add	r0, r0
     a10:	99 0b       	sbc	r25, r25
     a12:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     a16:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     a1a:	4a e0       	ldi	r20, 0x0A	; 10
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	08 2e       	mov	r0, r24
     a24:	00 0c       	add	r0, r0
     a26:	99 0b       	sbc	r25, r25
     a28:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     a2c:	ce 01       	movw	r24, r28
     a2e:	07 96       	adiw	r24, 0x07	; 7
     a30:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	94 e0       	ldi	r25, 0x04	; 4
     a38:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     a3c:	ce 01       	movw	r24, r28
     a3e:	04 96       	adiw	r24, 0x04	; 4
     a40:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     a44:	88 e0       	ldi	r24, 0x08	; 8
     a46:	94 e0       	ldi	r25, 0x04	; 4
     a48:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     a4c:	ce 01       	movw	r24, r28
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     a54:	86 ef       	ldi	r24, 0xF6	; 246
     a56:	93 e0       	ldi	r25, 0x03	; 3
     a58:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     a5c:	84 e1       	ldi	r24, 0x14	; 20
     a5e:	8a 95       	dec	r24
     a60:	f1 f7       	brne	.-4      	; 0xa5e <lcd_dispRealClock+0x94>
     a62:	80 ec       	ldi	r24, 0xC0	; 192
     a64:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     a68:	84 e1       	ldi	r24, 0x14	; 20
     a6a:	8a 95       	dec	r24
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_dispRealClock+0xa0>
     a6e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <year>
     a72:	4a e0       	ldi	r20, 0x0A	; 10
     a74:	be 01       	movw	r22, r28
     a76:	66 5f       	subi	r22, 0xF6	; 246
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	08 2e       	mov	r0, r24
     a7c:	00 0c       	add	r0, r0
     a7e:	99 0b       	sbc	r25, r25
     a80:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     a84:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <month>
     a88:	4a e0       	ldi	r20, 0x0A	; 10
     a8a:	be 01       	movw	r22, r28
     a8c:	63 5f       	subi	r22, 0xF3	; 243
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	08 2e       	mov	r0, r24
     a92:	00 0c       	add	r0, r0
     a94:	99 0b       	sbc	r25, r25
     a96:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     a9a:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <date>
     a9e:	4a e0       	ldi	r20, 0x0A	; 10
     aa0:	be 01       	movw	r22, r28
     aa2:	60 5f       	subi	r22, 0xF0	; 240
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	08 2e       	mov	r0, r24
     aa8:	00 0c       	add	r0, r0
     aaa:	99 0b       	sbc	r25, r25
     aac:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     ab0:	ce 01       	movw	r24, r28
     ab2:	0a 96       	adiw	r24, 0x0a	; 10
     ab4:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	94 e0       	ldi	r25, 0x04	; 4
     abc:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     ac0:	ce 01       	movw	r24, r28
     ac2:	0d 96       	adiw	r24, 0x0d	; 13
     ac4:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     ad0:	ce 01       	movw	r24, r28
     ad2:	40 96       	adiw	r24, 0x10	; 16
     ad4:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	94 e0       	ldi	r25, 0x04	; 4
     adc:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     ae0:	e0 91 6f 04 	lds	r30, 0x046F	; 0x80046f <day>
     ae4:	8e 2f       	mov	r24, r30
     ae6:	ee 0f       	add	r30, r30
     ae8:	99 0b       	sbc	r25, r25
     aea:	aa 0b       	sbc	r26, r26
     aec:	bb 0b       	sbc	r27, r27
     aee:	87 30       	cpi	r24, 0x07	; 7
     af0:	91 05       	cpc	r25, r1
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <lcd_dispRealClock+0x12c>
     af4:	43 c0       	rjmp	.+134    	; 0xb7c <lcd_dispRealClock+0x1b2>
     af6:	fc 01       	movw	r30, r24
     af8:	e0 5c       	subi	r30, 0xC0	; 192
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__tablejump2__>
     b00:	83 e5       	ldi	r24, 0x53	; 83
     b02:	95 e7       	ldi	r25, 0x75	; 117
     b04:	ae e6       	ldi	r26, 0x6E	; 110
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	8b 8b       	std	Y+19, r24	; 0x13
     b0a:	9c 8b       	std	Y+20, r25	; 0x14
     b0c:	ad 8b       	std	Y+21, r26	; 0x15
     b0e:	be 8b       	std	Y+22, r27	; 0x16
     b10:	35 c0       	rjmp	.+106    	; 0xb7c <lcd_dispRealClock+0x1b2>
     b12:	8d e4       	ldi	r24, 0x4D	; 77
     b14:	9f e6       	ldi	r25, 0x6F	; 111
     b16:	ae e6       	ldi	r26, 0x6E	; 110
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	8b 8b       	std	Y+19, r24	; 0x13
     b1c:	9c 8b       	std	Y+20, r25	; 0x14
     b1e:	ad 8b       	std	Y+21, r26	; 0x15
     b20:	be 8b       	std	Y+22, r27	; 0x16
     b22:	2c c0       	rjmp	.+88     	; 0xb7c <lcd_dispRealClock+0x1b2>
     b24:	84 e5       	ldi	r24, 0x54	; 84
     b26:	95 e7       	ldi	r25, 0x75	; 117
     b28:	a5 e6       	ldi	r26, 0x65	; 101
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	8b 8b       	std	Y+19, r24	; 0x13
     b2e:	9c 8b       	std	Y+20, r25	; 0x14
     b30:	ad 8b       	std	Y+21, r26	; 0x15
     b32:	be 8b       	std	Y+22, r27	; 0x16
     b34:	23 c0       	rjmp	.+70     	; 0xb7c <lcd_dispRealClock+0x1b2>
     b36:	87 e5       	ldi	r24, 0x57	; 87
     b38:	95 e6       	ldi	r25, 0x65	; 101
     b3a:	a4 e6       	ldi	r26, 0x64	; 100
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	8b 8b       	std	Y+19, r24	; 0x13
     b40:	9c 8b       	std	Y+20, r25	; 0x14
     b42:	ad 8b       	std	Y+21, r26	; 0x15
     b44:	be 8b       	std	Y+22, r27	; 0x16
     b46:	1a c0       	rjmp	.+52     	; 0xb7c <lcd_dispRealClock+0x1b2>
     b48:	84 e5       	ldi	r24, 0x54	; 84
     b4a:	98 e6       	ldi	r25, 0x68	; 104
     b4c:	a5 e7       	ldi	r26, 0x75	; 117
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	8b 8b       	std	Y+19, r24	; 0x13
     b52:	9c 8b       	std	Y+20, r25	; 0x14
     b54:	ad 8b       	std	Y+21, r26	; 0x15
     b56:	be 8b       	std	Y+22, r27	; 0x16
     b58:	11 c0       	rjmp	.+34     	; 0xb7c <lcd_dispRealClock+0x1b2>
     b5a:	86 e4       	ldi	r24, 0x46	; 70
     b5c:	92 e7       	ldi	r25, 0x72	; 114
     b5e:	a9 e6       	ldi	r26, 0x69	; 105
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	8b 8b       	std	Y+19, r24	; 0x13
     b64:	9c 8b       	std	Y+20, r25	; 0x14
     b66:	ad 8b       	std	Y+21, r26	; 0x15
     b68:	be 8b       	std	Y+22, r27	; 0x16
     b6a:	08 c0       	rjmp	.+16     	; 0xb7c <lcd_dispRealClock+0x1b2>
     b6c:	83 e5       	ldi	r24, 0x53	; 83
     b6e:	91 e6       	ldi	r25, 0x61	; 97
     b70:	a4 e7       	ldi	r26, 0x74	; 116
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	8b 8b       	std	Y+19, r24	; 0x13
     b76:	9c 8b       	std	Y+20, r25	; 0x14
     b78:	ad 8b       	std	Y+21, r26	; 0x15
     b7a:	be 8b       	std	Y+22, r27	; 0x16
     b7c:	ce 01       	movw	r24, r28
     b7e:	43 96       	adiw	r24, 0x13	; 19
     b80:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     b84:	8c ef       	ldi	r24, 0xFC	; 252
     b86:	93 e0       	ldi	r25, 0x03	; 3
     b88:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     b8c:	84 e1       	ldi	r24, 0x14	; 20
     b8e:	8a 95       	dec	r24
     b90:	f1 f7       	brne	.-4      	; 0xb8e <lcd_dispRealClock+0x1c4>
     b92:	6c 96       	adiw	r28, 0x1c	; 28
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <lcd_dispAccumulatedTime>:
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	29 97       	sbiw	r28, 0x09	; 9
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	80 ec       	ldi	r24, 0xC0	; 192
     bba:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     bbe:	84 e1       	ldi	r24, 0x14	; 20
     bc0:	8a 95       	dec	r24
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <lcd_dispAccumulatedTime+0x1c>
     bc4:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <accumulatedHour>
     bc8:	4a e0       	ldi	r20, 0x0A	; 10
     bca:	be 01       	movw	r22, r28
     bcc:	69 5f       	subi	r22, 0xF9	; 249
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	08 2e       	mov	r0, r24
     bd2:	00 0c       	add	r0, r0
     bd4:	99 0b       	sbc	r25, r25
     bd6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     bda:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <accumulatedMin>
     bde:	4a e0       	ldi	r20, 0x0A	; 10
     be0:	be 01       	movw	r22, r28
     be2:	6c 5f       	subi	r22, 0xFC	; 252
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	08 2e       	mov	r0, r24
     be8:	00 0c       	add	r0, r0
     bea:	99 0b       	sbc	r25, r25
     bec:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     bf0:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <accumulatedSec>
     bf4:	4a e0       	ldi	r20, 0x0A	; 10
     bf6:	be 01       	movw	r22, r28
     bf8:	6f 5f       	subi	r22, 0xFF	; 255
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	08 2e       	mov	r0, r24
     bfe:	00 0c       	add	r0, r0
     c00:	99 0b       	sbc	r25, r25
     c02:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__itoa_ncheck>
     c06:	ce 01       	movw	r24, r28
     c08:	07 96       	adiw	r24, 0x07	; 7
     c0a:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	94 e0       	ldi	r25, 0x04	; 4
     c12:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c16:	ce 01       	movw	r24, r28
     c18:	04 96       	adiw	r24, 0x04	; 4
     c1a:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c1e:	88 e0       	ldi	r24, 0x08	; 8
     c20:	94 e0       	ldi	r25, 0x04	; 4
     c22:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c26:	ce 01       	movw	r24, r28
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c2e:	8a ef       	ldi	r24, 0xFA	; 250
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c36:	84 e1       	ldi	r24, 0x14	; 20
     c38:	8a 95       	dec	r24
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <lcd_dispAccumulatedTime+0x94>
     c3c:	29 96       	adiw	r28, 0x09	; 9
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <lcd_dispProgInfo>:
     c4e:	80 e8       	ldi	r24, 0x80	; 128
     c50:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     c54:	24 e1       	ldi	r18, 0x14	; 20
     c56:	2a 95       	dec	r18
     c58:	f1 f7       	brne	.-4      	; 0xc56 <lcd_dispProgInfo+0x8>
     c5a:	8f e3       	ldi	r24, 0x3F	; 63
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c62:	80 ec       	ldi	r24, 0xC0	; 192
     c64:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     c68:	84 e1       	ldi	r24, 0x14	; 20
     c6a:	8a 95       	dec	r24
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <lcd_dispProgInfo+0x1c>
     c6e:	80 e3       	ldi	r24, 0x30	; 48
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c76:	9f e3       	ldi	r25, 0x3F	; 63
     c78:	2d e0       	ldi	r18, 0x0D	; 13
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	20 40       	sbci	r18, 0x00	; 0
     c80:	80 40       	sbci	r24, 0x00	; 0
     c82:	e1 f7       	brne	.-8      	; 0xc7c <lcd_dispProgInfo+0x2e>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <lcd_dispProgInfo+0x38>
     c86:	00 00       	nop
     c88:	80 ec       	ldi	r24, 0xC0	; 192
     c8a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     c8e:	94 e1       	ldi	r25, 0x14	; 20
     c90:	9a 95       	dec	r25
     c92:	f1 f7       	brne	.-4      	; 0xc90 <lcd_dispProgInfo+0x42>
     c94:	81 e2       	ldi	r24, 0x21	; 33
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     c9c:	2f e7       	ldi	r18, 0x7F	; 127
     c9e:	8a e1       	ldi	r24, 0x1A	; 26
     ca0:	96 e0       	ldi	r25, 0x06	; 6
     ca2:	21 50       	subi	r18, 0x01	; 1
     ca4:	80 40       	sbci	r24, 0x00	; 0
     ca6:	90 40       	sbci	r25, 0x00	; 0
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <lcd_dispProgInfo+0x54>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <lcd_dispProgInfo+0x5e>
     cac:	00 00       	nop
     cae:	08 95       	ret

00000cb0 <lcd_dispMenu>:
     cb0:	80 e8       	ldi	r24, 0x80	; 128
     cb2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     cb6:	24 e1       	ldi	r18, 0x14	; 20
     cb8:	2a 95       	dec	r18
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <lcd_dispMenu+0x8>
     cbc:	80 e1       	ldi	r24, 0x10	; 16
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     cc4:	80 ec       	ldi	r24, 0xC0	; 192
     cc6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     cca:	84 e1       	ldi	r24, 0x14	; 20
     ccc:	8a 95       	dec	r24
     cce:	f1 f7       	brne	.-4      	; 0xccc <lcd_dispMenu+0x1c>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     cd8:	9f eb       	ldi	r25, 0xBF	; 191
     cda:	27 e2       	ldi	r18, 0x27	; 39
     cdc:	89 e0       	ldi	r24, 0x09	; 9
     cde:	91 50       	subi	r25, 0x01	; 1
     ce0:	20 40       	sbci	r18, 0x00	; 0
     ce2:	80 40       	sbci	r24, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <lcd_dispMenu+0x2e>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <lcd_dispMenu+0x38>
     ce8:	00 00       	nop
     cea:	08 95       	ret

00000cec <lcd_dispWords>:
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	e8 2e       	mov	r14, r24
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     d00:	24 e1       	ldi	r18, 0x14	; 20
     d02:	2a 95       	dec	r18
     d04:	f1 f7       	brne	.-4      	; 0xd02 <lcd_dispWords+0x16>
     d06:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <min>
     d0a:	93 78       	andi	r25, 0x83	; 131
     d0c:	1c f4       	brge	.+6      	; 0xd14 <lcd_dispWords+0x28>
     d0e:	91 50       	subi	r25, 0x01	; 1
     d10:	9c 6f       	ori	r25, 0xFC	; 252
     d12:	9f 5f       	subi	r25, 0xFF	; 255
     d14:	99 23       	and	r25, r25
     d16:	ec f0       	brlt	.+58     	; 0xd52 <lcd_dispWords+0x66>
     d18:	92 30       	cpi	r25, 0x02	; 2
     d1a:	1c f0       	brlt	.+6      	; 0xd22 <lcd_dispWords+0x36>
     d1c:	94 30       	cpi	r25, 0x04	; 4
     d1e:	6c f0       	brlt	.+26     	; 0xd3a <lcd_dispWords+0x4e>
     d20:	18 c0       	rjmp	.+48     	; 0xd52 <lcd_dispWords+0x66>
     d22:	30 e2       	ldi	r19, 0x20	; 32
     d24:	e3 9e       	mul	r14, r19
     d26:	c0 01       	movw	r24, r0
     d28:	11 24       	eor	r1, r1
     d2a:	ec 01       	movw	r28, r24
     d2c:	c2 57       	subi	r28, 0x72	; 114
     d2e:	dd 4f       	sbci	r29, 0xFD	; 253
     d30:	9c 01       	movw	r18, r24
     d32:	22 56       	subi	r18, 0x62	; 98
     d34:	3d 4f       	sbci	r19, 0xFD	; 253
     d36:	79 01       	movw	r14, r18
     d38:	10 c0       	rjmp	.+32     	; 0xd5a <lcd_dispWords+0x6e>
     d3a:	30 e2       	ldi	r19, 0x20	; 32
     d3c:	e3 9e       	mul	r14, r19
     d3e:	c0 01       	movw	r24, r0
     d40:	11 24       	eor	r1, r1
     d42:	ec 01       	movw	r28, r24
     d44:	c2 5b       	subi	r28, 0xB2	; 178
     d46:	de 4f       	sbci	r29, 0xFE	; 254
     d48:	9c 01       	movw	r18, r24
     d4a:	22 5a       	subi	r18, 0xA2	; 162
     d4c:	3e 4f       	sbci	r19, 0xFE	; 254
     d4e:	79 01       	movw	r14, r18
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <lcd_dispWords+0x6e>
     d52:	e1 2c       	mov	r14, r1
     d54:	f1 2c       	mov	r15, r1
     d56:	c0 e0       	ldi	r28, 0x00	; 0
     d58:	d0 e0       	ldi	r29, 0x00	; 0
     d5a:	ce 01       	movw	r24, r28
     d5c:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     d60:	fe 01       	movw	r30, r28
     d62:	01 90       	ld	r0, Z+
     d64:	00 20       	and	r0, r0
     d66:	e9 f7       	brne	.-6      	; 0xd62 <lcd_dispWords+0x76>
     d68:	31 97       	sbiw	r30, 0x01	; 1
     d6a:	ec 1b       	sub	r30, r28
     d6c:	fd 0b       	sbc	r31, r29
     d6e:	00 e1       	ldi	r16, 0x10	; 16
     d70:	10 e0       	ldi	r17, 0x00	; 0
     d72:	0e 1b       	sub	r16, r30
     d74:	11 09       	sbc	r17, r1
     d76:	10 16       	cp	r1, r16
     d78:	11 06       	cpc	r1, r17
     d7a:	54 f4       	brge	.+20     	; 0xd90 <lcd_dispWords+0xa4>
     d7c:	c0 e0       	ldi	r28, 0x00	; 0
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
     d84:	cf 5f       	subi	r28, 0xFF	; 255
     d86:	2c 2f       	mov	r18, r28
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	20 17       	cp	r18, r16
     d8c:	31 07       	cpc	r19, r17
     d8e:	bc f3       	brlt	.-18     	; 0xd7e <lcd_dispWords+0x92>
     d90:	80 ec       	ldi	r24, 0xC0	; 192
     d92:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     d96:	34 e1       	ldi	r19, 0x14	; 20
     d98:	3a 95       	dec	r19
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <lcd_dispWords+0xac>
     d9c:	c7 01       	movw	r24, r14
     d9e:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
     da2:	f7 01       	movw	r30, r14
     da4:	01 90       	ld	r0, Z+
     da6:	00 20       	and	r0, r0
     da8:	e9 f7       	brne	.-6      	; 0xda4 <lcd_dispWords+0xb8>
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	ee 19       	sub	r30, r14
     dae:	ff 09       	sbc	r31, r15
     db0:	00 e1       	ldi	r16, 0x10	; 16
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	0e 1b       	sub	r16, r30
     db6:	11 09       	sbc	r17, r1
     db8:	10 16       	cp	r1, r16
     dba:	11 06       	cpc	r1, r17
     dbc:	54 f4       	brge	.+20     	; 0xdd2 <lcd_dispWords+0xe6>
     dbe:	c0 e0       	ldi	r28, 0x00	; 0
     dc0:	80 e2       	ldi	r24, 0x20	; 32
     dc2:	0e 94 30 04 	call	0x860	; 0x860 <lcd_write_character_4d>
     dc6:	cf 5f       	subi	r28, 0xFF	; 255
     dc8:	8c 2f       	mov	r24, r28
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	80 17       	cp	r24, r16
     dce:	91 07       	cpc	r25, r17
     dd0:	bc f3       	brlt	.-18     	; 0xdc0 <lcd_dispWords+0xd4>
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	08 95       	ret

00000de0 <LCD_dispNotice>:
}//lcd_testString

//-----------------------------------
void LCD_dispNotice()
{
	makePDasOutput();
     de0:	0e 94 30 07 	call	0xe60	; 0xe60 <makePDasOutput>

	lcd_init_4d();
     de4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_init_4d>
     de8:	89 ef       	ldi	r24, 0xF9	; 249
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <LCD_dispNotice+0xc>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <LCD_dispNotice+0x12>
     df2:	00 00       	nop
	_delay_us(1000);                                  // 40 uS delay (min)

	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     df4:	80 e8       	ldi	r24, 0x80	; 128
     df6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     dfa:	94 e1       	ldi	r25, 0x14	; 20
     dfc:	9a 95       	dec	r25
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <LCD_dispNotice+0x1c>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	lcd_write_string_4d((uint8_t *)"Ready to run!");
     e00:	84 e1       	ldi	r24, 0x14	; 20
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     e08:	80 ec       	ldi	r24, 0xC0	; 192
     e0a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <lcd_write_instruction_4d>
     e0e:	24 e1       	ldi	r18, 0x14	; 20
     e10:	2a 95       	dec	r18
     e12:	f1 f7       	brne	.-4      	; 0xe10 <LCD_dispNotice+0x30>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	lcd_write_string_4d((uint8_t *)"Now,sleep.Bye.");
     e14:	82 e2       	ldi	r24, 0x22	; 34
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_write_string_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e1c:	8f eb       	ldi	r24, 0xBF	; 191
     e1e:	97 e2       	ldi	r25, 0x27	; 39
     e20:	29 e0       	ldi	r18, 0x09	; 9
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	20 40       	sbci	r18, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <LCD_dispNotice+0x42>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <LCD_dispNotice+0x4c>
     e2c:	00 00       	nop
	_delay_ms(3000);
	
	makePDasInput();
     e2e:	0e 94 4b 07 	call	0xe96	; 0xe96 <makePDasInput>
     e32:	08 95       	ret

00000e34 <main>:
//------------------------------------
int main()
{
	// configure MCU IO pins
	// implemented at "config.c"
    config();
     e34:	0e 94 7e 00 	call	0xfc	; 0xfc <config>
 
	// setup ISR
	// implemented at "intrpt.c"
    initINT();
     e38:	0e 94 3b 03 	call	0x676	; 0x676 <initINT>

	I2C_Init();
     e3c:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Init>
    parseCompileTime();
     e40:	0e 94 71 07 	call	0xee2	; 0xee2 <parseCompileTime>
	
	//After call LCD_dispNotice(), sleep current remain rather high 680 uA
	//	otherwise, 230 uA
	//As of July 15, 2017, this function does not cause any further current draw than 0.2uA
	LCD_dispNotice(); 
     e44:	0e 94 f0 06 	call	0xde0	; 0xde0 <LCD_dispNotice>

    //lcd_dispRealClock();
	//lcd_dispProgInfo(); //LCD display program info
    // Use the Power Down sleep mode
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     e48:	83 b7       	in	r24, 0x33	; 51
     e4a:	81 7f       	andi	r24, 0xF1	; 241
     e4c:	84 60       	ori	r24, 0x04	; 4
     e4e:	83 bf       	out	0x33, r24	; 51

    // endless loop
    while(1)
    {
      // go to sleep and wait for interrupt...
      sleep_mode();
     e50:	83 b7       	in	r24, 0x33	; 51
     e52:	81 60       	ori	r24, 0x01	; 1
     e54:	83 bf       	out	0x33, r24	; 51
     e56:	88 95       	sleep
     e58:	83 b7       	in	r24, 0x33	; 51
     e5a:	8e 7f       	andi	r24, 0xFE	; 254
     e5c:	83 bf       	out	0x33, r24	; 51
	  
	}
     e5e:	f8 cf       	rjmp	.-16     	; 0xe50 <main+0x1c>

00000e60 <makePDasOutput>:
//by calling makePDasInput(). (added by Insoo: Jul 12, 2017)
void makePDasOutput()
{
	// configure the microprocessor pins for the data lines
	// 4 data lines - output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
     e60:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
     e62:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
     e64:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
     e66:	54 9a       	sbi	0x0a, 4	; 10

	// LCD backlight cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
     e68:	20 9a       	sbi	0x04, 0	; 4

	// LCD VSS pin (Power Supply) - Output
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
     e6a:	26 9a       	sbi	0x04, 6	; 4
	//turn on LCD power
	lcd_VDD_port |= _BV(lcd_VDD_bit);
     e6c:	2e 9a       	sbi	0x05, 6	; 5
     e6e:	83 ec       	ldi	r24, 0xC3	; 195
     e70:	99 e0       	ldi	r25, 0x09	; 9
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <makePDasOutput+0x12>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <makePDasOutput+0x18>
     e78:	00 00       	nop
	_delay_ms(10);

	// DS1307 Vcc pin (Power Supply) - output
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
     e7a:	27 9a       	sbi	0x04, 7	; 4
	//turn on DS1307 power
	DS1307_VCC_port |= _BV(DS1307_VCC_bit);
     e7c:	2f 9a       	sbi	0x05, 7	; 5
     e7e:	83 ec       	ldi	r24, 0xC3	; 195
     e80:	99 e0       	ldi	r25, 0x09	; 9
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <makePDasOutput+0x22>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <makePDasOutput+0x28>
     e88:	00 00       	nop
	_delay_ms(10);

	// DHT11 (temp & humid sensor) VCC pin (Power Supply) - Output
	//added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
     e8a:	22 98       	cbi	0x04, 2	; 4
	//turn on DHT11 chip power
	DHT_VCC_port |= _BV(DHT_VCC_bit);
     e8c:	2a 9a       	sbi	0x05, 2	; 5
	//Tactile switch - Input
	//tactile_Switch_ddr |= _BV(tactile_Switch_bit);

	// configure the microprocessor pins for the control lines
	// E line - output
	lcd_E_ddr |= _BV(lcd_E_bit);
     e8e:	53 9a       	sbi	0x0a, 3	; 10
	// RS line - output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
     e90:	52 9a       	sbi	0x0a, 2	; 10
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
     e92:	5a 98       	cbi	0x0b, 2	; 11
     e94:	08 95       	ret

00000e96 <makePDasInput>:
void makePDasInput()
{

	// turn off four data lines
	// following four lines added by Insoo on Jul 15, 2017
	lcd_D7_port &= ~_BV(lcd_D7_bit);
     e96:	5f 98       	cbi	0x0b, 7	; 11
	lcd_D6_port &= ~_BV(lcd_D6_bit);
     e98:	5e 98       	cbi	0x0b, 6	; 11
	lcd_D5_port &= ~_BV(lcd_D5_bit);
     e9a:	5d 98       	cbi	0x0b, 5	; 11
	lcd_D4_port &= ~_BV(lcd_D4_bit);
     e9c:	5c 98       	cbi	0x0b, 4	; 11

	// configure the microprocessor pins for the data lines
	// 4 data lines - output, but make it input
	lcd_D7_ddr &= ~_BV(lcd_D7_bit);
     e9e:	57 98       	cbi	0x0a, 7	; 10
	lcd_D6_ddr &= ~_BV(lcd_D6_bit);
     ea0:	56 98       	cbi	0x0a, 6	; 10
	lcd_D5_ddr &= ~_BV(lcd_D5_bit);
     ea2:	55 98       	cbi	0x0a, 5	; 10
	lcd_D4_ddr &= ~_BV(lcd_D4_bit);
     ea4:	54 98       	cbi	0x0a, 4	; 10

	// turn off backlight cathode(GND)
	// following one line added by Insoo on Jul 15, 2017
	lcd_Backlight_port = _BV(lcd_Backlight_bit);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	85 b9       	out	0x05, r24	; 5
	// LCD backlight cathode pin (K) - output, but make it input
	lcd_Backlight_ddr &= ~_BV(lcd_Backlight_bit);
     eaa:	20 98       	cbi	0x04, 0	; 4

	// turn off DS1307
	DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
     eac:	2f 98       	cbi	0x05, 7	; 5
	// then, DS1307 Vcc pin (Power Supply) - output, but make it input
	DS1307_VCC_ddr &= ~_BV(DS1307_VCC_bit);
     eae:	27 98       	cbi	0x04, 7	; 4

	// DHT11 (temp & humid sensor) signal pin - Output/Input
	//turn off and
	DHT_SIG_port &= ~_BV(DHT_SIG_bit);
     eb0:	29 98       	cbi	0x05, 1	; 5
	//make it input
	DHT_SIG_ddr &= ~_BV(DHT_SIG_bit);
     eb2:	21 98       	cbi	0x04, 1	; 4
	DHT_SIG_port &= ~_BV(DHT_SIG_bit);
     eb4:	29 98       	cbi	0x05, 1	; 5

	//turn off DHT11 chip power
	DHT_VCC_port &= ~_BV(DHT_VCC_bit);
     eb6:	2a 98       	cbi	0x05, 2	; 5
	//make DHT_VCC as input, added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
     eb8:	22 98       	cbi	0x04, 2	; 4
	//Tactile switch - Input
	//tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);

	// turn off Enable pin
	// following one line added by Insoo on Jul 15, 2017
	lcd_E_port &= ~_BV(lcd_E_bit);
     eba:	5b 98       	cbi	0x0b, 3	; 11
	// configure the microprocessor pins for the control lines
	// E line - output, but make it input
	lcd_E_ddr &= ~_BV(lcd_E_bit);
     ebc:	53 98       	cbi	0x0a, 3	; 10
	 
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
     ebe:	5a 98       	cbi	0x0b, 2	; 11
	// RS line - output, but make it input
	lcd_RS_ddr &= ~_BV(lcd_RS_bit);
     ec0:	52 98       	cbi	0x0a, 2	; 10

	// turn off LCD power
	lcd_VDD_port &= ~_BV(lcd_VDD_bit);
     ec2:	2e 98       	cbi	0x05, 6	; 5
	// then, LCD VSS pin (Power Supply) - output, but make it input
	lcd_VDD_ddr &= ~_BV(lcd_VDD_bit);
     ec4:	26 98       	cbi	0x04, 6	; 4
     ec6:	08 95       	ret

00000ec8 <calcDay>:
    calcDay();
}//parseCompileTime

void calcDay()
{
    day = (date - 17)%7;
     ec8:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <date>
     ecc:	08 2e       	mov	r0, r24
     ece:	00 0c       	add	r0, r0
     ed0:	99 0b       	sbc	r25, r25
     ed2:	41 97       	sbiw	r24, 0x11	; 17
     ed4:	67 e0       	ldi	r22, 0x07	; 7
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	0e 94 05 0a 	call	0x140a	; 0x140a <__divmodhi4>
     edc:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <day>
     ee0:	08 95       	ret

00000ee2 <parseCompileTime>:
extern uint8_t year, month, date;
extern uint8_t monthEndDate, day;
*/

void parseCompileTime()
{
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	e4 97       	sbiw	r28, 0x34	; 52
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
    char sTime[4][3];
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
     ef8:	68 e0       	ldi	r22, 0x08	; 8
     efa:	74 e0       	ldi	r23, 0x04	; 4
     efc:	81 e3       	ldi	r24, 0x31	; 49
     efe:	94 e0       	ldi	r25, 0x04	; 4
     f00:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <strtok>
     f04:	bc 01       	movw	r22, r24
    while (*p)
     f06:	fc 01       	movw	r30, r24
     f08:	80 81       	ld	r24, Z
     f0a:	88 23       	and	r24, r24
     f0c:	e9 f0       	breq	.+58     	; 0xf48 <parseCompileTime+0x66>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sTime[n++], p);
     f10:	11 e0       	ldi	r17, 0x01	; 1
     f12:	12 0f       	add	r17, r18
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	c9 01       	movw	r24, r18
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	82 0f       	add	r24, r18
     f1e:	93 1f       	adc	r25, r19
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	2c 0f       	add	r18, r28
     f26:	3d 1f       	adc	r19, r29
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <strcpy>
        p=strtok(NULL, ":");
     f30:	68 e0       	ldi	r22, 0x08	; 8
     f32:	74 e0       	ldi	r23, 0x04	; 4
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <strtok>
     f3c:	bc 01       	movw	r22, r24
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
    {
        strcpy((char *)&sTime[n++], p);
     f3e:	21 2f       	mov	r18, r17
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
     f40:	fc 01       	movw	r30, r24
     f42:	80 81       	ld	r24, Z
     f44:	81 11       	cpse	r24, r1
     f46:	e4 cf       	rjmp	.-56     	; 0xf10 <parseCompileTime+0x2e>
    {
        strcpy((char *)&sTime[n++], p);
        p=strtok(NULL, ":");
    }
    hour=atoi(sTime[0]);
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	0e 94 4e 0a 	call	0x149c	; 0x149c <atoi>
     f50:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <hour>
    min=atoi(sTime[1]);
     f54:	ce 01       	movw	r24, r28
     f56:	04 96       	adiw	r24, 0x04	; 4
     f58:	0e 94 4e 0a 	call	0x149c	; 0x149c <atoi>
     f5c:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <min>
    //give some delay (8 seconds), to compile & upload by human click
    //sec=atoi(sTime[2]) + 8;

    //if you change power source to battery,
    //  you'd better put more time allowance
    sec=atoi(sTime[2]) + 15;
     f60:	ce 01       	movw	r24, r28
     f62:	07 96       	adiw	r24, 0x07	; 7
     f64:	0e 94 4e 0a 	call	0x149c	; 0x149c <atoi>
     f68:	81 5f       	subi	r24, 0xF1	; 241
     f6a:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sec>
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	74 e0       	ldi	r23, 0x04	; 4
     f72:	8a ee       	ldi	r24, 0xEA	; 234
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <strtok>
     f7a:	bc 01       	movw	r22, r24
    while (*p)
     f7c:	fc 01       	movw	r30, r24
     f7e:	80 81       	ld	r24, Z
     f80:	88 23       	and	r24, r24
     f82:	19 f1       	breq	.+70     	; 0xfca <parseCompileTime+0xe8>
     f84:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sDate[n++], p);
     f86:	11 e0       	ldi	r17, 0x01	; 1
     f88:	12 0f       	add	r17, r18
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	c9 01       	movw	r24, r18
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	2d e0       	ldi	r18, 0x0D	; 13
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	2c 0f       	add	r18, r28
     fa8:	3d 1f       	adc	r19, r29
     faa:	82 0f       	add	r24, r18
     fac:	93 1f       	adc	r25, r19
     fae:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <strcpy>
        p=strtok(NULL, " ");
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	74 e0       	ldi	r23, 0x04	; 4
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <strtok>
     fbe:	bc 01       	movw	r22, r24

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    {
        strcpy((char *)&sDate[n++], p);
     fc0:	21 2f       	mov	r18, r17
    sec=atoi(sTime[2]) + 15;
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	81 11       	cpse	r24, r1
     fc8:	de cf       	rjmp	.-68     	; 0xf86 <parseCompileTime+0xa4>
    {
        strcpy((char *)&sDate[n++], p);
        p=strtok(NULL, " ");
    }

    if ( strcmp(sDate[0], "Jan") == 0 )
     fca:	6a e3       	ldi	r22, 0x3A	; 58
     fcc:	74 e0       	ldi	r23, 0x04	; 4
     fce:	ce 01       	movw	r24, r28
     fd0:	0d 96       	adiw	r24, 0x0d	; 13
     fd2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
     fd6:	89 2b       	or	r24, r25
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <parseCompileTime+0x100>
        month = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
     fe0:	83 c0       	rjmp	.+262    	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Feb") == 0 )
     fe2:	6e e3       	ldi	r22, 0x3E	; 62
     fe4:	74 e0       	ldi	r23, 0x04	; 4
     fe6:	ce 01       	movw	r24, r28
     fe8:	0d 96       	adiw	r24, 0x0d	; 13
     fea:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
     fee:	89 2b       	or	r24, r25
     ff0:	21 f4       	brne	.+8      	; 0xffa <parseCompileTime+0x118>
        month = 2;
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
     ff8:	77 c0       	rjmp	.+238    	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Mar") == 0 )
     ffa:	62 e4       	ldi	r22, 0x42	; 66
     ffc:	74 e0       	ldi	r23, 0x04	; 4
     ffe:	ce 01       	movw	r24, r28
    1000:	0d 96       	adiw	r24, 0x0d	; 13
    1002:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    1006:	89 2b       	or	r24, r25
    1008:	21 f4       	brne	.+8      	; 0x1012 <parseCompileTime+0x130>
        month = 3;
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1010:	6b c0       	rjmp	.+214    	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Apr") == 0 )
    1012:	66 e4       	ldi	r22, 0x46	; 70
    1014:	74 e0       	ldi	r23, 0x04	; 4
    1016:	ce 01       	movw	r24, r28
    1018:	0d 96       	adiw	r24, 0x0d	; 13
    101a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    101e:	89 2b       	or	r24, r25
    1020:	21 f4       	brne	.+8      	; 0x102a <parseCompileTime+0x148>
        month = 4;
    1022:	84 e0       	ldi	r24, 0x04	; 4
    1024:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1028:	5f c0       	rjmp	.+190    	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "May") == 0 )
    102a:	6a e4       	ldi	r22, 0x4A	; 74
    102c:	74 e0       	ldi	r23, 0x04	; 4
    102e:	ce 01       	movw	r24, r28
    1030:	0d 96       	adiw	r24, 0x0d	; 13
    1032:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    1036:	89 2b       	or	r24, r25
    1038:	21 f4       	brne	.+8      	; 0x1042 <parseCompileTime+0x160>
        month = 5;
    103a:	85 e0       	ldi	r24, 0x05	; 5
    103c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1040:	53 c0       	rjmp	.+166    	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jun") == 0 )
    1042:	6e e4       	ldi	r22, 0x4E	; 78
    1044:	74 e0       	ldi	r23, 0x04	; 4
    1046:	ce 01       	movw	r24, r28
    1048:	0d 96       	adiw	r24, 0x0d	; 13
    104a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    104e:	89 2b       	or	r24, r25
    1050:	21 f4       	brne	.+8      	; 0x105a <parseCompileTime+0x178>
        month = 6;
    1052:	86 e0       	ldi	r24, 0x06	; 6
    1054:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1058:	47 c0       	rjmp	.+142    	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jul") == 0 )
    105a:	62 e5       	ldi	r22, 0x52	; 82
    105c:	74 e0       	ldi	r23, 0x04	; 4
    105e:	ce 01       	movw	r24, r28
    1060:	0d 96       	adiw	r24, 0x0d	; 13
    1062:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    1066:	89 2b       	or	r24, r25
    1068:	21 f4       	brne	.+8      	; 0x1072 <parseCompileTime+0x190>
        month = 7;
    106a:	87 e0       	ldi	r24, 0x07	; 7
    106c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1070:	3b c0       	rjmp	.+118    	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Aug") == 0 )
    1072:	66 e5       	ldi	r22, 0x56	; 86
    1074:	74 e0       	ldi	r23, 0x04	; 4
    1076:	ce 01       	movw	r24, r28
    1078:	0d 96       	adiw	r24, 0x0d	; 13
    107a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    107e:	89 2b       	or	r24, r25
    1080:	21 f4       	brne	.+8      	; 0x108a <parseCompileTime+0x1a8>
        month = 8;
    1082:	88 e0       	ldi	r24, 0x08	; 8
    1084:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1088:	2f c0       	rjmp	.+94     	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Sep") == 0 )
    108a:	6a e5       	ldi	r22, 0x5A	; 90
    108c:	74 e0       	ldi	r23, 0x04	; 4
    108e:	ce 01       	movw	r24, r28
    1090:	0d 96       	adiw	r24, 0x0d	; 13
    1092:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    1096:	89 2b       	or	r24, r25
    1098:	21 f4       	brne	.+8      	; 0x10a2 <parseCompileTime+0x1c0>
        month = 9;
    109a:	89 e0       	ldi	r24, 0x09	; 9
    109c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    10a0:	23 c0       	rjmp	.+70     	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Oct") == 0 )
    10a2:	6e e5       	ldi	r22, 0x5E	; 94
    10a4:	74 e0       	ldi	r23, 0x04	; 4
    10a6:	ce 01       	movw	r24, r28
    10a8:	0d 96       	adiw	r24, 0x0d	; 13
    10aa:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    10ae:	89 2b       	or	r24, r25
    10b0:	21 f4       	brne	.+8      	; 0x10ba <parseCompileTime+0x1d8>
        month = 10;
    10b2:	8a e0       	ldi	r24, 0x0A	; 10
    10b4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    10b8:	17 c0       	rjmp	.+46     	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Nov") == 0 )
    10ba:	62 e6       	ldi	r22, 0x62	; 98
    10bc:	74 e0       	ldi	r23, 0x04	; 4
    10be:	ce 01       	movw	r24, r28
    10c0:	0d 96       	adiw	r24, 0x0d	; 13
    10c2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    10c6:	89 2b       	or	r24, r25
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <parseCompileTime+0x1f0>
        month = 11;
    10ca:	8b e0       	ldi	r24, 0x0B	; 11
    10cc:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    10d0:	0b c0       	rjmp	.+22     	; 0x10e8 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Dec") == 0 )
    10d2:	66 e6       	ldi	r22, 0x66	; 102
    10d4:	74 e0       	ldi	r23, 0x04	; 4
    10d6:	ce 01       	movw	r24, r28
    10d8:	0d 96       	adiw	r24, 0x0d	; 13
    10da:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strcmp>
    10de:	89 2b       	or	r24, r25
    10e0:	19 f4       	brne	.+6      	; 0x10e8 <parseCompileTime+0x206>
        month = 12;
    10e2:	8c e0       	ldi	r24, 0x0C	; 12
    10e4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>

    date=atoi(sDate[1]);
    10e8:	ce 01       	movw	r24, r28
    10ea:	47 96       	adiw	r24, 0x17	; 23
    10ec:	0e 94 4e 0a 	call	0x149c	; 0x149c <atoi>
    10f0:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <date>
    yearLong=atoi(sDate[2]);
    10f4:	ce 01       	movw	r24, r28
    10f6:	81 96       	adiw	r24, 0x21	; 33
    10f8:	0e 94 4e 0a 	call	0x149c	; 0x149c <atoi>
    10fc:	ac 01       	movw	r20, r24
    year=yearLong%1000;
    10fe:	9c 01       	movw	r18, r24
    1100:	36 95       	lsr	r19
    1102:	27 95       	ror	r18
    1104:	36 95       	lsr	r19
    1106:	27 95       	ror	r18
    1108:	36 95       	lsr	r19
    110a:	27 95       	ror	r18
    110c:	a5 ec       	ldi	r26, 0xC5	; 197
    110e:	b0 e2       	ldi	r27, 0x20	; 32
    1110:	0e 94 1f 0a 	call	0x143e	; 0x143e <__umulhisi3>
    1114:	92 95       	swap	r25
    1116:	82 95       	swap	r24
    1118:	8f 70       	andi	r24, 0x0F	; 15
    111a:	89 27       	eor	r24, r25
    111c:	9f 70       	andi	r25, 0x0F	; 15
    111e:	89 27       	eor	r24, r25
    1120:	68 ee       	ldi	r22, 0xE8	; 232
    1122:	73 e0       	ldi	r23, 0x03	; 3
    1124:	86 9f       	mul	r24, r22
    1126:	90 01       	movw	r18, r0
    1128:	87 9f       	mul	r24, r23
    112a:	30 0d       	add	r19, r0
    112c:	96 9f       	mul	r25, r22
    112e:	30 0d       	add	r19, r0
    1130:	11 24       	eor	r1, r1
    1132:	42 1b       	sub	r20, r18
    1134:	53 0b       	sbc	r21, r19
    1136:	40 93 72 04 	sts	0x0472, r20	; 0x800472 <year>

    calcDay();
    113a:	0e 94 64 07 	call	0xec8	; 0xec8 <calcDay>
}//parseCompileTime
    113e:	e4 96       	adiw	r28, 0x34	; 52
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	08 95       	ret

00001152 <tinudht_read>:
#define TINUDHT_RCV_DELAY 10
#define TINUDHT_RCV_LENGTH 2

// ----------------------------------------------------------------------------

uint8_t tinudht_read(TinuDHT *ptinudht, uint8_t dht_pin) {
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	00 d0       	rcall	.+0      	; 0x1160 <tinudht_read+0xe>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <tinudht_read+0x10>
    1162:	1f 92       	push	r1
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	7c 01       	movw	r14, r24
	
	// Buffer to received data
	uint8_t data[5];
	// Empty the buffer
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    116a:	1d 82       	std	Y+5, r1	; 0x05
    116c:	1c 82       	std	Y+4, r1	; 0x04
    116e:	1b 82       	std	Y+3, r1	; 0x03
    1170:	1a 82       	std	Y+2, r1	; 0x02
    1172:	19 82       	std	Y+1, r1	; 0x01
//	for (uint8_t i=0; i< 5; i++) data[i] = 0;	// Another way to empty the data buffer.

	// Send request
	DDRB |= (1 << dht_pin);	// Set port as output
    1174:	84 b1       	in	r24, 0x04	; 4
    1176:	41 e0       	ldi	r20, 0x01	; 1
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	06 2e       	mov	r0, r22
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <tinudht_read+0x30>
    117e:	44 0f       	add	r20, r20
    1180:	55 1f       	adc	r21, r21
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <tinudht_read+0x2c>
    1186:	84 2b       	or	r24, r20
    1188:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << dht_pin);	// Set to 0
    118a:	95 b1       	in	r25, 0x05	; 5
    118c:	24 2f       	mov	r18, r20
    118e:	20 95       	com	r18
    1190:	92 23       	and	r25, r18
    1192:	95 b9       	out	0x05, r25	; 5
    1194:	83 e9       	ldi	r24, 0x93	; 147
    1196:	91 e1       	ldi	r25, 0x11	; 17
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <tinudht_read+0x46>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <tinudht_read+0x4c>
    119e:	00 00       	nop
	_delay_ms(18);	// Wait 18 ms
	PORTB |= (1 << dht_pin);	// Set to 1
    11a0:	95 b1       	in	r25, 0x05	; 5
    11a2:	94 2b       	or	r25, r20
    11a4:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a6:	9d e0       	ldi	r25, 0x0D	; 13
    11a8:	9a 95       	dec	r25
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <tinudht_read+0x56>
    11ac:	00 00       	nop
	_delay_us(40);	// Wait 40 us

	// Receive response
	DDRB &= ~(1 << dht_pin);	// Set port as input
    11ae:	84 b1       	in	r24, 0x04	; 4
    11b0:	82 23       	and	r24, r18
    11b2:	84 b9       	out	0x04, r24	; 4

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <tinudht_read+0x6c>
    11b8:	81 50       	subi	r24, 0x01	; 1
		if (timeout-- == 0)
    11ba:	09 f4       	brne	.+2      	; 0x11be <tinudht_read+0x6c>
    11bc:	5a c0       	rjmp	.+180    	; 0x1272 <tinudht_read+0x120>

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    11be:	23 b1       	in	r18, 0x03	; 3
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	24 23       	and	r18, r20
    11c4:	35 23       	and	r19, r21
    11c6:	23 2b       	or	r18, r19
    11c8:	b9 f3       	breq	.-18     	; 0x11b8 <tinudht_read+0x66>
    11ca:	5d c0       	rjmp	.+186    	; 0x1286 <tinudht_read+0x134>
    11cc:	21 50       	subi	r18, 0x01	; 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <tinudht_read+0x82>
    11d0:	52 c0       	rjmp	.+164    	; 0x1276 <tinudht_read+0x124>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    11d2:	2f ef       	ldi	r18, 0xFF	; 255
    11d4:	83 b1       	in	r24, 0x03	; 3
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	84 23       	and	r24, r20
    11da:	95 23       	and	r25, r21
    11dc:	89 2b       	or	r24, r25
    11de:	b1 f7       	brne	.-20     	; 0x11cc <tinudht_read+0x7a>
    11e0:	88 e2       	ldi	r24, 0x28	; 40
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	a7 e0       	ldi	r26, 0x07	; 7
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <tinudht_read+0x9c>
    11e8:	91 50       	subi	r25, 0x01	; 1
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
    11ea:	31 f4       	brne	.+12     	; 0x11f8 <tinudht_read+0xa6>
    11ec:	46 c0       	rjmp	.+140    	; 0x127a <tinudht_read+0x128>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	70 e0       	ldi	r23, 0x00	; 0
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
    11f4:	07 e0       	ldi	r16, 0x07	; 7
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    11f6:	9b 2f       	mov	r25, r27
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    11f8:	23 b1       	in	r18, 0x03	; 3
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	24 23       	and	r18, r20
    11fe:	35 23       	and	r19, r21
    1200:	23 2b       	or	r18, r19
    1202:	91 f3       	breq	.-28     	; 0x11e8 <tinudht_read+0x96>
    1204:	9b 2f       	mov	r25, r27
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <tinudht_read+0xc2>
    1208:	e3 e0       	ldi	r30, 0x03	; 3
    120a:	ea 95       	dec	r30
    120c:	f1 f7       	brne	.-4      	; 0x120a <tinudht_read+0xb8>
    120e:	00 00       	nop

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
    1210:	9f 5f       	subi	r25, 0xFF	; 255
    1212:	a9 f1       	breq	.+106    	; 0x127e <tinudht_read+0x12c>
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
    1214:	23 b1       	in	r18, 0x03	; 3
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	24 23       	and	r18, r20
    121a:	35 23       	and	r19, r21
    121c:	23 2b       	or	r18, r19
    121e:	a1 f7       	brne	.-24     	; 0x1208 <tinudht_read+0xb6>
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
    1220:	92 30       	cpi	r25, 0x02	; 2
    1222:	80 f0       	brcs	.+32     	; 0x1244 <tinudht_read+0xf2>
    1224:	e1 e0       	ldi	r30, 0x01	; 1
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	ec 0f       	add	r30, r28
    122a:	fd 1f       	adc	r31, r29
    122c:	e1 0f       	add	r30, r17
    122e:	f1 1d       	adc	r31, r1
    1230:	90 81       	ld	r25, Z
    1232:	9b 01       	movw	r18, r22
    1234:	0a 2e       	mov	r0, r26
    1236:	02 c0       	rjmp	.+4      	; 0x123c <tinudht_read+0xea>
    1238:	22 0f       	add	r18, r18
    123a:	33 1f       	adc	r19, r19
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <tinudht_read+0xe6>
    1240:	29 2b       	or	r18, r25
    1242:	20 83       	st	Z, r18
		// delay =  9..29us, len = 2
		
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
    1244:	a1 11       	cpse	r26, r1
    1246:	03 c0       	rjmp	.+6      	; 0x124e <tinudht_read+0xfc>
		{
			bit_index = 7;	// restart at MSB
			byte_index++;	// next byte!
    1248:	1f 5f       	subi	r17, 0xFF	; 255
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
    124a:	a0 2f       	mov	r26, r16
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <tinudht_read+0xfe>
			byte_index++;	// next byte!
		}
		else bit_index--;
    124e:	a1 50       	subi	r26, 0x01	; 1
    1250:	81 50       	subi	r24, 0x01	; 1
			return TINUDHT_ERROR_TIMEOUT;

	uint8_t bit_index = 7;
	uint8_t byte_index = 0;
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
    1252:	89 f6       	brne	.-94     	; 0x11f6 <tinudht_read+0xa4>
	// DEBUGGING_STRING("DT:");
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
    1254:	49 81       	ldd	r20, Y+1	; 0x01
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	92 2f       	mov	r25, r18
    125a:	94 0f       	add	r25, r20
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    125c:	3d 81       	ldd	r19, Y+5	; 0x05
    125e:	39 13       	cpse	r19, r25
    1260:	10 c0       	rjmp	.+32     	; 0x1282 <tinudht_read+0x130>
	// DEBUGGING_NUMDECP(data[4]);
	// DEBUGGING_NUMDECP(checksum);
	// DEBUGGING_STRING("\n\r");

	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	f7 01       	movw	r30, r14
    1266:	51 83       	std	Z+1, r21	; 0x01
    1268:	40 83       	st	Z, r20
	ptinudht->temperature = data[2]; 
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	33 83       	std	Z+3, r19	; 0x03
    126e:	22 83       	std	Z+2, r18	; 0x02

	return TINUDHT_OK;
    1270:	17 c0       	rjmp	.+46     	; 0x12a0 <tinudht_read+0x14e>

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
    1272:	8e ef       	ldi	r24, 0xFE	; 254
    1274:	15 c0       	rjmp	.+42     	; 0x12a0 <tinudht_read+0x14e>
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
    1276:	8e ef       	ldi	r24, 0xFE	; 254
    1278:	13 c0       	rjmp	.+38     	; 0x12a0 <tinudht_read+0x14e>
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;
    127a:	8e ef       	ldi	r24, 0xFE	; 254
    127c:	11 c0       	rjmp	.+34     	; 0x12a0 <tinudht_read+0x14e>
		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
    127e:	8e ef       	ldi	r24, 0xFE	; 254
    1280:	0f c0       	rjmp	.+30     	; 0x12a0 <tinudht_read+0x14e>
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	0d c0       	rjmp	.+26     	; 0x12a0 <tinudht_read+0x14e>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    1286:	83 b1       	in	r24, 0x03	; 3
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <tinudht_read+0x13e>
    128c:	95 95       	asr	r25
    128e:	87 95       	ror	r24
    1290:	6a 95       	dec	r22
    1292:	e2 f7       	brpl	.-8      	; 0x128c <tinudht_read+0x13a>
    1294:	80 fd       	sbrc	r24, 0
    1296:	9d cf       	rjmp	.-198    	; 0x11d2 <tinudht_read+0x80>
    1298:	88 e2       	ldi	r24, 0x28	; 40
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	a7 e0       	ldi	r26, 0x07	; 7
    129e:	a7 cf       	rjmp	.-178    	; 0x11ee <tinudht_read+0x9c>
	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
	ptinudht->temperature = data[2]; 

	return TINUDHT_OK;
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	08 95       	ret

000012b8 <countButton>:

    uint8_t val;
    uint8_t DONE=0;


    loopCnt=0;
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    prevLoop=0;
    12ba:	30 e0       	ldi	r19, 0x00	; 0


//-----------------------------------
void countButton()
{
    uint8_t menuCnt=0;
    12bc:	20 e0       	ldi	r18, 0x00	; 0
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	40 e0       	ldi	r20, 0x00	; 0
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    12c2:	52 e0       	ldi	r21, 0x02	; 2
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    {
        loopCnt++;
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
        curLoop = loopCnt;
        lapse = curLoop - prevLoop;
    12c6:	98 2f       	mov	r25, r24
    12c8:	93 1b       	sub	r25, r19

        //menuSelectInterval is
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
    12ca:	93 30       	cpi	r25, 0x03	; 3
    12cc:	18 f0       	brcs	.+6      	; 0x12d4 <countButton+0x1c>
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
    12ce:	21 11       	cpse	r18, r1
    12d0:	8b c0       	rjmp	.+278    	; 0x13e8 <countButton+0x130>
    12d2:	75 c0       	rjmp	.+234    	; 0x13be <countButton+0x106>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    12d4:	95 30       	cpi	r25, 0x05	; 5
    12d6:	08 f4       	brcc	.+2      	; 0x12da <countButton+0x22>
    12d8:	7c c0       	rjmp	.+248    	; 0x13d2 <countButton+0x11a>
    12da:	22 23       	and	r18, r18
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <countButton+0x28>
    12de:	6c c0       	rjmp	.+216    	; 0x13b8 <countButton+0x100>
    12e0:	78 c0       	rjmp	.+240    	; 0x13d2 <countButton+0x11a>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    12e2:	1c 99       	sbic	0x03, 4	; 3
    12e4:	10 c0       	rjmp	.+32     	; 0x1306 <countButton+0x4e>
    12e6:	94 2f       	mov	r25, r20
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <countButton+0x3c>
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    12ea:	95 2f       	mov	r25, r21
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <countButton+0x3c>

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    12ee:	94 2f       	mov	r25, r20
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <countButton+0x3c>
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    12f2:	96 2f       	mov	r25, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12f4:	e3 e2       	ldi	r30, 0x23	; 35
    12f6:	f4 ef       	ldi	r31, 0xF4	; 244
    12f8:	31 97       	sbiw	r30, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <countButton+0x40>
    12fc:	00 c0       	rjmp	.+0      	; 0x12fe <countButton+0x46>
    12fe:	00 00       	nop
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
      {
        // for debounce
        _delay_ms(halfSec/2);
        menuCnt++;
    1300:	2f 5f       	subi	r18, 0xFF	; 255

        //Pressing the button, lap time calculation should be reset
        //to give 1 sec of time to choose menuCnt
        prevLoop = loopCnt;
    1302:	38 2f       	mov	r19, r24
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <countButton+0x50>
    1306:	94 2f       	mov	r25, r20
    1308:	e1 e1       	ldi	r30, 0x11	; 17
    130a:	fa e7       	ldi	r31, 0x7A	; 122
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <countButton+0x54>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <countButton+0x5a>
    1312:	00 00       	nop
    //Get menuCnt by counting the button press
    //If pressing the button within 1 second of interval between each press,
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    1314:	99 23       	and	r25, r25
    1316:	b1 f2       	breq	.-84     	; 0x12c4 <countButton+0xc>

    //menuCnt has been set within 3sec of a PCINT occurence
    //  then, play WDT count for a corresponding alarm period.
    if (DONE)
    {
        if (DONE == 2)
    1318:	92 30       	cpi	r25, 0x02	; 2
    131a:	11 f4       	brne	.+4      	; 0x1320 <countButton+0x68>
            menuCnt = prevMenuCnt;
    131c:	20 91 80 04 	lds	r18, 0x0480	; 0x800480 <prevMenuCnt>
        //visual cue to notifiy user selected menuCnt
        //blinkLED(menuCnt);
        //_delay_ms(halfSec);
        //turnOnLCDpower();
        //lcd_dispON();
        prevMenuCnt = menuCnt;
    1320:	20 93 80 04 	sts	0x0480, r18	; 0x800480 <prevMenuCnt>
        switch (menuCnt)
    1324:	23 30       	cpi	r18, 0x03	; 3
    1326:	91 f0       	breq	.+36     	; 0x134c <countButton+0x94>
    1328:	28 f4       	brcc	.+10     	; 0x1334 <countButton+0x7c>
    132a:	21 30       	cpi	r18, 0x01	; 1
    132c:	49 f0       	breq	.+18     	; 0x1340 <countButton+0x88>
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	51 f0       	breq	.+20     	; 0x1346 <countButton+0x8e>
    1332:	2b c0       	rjmp	.+86     	; 0x138a <countButton+0xd2>
    1334:	25 30       	cpi	r18, 0x05	; 5
    1336:	19 f1       	breq	.+70     	; 0x137e <countButton+0xc6>
    1338:	c8 f0       	brcs	.+50     	; 0x136c <countButton+0xb4>
    133a:	26 30       	cpi	r18, 0x06	; 6
    133c:	19 f1       	breq	.+70     	; 0x1384 <countButton+0xcc>
    133e:	25 c0       	rjmp	.+74     	; 0x138a <countButton+0xd2>
        {
            case 1:
                //lcd_dispWords();
                //lcd_dispRealClock();
				LCD_WriteTimeDateTempHumid();
    1340:	0e 94 84 02 	call	0x508	; 0x508 <LCD_WriteTimeDateTempHumid>
				//LCD_WriteTimeDate();
				//LCD_WriteTimeDateTempHumid();
                //_delay_ms(2000);
				//getDHT();
                break;
    1344:	24 c0       	rjmp	.+72     	; 0x138e <countButton+0xd6>
            case 2:
				LCD_WriteTimeDate();
    1346:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_WriteTimeDate>
                //_delay_ms(2000);
				//getDHT();
                //lcd_showDHT11();
                break;
    134a:	21 c0       	rjmp	.+66     	; 0x138e <countButton+0xd6>
            case 3:
				makePDasOutput();
    134c:	0e 94 30 07 	call	0xe60	; 0xe60 <makePDasOutput>
                turnOnLCDBacklight();
    1350:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <turnOnLCDBacklight>
    1354:	ff e9       	ldi	r31, 0x9F	; 159
    1356:	26 e8       	ldi	r18, 0x86	; 134
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	f1 50       	subi	r31, 0x01	; 1
    135c:	20 40       	sbci	r18, 0x00	; 0
    135e:	80 40       	sbci	r24, 0x00	; 0
    1360:	e1 f7       	brne	.-8      	; 0x135a <countButton+0xa2>
    1362:	00 c0       	rjmp	.+0      	; 0x1364 <countButton+0xac>
    1364:	00 00       	nop
				//LCD_WriteTimeDate();
				_delay_ms(500);
                turnOffLCDBacklight();
    1366:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <turnOffLCDBacklight>
                break;
    136a:	11 c0       	rjmp	.+34     	; 0x138e <countButton+0xd6>
            case 4:
                //adjustClock();
                adjustMin();
    136c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <adjustMin>
                adjustHour();
    1370:	0e 94 1c 01 	call	0x238	; 0x238 <adjustHour>
                adjustSec();
    1374:	0e 94 c8 01 	call	0x390	; 0x390 <adjustSec>
                lcd_dispRealClock();
    1378:	0e 94 e5 04 	call	0x9ca	; 0x9ca <lcd_dispRealClock>
                break;
    137c:	08 c0       	rjmp	.+16     	; 0x138e <countButton+0xd6>
            case 5:
                lcd_dispAccumulatedTime();
    137e:	0e 94 d2 05 	call	0xba4	; 0xba4 <lcd_dispAccumulatedTime>
                break;
    1382:	05 c0       	rjmp	.+10     	; 0x138e <countButton+0xd6>
            case 6:
                lcd_dispProgInfo();
    1384:	0e 94 27 06 	call	0xc4e	; 0xc4e <lcd_dispProgInfo>
                break;
    1388:	02 c0       	rjmp	.+4      	; 0x138e <countButton+0xd6>
            default:
                lcd_dispMenu();
    138a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_dispMenu>
    138e:	9f e3       	ldi	r25, 0x3F	; 63
    1390:	e2 e4       	ldi	r30, 0x42	; 66
    1392:	ff e0       	ldi	r31, 0x0F	; 15
    1394:	91 50       	subi	r25, 0x01	; 1
    1396:	e0 40       	sbci	r30, 0x00	; 0
    1398:	f0 40       	sbci	r31, 0x00	; 0
    139a:	e1 f7       	brne	.-8      	; 0x1394 <countButton+0xdc>
    139c:	00 c0       	rjmp	.+0      	; 0x139e <countButton+0xe6>
    139e:	00 00       	nop
                //getDHT();
        }//switch (menuCnt)

        _delay_ms(5000); //show time of menu result

		makePDasInput(); //make LCD in deep power save mode
    13a0:	0e 94 4b 07 	call	0xe96	; 0xe96 <makePDasInput>
		pwrOn = 0;
    13a4:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <pwrOn>
    13a8:	08 95       	ret
    13aa:	81 e1       	ldi	r24, 0x11	; 17
    13ac:	9a e7       	ldi	r25, 0x7A	; 122
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <countButton+0xf6>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <countButton+0xfc>
    13b4:	00 00       	nop
    13b6:	b2 cf       	rjmp	.-156    	; 0x131c <countButton+0x64>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    13b8:	1c 99       	sbic	0x03, 4	; 3
    13ba:	f7 cf       	rjmp	.-18     	; 0x13aa <countButton+0xf2>
    13bc:	96 cf       	rjmp	.-212    	; 0x12ea <countButton+0x32>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    13be:	95 30       	cpi	r25, 0x05	; 5
    13c0:	d8 f7       	brcc	.-10     	; 0x13b8 <countButton+0x100>
    13c2:	8f cf       	rjmp	.-226    	; 0x12e2 <countButton+0x2a>
    13c4:	e1 e1       	ldi	r30, 0x11	; 17
    13c6:	fa e7       	ldi	r31, 0x7A	; 122
    13c8:	31 97       	sbiw	r30, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <countButton+0x110>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <countButton+0x116>
    13ce:	00 00       	nop
    13d0:	79 cf       	rjmp	.-270    	; 0x12c4 <countButton+0xc>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    13d2:	1c 99       	sbic	0x03, 4	; 3
    13d4:	f7 cf       	rjmp	.-18     	; 0x13c4 <countButton+0x10c>
    13d6:	8b cf       	rjmp	.-234    	; 0x12ee <countButton+0x36>
    13d8:	81 e1       	ldi	r24, 0x11	; 17
    13da:	9a e7       	ldi	r25, 0x7A	; 122
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <countButton+0x124>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <countButton+0x12a>
    13e2:	00 00       	nop
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	98 cf       	rjmp	.-208    	; 0x1318 <countButton+0x60>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    13e8:	1c 99       	sbic	0x03, 4	; 3
    13ea:	f6 cf       	rjmp	.-20     	; 0x13d8 <countButton+0x120>
    13ec:	82 cf       	rjmp	.-252    	; 0x12f2 <countButton+0x3a>

000013ee <__divmodqi4>:
    13ee:	87 fb       	bst	r24, 7
    13f0:	08 2e       	mov	r0, r24
    13f2:	06 26       	eor	r0, r22
    13f4:	87 fd       	sbrc	r24, 7
    13f6:	81 95       	neg	r24
    13f8:	67 fd       	sbrc	r22, 7
    13fa:	61 95       	neg	r22
    13fc:	0e 94 2e 0a 	call	0x145c	; 0x145c <__udivmodqi4>
    1400:	0e f4       	brtc	.+2      	; 0x1404 <__divmodqi4_1>
    1402:	91 95       	neg	r25

00001404 <__divmodqi4_1>:
    1404:	07 fc       	sbrc	r0, 7
    1406:	81 95       	neg	r24

00001408 <__divmodqi4_exit>:
    1408:	08 95       	ret

0000140a <__divmodhi4>:
    140a:	97 fb       	bst	r25, 7
    140c:	07 2e       	mov	r0, r23
    140e:	16 f4       	brtc	.+4      	; 0x1414 <__divmodhi4+0xa>
    1410:	00 94       	com	r0
    1412:	07 d0       	rcall	.+14     	; 0x1422 <__divmodhi4_neg1>
    1414:	77 fd       	sbrc	r23, 7
    1416:	09 d0       	rcall	.+18     	; 0x142a <__divmodhi4_neg2>
    1418:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__udivmodhi4>
    141c:	07 fc       	sbrc	r0, 7
    141e:	05 d0       	rcall	.+10     	; 0x142a <__divmodhi4_neg2>
    1420:	3e f4       	brtc	.+14     	; 0x1430 <__divmodhi4_exit>

00001422 <__divmodhi4_neg1>:
    1422:	90 95       	com	r25
    1424:	81 95       	neg	r24
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	08 95       	ret

0000142a <__divmodhi4_neg2>:
    142a:	70 95       	com	r23
    142c:	61 95       	neg	r22
    142e:	7f 4f       	sbci	r23, 0xFF	; 255

00001430 <__divmodhi4_exit>:
    1430:	08 95       	ret

00001432 <__tablejump2__>:
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	05 90       	lpm	r0, Z+
    1438:	f4 91       	lpm	r31, Z
    143a:	e0 2d       	mov	r30, r0
    143c:	09 94       	ijmp

0000143e <__umulhisi3>:
    143e:	a2 9f       	mul	r26, r18
    1440:	b0 01       	movw	r22, r0
    1442:	b3 9f       	mul	r27, r19
    1444:	c0 01       	movw	r24, r0
    1446:	a3 9f       	mul	r26, r19
    1448:	70 0d       	add	r23, r0
    144a:	81 1d       	adc	r24, r1
    144c:	11 24       	eor	r1, r1
    144e:	91 1d       	adc	r25, r1
    1450:	b2 9f       	mul	r27, r18
    1452:	70 0d       	add	r23, r0
    1454:	81 1d       	adc	r24, r1
    1456:	11 24       	eor	r1, r1
    1458:	91 1d       	adc	r25, r1
    145a:	08 95       	ret

0000145c <__udivmodqi4>:
    145c:	99 1b       	sub	r25, r25
    145e:	79 e0       	ldi	r23, 0x09	; 9
    1460:	04 c0       	rjmp	.+8      	; 0x146a <__udivmodqi4_ep>

00001462 <__udivmodqi4_loop>:
    1462:	99 1f       	adc	r25, r25
    1464:	96 17       	cp	r25, r22
    1466:	08 f0       	brcs	.+2      	; 0x146a <__udivmodqi4_ep>
    1468:	96 1b       	sub	r25, r22

0000146a <__udivmodqi4_ep>:
    146a:	88 1f       	adc	r24, r24
    146c:	7a 95       	dec	r23
    146e:	c9 f7       	brne	.-14     	; 0x1462 <__udivmodqi4_loop>
    1470:	80 95       	com	r24
    1472:	08 95       	ret

00001474 <__udivmodhi4>:
    1474:	aa 1b       	sub	r26, r26
    1476:	bb 1b       	sub	r27, r27
    1478:	51 e1       	ldi	r21, 0x11	; 17
    147a:	07 c0       	rjmp	.+14     	; 0x148a <__udivmodhi4_ep>

0000147c <__udivmodhi4_loop>:
    147c:	aa 1f       	adc	r26, r26
    147e:	bb 1f       	adc	r27, r27
    1480:	a6 17       	cp	r26, r22
    1482:	b7 07       	cpc	r27, r23
    1484:	10 f0       	brcs	.+4      	; 0x148a <__udivmodhi4_ep>
    1486:	a6 1b       	sub	r26, r22
    1488:	b7 0b       	sbc	r27, r23

0000148a <__udivmodhi4_ep>:
    148a:	88 1f       	adc	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	5a 95       	dec	r21
    1490:	a9 f7       	brne	.-22     	; 0x147c <__udivmodhi4_loop>
    1492:	80 95       	com	r24
    1494:	90 95       	com	r25
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	08 95       	ret

0000149c <atoi>:
    149c:	fc 01       	movw	r30, r24
    149e:	88 27       	eor	r24, r24
    14a0:	99 27       	eor	r25, r25
    14a2:	e8 94       	clt
    14a4:	21 91       	ld	r18, Z+
    14a6:	20 32       	cpi	r18, 0x20	; 32
    14a8:	e9 f3       	breq	.-6      	; 0x14a4 <atoi+0x8>
    14aa:	29 30       	cpi	r18, 0x09	; 9
    14ac:	10 f0       	brcs	.+4      	; 0x14b2 <atoi+0x16>
    14ae:	2e 30       	cpi	r18, 0x0E	; 14
    14b0:	c8 f3       	brcs	.-14     	; 0x14a4 <atoi+0x8>
    14b2:	2b 32       	cpi	r18, 0x2B	; 43
    14b4:	41 f0       	breq	.+16     	; 0x14c6 <atoi+0x2a>
    14b6:	2d 32       	cpi	r18, 0x2D	; 45
    14b8:	39 f4       	brne	.+14     	; 0x14c8 <atoi+0x2c>
    14ba:	68 94       	set
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <atoi+0x2a>
    14be:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__mulhi_const_10>
    14c2:	82 0f       	add	r24, r18
    14c4:	91 1d       	adc	r25, r1
    14c6:	21 91       	ld	r18, Z+
    14c8:	20 53       	subi	r18, 0x30	; 48
    14ca:	2a 30       	cpi	r18, 0x0A	; 10
    14cc:	c0 f3       	brcs	.-16     	; 0x14be <atoi+0x22>
    14ce:	1e f4       	brtc	.+6      	; 0x14d6 <atoi+0x3a>
    14d0:	90 95       	com	r25
    14d2:	81 95       	neg	r24
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	08 95       	ret

000014d8 <strtok>:
    14d8:	4a e6       	ldi	r20, 0x6A	; 106
    14da:	54 e0       	ldi	r21, 0x04	; 4
    14dc:	0e 94 81 0a 	call	0x1502	; 0x1502 <strtok_r>
    14e0:	08 95       	ret

000014e2 <strcmp>:
    14e2:	fb 01       	movw	r30, r22
    14e4:	dc 01       	movw	r26, r24
    14e6:	8d 91       	ld	r24, X+
    14e8:	01 90       	ld	r0, Z+
    14ea:	80 19       	sub	r24, r0
    14ec:	01 10       	cpse	r0, r1
    14ee:	d9 f3       	breq	.-10     	; 0x14e6 <strcmp+0x4>
    14f0:	99 0b       	sbc	r25, r25
    14f2:	08 95       	ret

000014f4 <strcpy>:
    14f4:	fb 01       	movw	r30, r22
    14f6:	dc 01       	movw	r26, r24
    14f8:	01 90       	ld	r0, Z+
    14fa:	0d 92       	st	X+, r0
    14fc:	00 20       	and	r0, r0
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <strcpy+0x4>
    1500:	08 95       	ret

00001502 <strtok_r>:
    1502:	fa 01       	movw	r30, r20
    1504:	a1 91       	ld	r26, Z+
    1506:	b0 81       	ld	r27, Z
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	19 f4       	brne	.+6      	; 0x1512 <strtok_r+0x10>
    150c:	10 97       	sbiw	r26, 0x00	; 0
    150e:	e1 f0       	breq	.+56     	; 0x1548 <strtok_r+0x46>
    1510:	cd 01       	movw	r24, r26
    1512:	dc 01       	movw	r26, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0d 90       	ld	r0, X+
    1518:	00 20       	and	r0, r0
    151a:	11 f4       	brne	.+4      	; 0x1520 <strtok_r+0x1e>
    151c:	c0 01       	movw	r24, r0
    151e:	13 c0       	rjmp	.+38     	; 0x1546 <strtok_r+0x44>
    1520:	fb 01       	movw	r30, r22
    1522:	21 91       	ld	r18, Z+
    1524:	22 23       	and	r18, r18
    1526:	19 f0       	breq	.+6      	; 0x152e <strtok_r+0x2c>
    1528:	20 15       	cp	r18, r0
    152a:	d9 f7       	brne	.-10     	; 0x1522 <strtok_r+0x20>
    152c:	f3 cf       	rjmp	.-26     	; 0x1514 <strtok_r+0x12>
    152e:	fb 01       	movw	r30, r22
    1530:	21 91       	ld	r18, Z+
    1532:	20 15       	cp	r18, r0
    1534:	19 f4       	brne	.+6      	; 0x153c <strtok_r+0x3a>
    1536:	1e 92       	st	-X, r1
    1538:	11 96       	adiw	r26, 0x01	; 1
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <strtok_r+0x46>
    153c:	22 23       	and	r18, r18
    153e:	c1 f7       	brne	.-16     	; 0x1530 <strtok_r+0x2e>
    1540:	0d 90       	ld	r0, X+
    1542:	00 20       	and	r0, r0
    1544:	a1 f7       	brne	.-24     	; 0x152e <strtok_r+0x2c>
    1546:	d0 01       	movw	r26, r0
    1548:	fa 01       	movw	r30, r20
    154a:	a1 93       	st	Z+, r26
    154c:	b0 83       	st	Z, r27
    154e:	08 95       	ret

00001550 <__itoa_ncheck>:
    1550:	bb 27       	eor	r27, r27
    1552:	4a 30       	cpi	r20, 0x0A	; 10
    1554:	31 f4       	brne	.+12     	; 0x1562 <__itoa_ncheck+0x12>
    1556:	99 23       	and	r25, r25
    1558:	22 f4       	brpl	.+8      	; 0x1562 <__itoa_ncheck+0x12>
    155a:	bd e2       	ldi	r27, 0x2D	; 45
    155c:	90 95       	com	r25
    155e:	81 95       	neg	r24
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__utoa_common>

00001566 <__mulhi_const_10>:
    1566:	7a e0       	ldi	r23, 0x0A	; 10
    1568:	97 9f       	mul	r25, r23
    156a:	90 2d       	mov	r25, r0
    156c:	87 9f       	mul	r24, r23
    156e:	80 2d       	mov	r24, r0
    1570:	91 0d       	add	r25, r1
    1572:	11 24       	eor	r1, r1
    1574:	08 95       	ret

00001576 <__utoa_ncheck>:
    1576:	bb 27       	eor	r27, r27

00001578 <__utoa_common>:
    1578:	fb 01       	movw	r30, r22
    157a:	55 27       	eor	r21, r21
    157c:	aa 27       	eor	r26, r26
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	aa 1f       	adc	r26, r26
    1584:	a4 17       	cp	r26, r20
    1586:	10 f0       	brcs	.+4      	; 0x158c <__utoa_common+0x14>
    1588:	a4 1b       	sub	r26, r20
    158a:	83 95       	inc	r24
    158c:	50 51       	subi	r21, 0x10	; 16
    158e:	b9 f7       	brne	.-18     	; 0x157e <__utoa_common+0x6>
    1590:	a0 5d       	subi	r26, 0xD0	; 208
    1592:	aa 33       	cpi	r26, 0x3A	; 58
    1594:	08 f0       	brcs	.+2      	; 0x1598 <__utoa_common+0x20>
    1596:	a9 5d       	subi	r26, 0xD9	; 217
    1598:	a1 93       	st	Z+, r26
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	79 f7       	brne	.-34     	; 0x157c <__utoa_common+0x4>
    159e:	b1 11       	cpse	r27, r1
    15a0:	b1 93       	st	Z+, r27
    15a2:	11 92       	st	Z+, r1
    15a4:	cb 01       	movw	r24, r22
    15a6:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <strrev>

000015aa <strrev>:
    15aa:	dc 01       	movw	r26, r24
    15ac:	fc 01       	movw	r30, r24
    15ae:	67 2f       	mov	r22, r23
    15b0:	71 91       	ld	r23, Z+
    15b2:	77 23       	and	r23, r23
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <strrev+0x4>
    15b6:	32 97       	sbiw	r30, 0x02	; 2
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <strrev+0x18>
    15ba:	7c 91       	ld	r23, X
    15bc:	6d 93       	st	X+, r22
    15be:	70 83       	st	Z, r23
    15c0:	62 91       	ld	r22, -Z
    15c2:	ae 17       	cp	r26, r30
    15c4:	bf 07       	cpc	r27, r31
    15c6:	c8 f3       	brcs	.-14     	; 0x15ba <strrev+0x10>
    15c8:	08 95       	ret

000015ca <_exit>:
    15ca:	f8 94       	cli

000015cc <__stop_program>:
    15cc:	ff cf       	rjmp	.-2      	; 0x15cc <__stop_program>
