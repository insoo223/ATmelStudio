
LCD_RTC_DS1307_DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000362  00800100  00001600  00001694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001600  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800462  00800462  000019f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000533e  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a4d  00000000  00000000  00007116  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000250f  00000000  00000000  00008b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000810  00000000  00000000  0000b074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000acb  00000000  00000000  0000b884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f91  00000000  00000000  0000c34f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_3>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	d9 03       	fmulsu	r21, r17
      6a:	dd 03       	fmulsu	r21, r21
      6c:	d9 03       	fmulsu	r21, r17
      6e:	e1 03       	fmuls	r22, r17
      70:	d9 03       	fmulsu	r21, r17
      72:	e1 03       	fmuls	r22, r17
      74:	d9 03       	fmulsu	r21, r17
      76:	d9 03       	fmulsu	r21, r17
      78:	e1 03       	fmuls	r22, r17
      7a:	d9 03       	fmulsu	r21, r17
      7c:	e1 03       	fmuls	r22, r17
      7e:	d9 03       	fmulsu	r21, r17
      80:	99 05       	cpc	r25, r9
      82:	a2 05       	cpc	r26, r2
      84:	ab 05       	cpc	r26, r11
      86:	b4 05       	cpc	r27, r4
      88:	bd 05       	cpc	r27, r13
      8a:	c6 05       	cpc	r28, r6
      8c:	cf 05       	cpc	r28, r15

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	14 e0       	ldi	r17, 0x04	; 4
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e1       	ldi	r31, 0x16	; 22
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a2 36       	cpi	r26, 0x62	; 98
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	24 e0       	ldi	r18, 0x04	; 4
      b2:	a2 e6       	ldi	r26, 0x62	; 98
      b4:	b4 e0       	ldi	r27, 0x04	; 4
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a9 37       	cpi	r26, 0x79	; 121
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 33 07 	call	0xe66	; 0xe66 <main>
      c4:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <LCDconfig>:
PORTD for LCD
----------------*/
void LCDconfig()
{
// Data lines of nibble - Output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
      cc:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
      ce:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
      d0:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
      d2:	54 9a       	sbi	0x0a, 4	; 10

// E pin (Enable) - Output
	lcd_E_ddr |= _BV(lcd_E_bit);
      d4:	53 9a       	sbi	0x0a, 3	; 10
	//turn off lcd_E
	lcd_E_port &= ~_BV(lcd_E_bit);
      d6:	5b 98       	cbi	0x0b, 3	; 11


// RS pin (Register Select) - Output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
      d8:	52 9a       	sbi	0x0a, 2	; 10
	//turn off lcd_RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
      da:	5a 98       	cbi	0x0b, 2	; 11

// Back light cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
      dc:	20 9a       	sbi	0x04, 0	; 4
	// Turn off back light
	// for it is GND or cathode pin, HIGH make it off
	lcd_Backlight_port |= _BV(lcd_Backlight_bit);
      de:	28 9a       	sbi	0x05, 0	; 5

// VDD pin (Power Supply) - Output
	// added by Insoo (Jul 11, 2017) to control LCD power consumption while sleep
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
      e0:	26 9a       	sbi	0x04, 6	; 4
	//turn off VDD
	lcd_VDD_port &= ~_BV(lcd_VDD_bit);
      e2:	2e 98       	cbi	0x05, 6	; 5
      e4:	08 95       	ret

000000e6 <SwitchConfig>:
PORTB for the button/tactile switch
----------------*/
void SwitchConfig()
{
	//Tactile switch - Input
	tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);
      e6:	24 98       	cbi	0x04, 4	; 4
      e8:	08 95       	ret

000000ea <RTC_DS1307config>:
----------------*/
void RTC_DS1307config()
{
	// DS1307 VCC pin (Power Supply) - Output
	//added by Insoo (Jul 11, 2017)
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
      ea:	27 9a       	sbi	0x04, 7	; 4
	//turn off DS1307 RTC chip power
	DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
      ec:	2f 98       	cbi	0x05, 7	; 5
      ee:	08 95       	ret

000000f0 <DHT11config>:
----------------*/
void DHT11config()
{
	// DHT11 (temp & humid sensor) VCC pin (Power Supply) - Output
	//added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr |= _BV(DHT_VCC_bit);
      f0:	22 9a       	sbi	0x04, 2	; 4
	//turn off DS1307 RTC chip power
	DHT_VCC_port &= ~_BV(DHT_VCC_bit);
      f2:	2a 98       	cbi	0x05, 2	; 5
      f4:	08 95       	ret

000000f6 <debugPinConfig>:
PORTB for the debug pin 
----------------*/
void debugPinConfig()
{
	// debug pin - Output
	debug_PIN_ddr |= _BV(debug_PIN_bit);
      f6:	23 9a       	sbi	0x04, 3	; 4
	//turn off debug_PIN_bit
	debug_PIN_port &= ~_BV(debug_PIN_bit);
      f8:	2b 98       	cbi	0x05, 3	; 5
      fa:	08 95       	ret

000000fc <config>:
#include <util/delay.h>

//------------------------------------
void config()
{
	LCDconfig();
      fc:	0e 94 66 00 	call	0xcc	; 0xcc <LCDconfig>
	SwitchConfig();
     100:	0e 94 73 00 	call	0xe6	; 0xe6 <SwitchConfig>
	RTC_DS1307config();
     104:	0e 94 75 00 	call	0xea	; 0xea <RTC_DS1307config>
	DHT11config();
     108:	0e 94 78 00 	call	0xf0	; 0xf0 <DHT11config>
	debugPinConfig();
     10c:	0e 94 7b 00 	call	0xf6	; 0xf6 <debugPinConfig>
     110:	08 95       	ret

00000112 <getDHT>:

char strTemp[3], strHumid[3];

//-------------------------------------------
void getDHT()
{
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	00 d0       	rcall	.+0      	; 0x11c <getDHT+0xa>
     11c:	00 d0       	rcall	.+0      	; 0x11e <getDHT+0xc>
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
	uint16_t temp; 
	uint16_t humid; 
	TinuDHT tinudht;
	DHT_VCC_ddr |= _BV(DHT_VCC_bit);
     122:	22 9a       	sbi	0x04, 2	; 4
	DHT_VCC_port |= _BV(DHT_VCC_bit);
     124:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     126:	2f e9       	ldi	r18, 0x9F	; 159
     128:	86 e8       	ldi	r24, 0x86	; 134
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	21 50       	subi	r18, 0x01	; 1
     12e:	80 40       	sbci	r24, 0x00	; 0
     130:	90 40       	sbci	r25, 0x00	; 0
     132:	e1 f7       	brne	.-8      	; 0x12c <getDHT+0x1a>
     134:	00 c0       	rjmp	.+0      	; 0x136 <getDHT+0x24>
     136:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, DHT_SIG_bit);
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	ce 01       	movw	r24, r28
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	0e 94 c2 08 	call	0x1184	; 0x1184 <tinudht_read>
     142:	2f e9       	ldi	r18, 0x9F	; 159
     144:	86 e8       	ldi	r24, 0x86	; 134
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	21 50       	subi	r18, 0x01	; 1
     14a:	80 40       	sbci	r24, 0x00	; 0
     14c:	90 40       	sbci	r25, 0x00	; 0
     14e:	e1 f7       	brne	.-8      	; 0x148 <getDHT+0x36>
     150:	00 c0       	rjmp	.+0      	; 0x152 <getDHT+0x40>
     152:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, DHT_SIG_bit);
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	ce 01       	movw	r24, r28
     158:	01 96       	adiw	r24, 0x01	; 1
     15a:	0e 94 c2 08 	call	0x1184	; 0x1184 <tinudht_read>
	temp = tinudht.temperature;
	humid = tinudht.humidity;
     15e:	09 81       	ldd	r16, Y+1	; 0x01
     160:	1a 81       	ldd	r17, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     162:	4a e0       	ldi	r20, 0x0A	; 10
     164:	64 e7       	ldi	r22, 0x74	; 116
     166:	74 e0       	ldi	r23, 0x04	; 4
     168:	8b 81       	ldd	r24, Y+3	; 0x03
     16a:	9c 81       	ldd	r25, Y+4	; 0x04
     16c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     170:	4a e0       	ldi	r20, 0x0A	; 10
     172:	61 e7       	ldi	r22, 0x71	; 113
     174:	74 e0       	ldi	r23, 0x04	; 4
     176:	c8 01       	movw	r24, r16
     178:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>

	// display the first line of information
	itoa(temp, strTemp, 10);
	itoa(humid, strHumid, 10);

     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	08 95       	ret

0000018e <DS1307_GetTime>:
	SetTimeDate(wkDay, month, day, year,  ampm,  h,  m,  s);
	_delay_ms(1000);
	
	LCD_WriteTimeDate();
	_delay_ms(3000);
}//setTime2DS1307
     18e:	ef 92       	push	r14
     190:	ff 92       	push	r15
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	ec 01       	movw	r28, r24
     19c:	7b 01       	movw	r14, r22
     19e:	8a 01       	movw	r16, r20
     1a0:	62 e0       	ldi	r22, 0x02	; 2
     1a2:	80 ed       	ldi	r24, 0xD0	; 208
     1a4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     1a8:	88 83       	st	Y, r24
     1aa:	61 e0       	ldi	r22, 0x01	; 1
     1ac:	80 ed       	ldi	r24, 0xD0	; 208
     1ae:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     1b2:	f7 01       	movw	r30, r14
     1b4:	80 83       	st	Z, r24
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	80 ed       	ldi	r24, 0xD0	; 208
     1ba:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     1be:	f8 01       	movw	r30, r16
     1c0:	80 83       	st	Z, r24
     1c2:	98 81       	ld	r25, Y
     1c4:	96 ff       	sbrs	r25, 6
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <DS1307_GetTime+0x40>
     1c8:	9f 71       	andi	r25, 0x1F	; 31
     1ca:	98 83       	st	Y, r25
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DS1307_GetTime+0x44>
     1ce:	9f 73       	andi	r25, 0x3F	; 63
     1d0:	98 83       	st	Y, r25
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	08 95       	ret

000001e0 <DS1307_GetDate>:
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	7c 01       	movw	r14, r24
     1ee:	8b 01       	movw	r16, r22
     1f0:	ea 01       	movw	r28, r20
     1f2:	65 e0       	ldi	r22, 0x05	; 5
     1f4:	80 ed       	ldi	r24, 0xD0	; 208
     1f6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     1fa:	f7 01       	movw	r30, r14
     1fc:	80 83       	st	Z, r24
     1fe:	64 e0       	ldi	r22, 0x04	; 4
     200:	80 ed       	ldi	r24, 0xD0	; 208
     202:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     206:	f8 01       	movw	r30, r16
     208:	80 83       	st	Z, r24
     20a:	66 e0       	ldi	r22, 0x06	; 6
     20c:	80 ed       	ldi	r24, 0xD0	; 208
     20e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     212:	88 83       	st	Y, r24
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	08 95       	ret

00000222 <DS1307_GetWkDay>:
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ec 01       	movw	r28, r24
     228:	63 e0       	ldi	r22, 0x03	; 3
     22a:	80 ed       	ldi	r24, 0xD0	; 208
     22c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ReadRegister>
     230:	88 83       	st	Y, r24
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <adjustHour>:
	_delay_ms(10);
}//SetTimeDate

//-----------------------------------
void adjustHour()
{
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	00 d0       	rcall	.+0      	; 0x242 <adjustHour+0xa>
     242:	1f 92       	push	r1
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	10 e0       	ldi	r17, 0x00	; 0
	char strHour[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     252:	84 e1       	ldi	r24, 0x14	; 20
     254:	8a 95       	dec	r24
     256:	f1 f7       	brne	.-4      	; 0x254 <adjustHour+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (min)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"Hour: ");
     258:	8e ec       	ldi	r24, 0xCE	; 206
     25a:	93 e0       	ldi	r25, 0x03	; 3
     25c:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		itoa(hour, strHour, 10);
     260:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <hour>
     264:	4a e0       	ldi	r20, 0x0A	; 10
     266:	be 01       	movw	r22, r28
     268:	6f 5f       	subi	r22, 0xFF	; 255
     26a:	7f 4f       	sbci	r23, 0xFF	; 255
     26c:	08 2e       	mov	r0, r24
     26e:	00 0c       	add	r0, r0
     270:	99 0b       	sbc	r25, r25
     272:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strHour);
     276:	ce 01       	movw	r24, r28
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	94 e0       	ldi	r25, 0x04	; 4
     282:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     286:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     288:	e7 ea       	ldi	r30, 0xA7	; 167
     28a:	f1 e6       	ldi	r31, 0x61	; 97
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <adjustHour+0x54>
     290:	00 c0       	rjmp	.+0      	; 0x292 <adjustHour+0x5a>
     292:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     294:	84 fd       	sbrc	r24, 4
     296:	0c c0       	rjmp	.+24     	; 0x2b0 <adjustHour+0x78>
		{
			hour++;
     298:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <hour>
     29c:	8f 5f       	subi	r24, 0xFF	; 255
			if (hour > 23)
     29e:	88 31       	cpi	r24, 0x18	; 24
     2a0:	24 f4       	brge	.+8      	; 0x2aa <adjustHour+0x72>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			hour++;
     2a2:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <hour>
     2a6:	01 2f       	mov	r16, r17
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <adjustHour+0x78>
			if (hour > 23)
			hour=0;
     2aa:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <hour>
     2ae:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     2b0:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     2b2:	81 2f       	mov	r24, r17
     2b4:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     2b6:	89 30       	cpi	r24, 0x09	; 9
     2b8:	38 f4       	brcc	.+14     	; 0x2c8 <adjustHour+0x90>
     2ba:	81 e1       	ldi	r24, 0x11	; 17
     2bc:	9a e7       	ldi	r25, 0x7A	; 122
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <adjustHour+0x86>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <adjustHour+0x8c>
     2c4:	00 00       	nop
     2c6:	c2 cf       	rjmp	.-124    	; 0x24c <adjustHour+0x14>
     2c8:	e1 e1       	ldi	r30, 0x11	; 17
     2ca:	fa e7       	ldi	r31, 0x7A	; 122
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <adjustHour+0x94>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <adjustHour+0x9a>
     2d2:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)
}//adjustHour
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	08 95       	ret

000002e4 <adjustMin>:

//-----------------------------------
void adjustMin()
{
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <adjustMin+0xa>
     2ee:	1f 92       	push	r1
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	10 e0       	ldi	r17, 0x00	; 0
	char strMin[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     2f8:	80 e8       	ldi	r24, 0x80	; 128
     2fa:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fe:	84 e1       	ldi	r24, 0x14	; 20
     300:	8a 95       	dec	r24
     302:	f1 f7       	brne	.-4      	; 0x300 <adjustMin+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (min)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"Min: ");
     304:	85 ed       	ldi	r24, 0xD5	; 213
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		itoa(min, strMin, 10);
     30c:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <min>
     310:	4a e0       	ldi	r20, 0x0A	; 10
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	08 2e       	mov	r0, r24
     31a:	00 0c       	add	r0, r0
     31c:	99 0b       	sbc	r25, r25
     31e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strMin);
     322:	ce 01       	movw	r24, r28
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	94 e0       	ldi	r25, 0x04	; 4
     32e:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     332:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     334:	e7 ea       	ldi	r30, 0xA7	; 167
     336:	f1 e6       	ldi	r31, 0x61	; 97
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <adjustMin+0x54>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <adjustMin+0x5a>
     33e:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     340:	84 fd       	sbrc	r24, 4
     342:	0c c0       	rjmp	.+24     	; 0x35c <adjustMin+0x78>
		{
			min++;
     344:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <min>
     348:	8f 5f       	subi	r24, 0xFF	; 255
			if (min > 59)
     34a:	8c 33       	cpi	r24, 0x3C	; 60
     34c:	24 f4       	brge	.+8      	; 0x356 <adjustMin+0x72>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			min++;
     34e:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <min>
     352:	01 2f       	mov	r16, r17
     354:	03 c0       	rjmp	.+6      	; 0x35c <adjustMin+0x78>
			if (min > 59)
			min=0;
     356:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <min>
     35a:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     35c:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     35e:	81 2f       	mov	r24, r17
     360:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     362:	89 30       	cpi	r24, 0x09	; 9
     364:	38 f4       	brcc	.+14     	; 0x374 <adjustMin+0x90>
     366:	81 e1       	ldi	r24, 0x11	; 17
     368:	9a e7       	ldi	r25, 0x7A	; 122
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <adjustMin+0x86>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <adjustMin+0x8c>
     370:	00 00       	nop
     372:	c2 cf       	rjmp	.-124    	; 0x2f8 <adjustMin+0x14>
     374:	e1 e1       	ldi	r30, 0x11	; 17
     376:	fa e7       	ldi	r31, 0x7A	; 122
     378:	31 97       	sbiw	r30, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <adjustMin+0x94>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <adjustMin+0x9a>
     37e:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)

}//adjustMin
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <adjustSec>:

//-----------------------------------
void adjustSec()
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	00 d0       	rcall	.+0      	; 0x39a <adjustSec+0xa>
     39a:	1f 92       	push	r1
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     3a0:	00 e0       	ldi	r16, 0x00	; 0
     3a2:	10 e0       	ldi	r17, 0x00	; 0
	char strSec[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3aa:	84 e1       	ldi	r24, 0x14	; 20
     3ac:	8a 95       	dec	r24
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <adjustSec+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (sec)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"sec: ");
     3b0:	8b ed       	ldi	r24, 0xDB	; 219
     3b2:	93 e0       	ldi	r25, 0x03	; 3
     3b4:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		itoa(sec, strSec, 10);
     3b8:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <sec>
     3bc:	4a e0       	ldi	r20, 0x0A	; 10
     3be:	be 01       	movw	r22, r28
     3c0:	6f 5f       	subi	r22, 0xFF	; 255
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	08 2e       	mov	r0, r24
     3c6:	00 0c       	add	r0, r0
     3c8:	99 0b       	sbc	r25, r25
     3ca:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strSec);
     3ce:	ce 01       	movw	r24, r28
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     3de:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e0:	e7 ea       	ldi	r30, 0xA7	; 167
     3e2:	f1 e6       	ldi	r31, 0x61	; 97
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <adjustSec+0x54>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <adjustSec+0x5a>
     3ea:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     3ec:	84 fd       	sbrc	r24, 4
     3ee:	0c c0       	rjmp	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			sec++;
     3f0:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <sec>
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
			if (sec > 59)
     3f6:	8c 33       	cpi	r24, 0x3C	; 60
     3f8:	24 f4       	brge	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			sec++;
     3fa:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <sec>
     3fe:	01 2f       	mov	r16, r17
     400:	03 c0       	rjmp	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			if (sec > 59)
			sec=0;
     402:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <sec>
     406:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     408:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     40a:	81 2f       	mov	r24, r17
     40c:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     40e:	89 30       	cpi	r24, 0x09	; 9
     410:	38 f4       	brcc	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     412:	81 e1       	ldi	r24, 0x11	; 17
     414:	9a e7       	ldi	r25, 0x7A	; 122
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41c:	00 00       	nop
     41e:	c2 cf       	rjmp	.-124    	; 0x3a4 <adjustSec+0x14>
     420:	e1 e1       	ldi	r30, 0x11	; 17
     422:	fa e7       	ldi	r31, 0x7A	; 122
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)

}//adjustSec
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <LCD_WriteDate>:
}//ShowDevices


//----------------------------------
void LCD_WriteDate()
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	00 d0       	rcall	.+0      	; 0x442 <LCD_WriteDate+0x6>
     442:	00 d0       	rcall	.+0      	; 0x444 <LCD_WriteDate+0x8>
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
	byte months, days, years;
	byte wkDays;

	DS1307_GetDate(&months,&days,&years);
     448:	ae 01       	movw	r20, r28
     44a:	4d 5f       	subi	r20, 0xFD	; 253
     44c:	5f 4f       	sbci	r21, 0xFF	; 255
     44e:	be 01       	movw	r22, r28
     450:	6e 5f       	subi	r22, 0xFE	; 254
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DS1307_GetDate>
	LCD_BCDDigits(months);
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_BCDDigits>
	//LCD_Char('/');
	lcd_write_character_4d('/');
     462:	8f e2       	ldi	r24, 0x2F	; 47
     464:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
	LCD_BCDDigits(days);
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_BCDDigits>
	//LCD_Char('/');
	lcd_write_character_4d('/');
     46e:	8f e2       	ldi	r24, 0x2F	; 47
     470:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
	LCD_BCDDigits(years);
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_BCDDigits>

	lcd_write_character_4d(' ');
     47a:	80 e2       	ldi	r24, 0x20	; 32
     47c:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
	DS1307_GetWkDay(&wkDays);
     480:	ce 01       	movw	r24, r28
     482:	04 96       	adiw	r24, 0x04	; 4
     484:	0e 94 11 01 	call	0x222	; 0x222 <DS1307_GetWkDay>
	LCD_BCDDigits(wkDays);
     488:	8c 81       	ldd	r24, Y+4	; 0x04
     48a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_BCDDigits>

}//LCD_WriteDate
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <LCD_WriteTime>:

//----------------------------------
void LCD_WriteTime()
{
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <LCD_WriteTime+0x6>
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
	byte hours, minutes, seconds;
	DS1307_GetTime(&hours,&minutes,&seconds);
     4a8:	ae 01       	movw	r20, r28
     4aa:	4d 5f       	subi	r20, 0xFD	; 253
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	be 01       	movw	r22, r28
     4b0:	6e 5f       	subi	r22, 0xFE	; 254
     4b2:	7f 4f       	sbci	r23, 0xFF	; 255
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	0e 94 c7 00 	call	0x18e	; 0x18e <DS1307_GetTime>
	LCD_BCDDigits(hours);
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_BCDDigits>
	//LCD_Char(':');
	lcd_write_character_4d(':');
     4c2:	8a e3       	ldi	r24, 0x3A	; 58
     4c4:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>

	LCD_BCDDigits(minutes);
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_BCDDigits>
	//LCD_Char(':');
	lcd_write_character_4d(':');
     4ce:	8a e3       	ldi	r24, 0x3A	; 58
     4d0:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>

	LCD_BCDDigits(seconds);
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_BCDDigits>
}//LCD_WriteTime
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <LCD_WriteTimeDate>:

//----------------------------------
void LCD_WriteTimeDate()
{
	//LCD_Line(0);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	LCD_WriteTime();
     4ec:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_WriteTime>
	LCD_blankChar(8);
     4f0:	88 e0       	ldi	r24, 0x08	; 8
     4f2:	0e 94 ed 04 	call	0x9da	; 0x9da <LCD_blankChar>

	//LCD_Line(1);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     4f6:	80 ec       	ldi	r24, 0xC0	; 192
     4f8:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	LCD_WriteDate();
     4fc:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteDate>
	LCD_blankChar(8);
     500:	88 e0       	ldi	r24, 0x08	; 8
     502:	0e 94 ed 04 	call	0x9da	; 0x9da <LCD_blankChar>
     506:	08 95       	ret

00000508 <LCD_WriteTimeDateTempHumid>:

//----------------------------------
void LCD_WriteTimeDateTempHumid()
{
	//LCD_Line(0);
	getDHT();
     508:	0e 94 89 00 	call	0x112	; 0x112 <getDHT>
	//_delay_ms(1000);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     50c:	80 e8       	ldi	r24, 0x80	; 128
     50e:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	LCD_WriteTime();
     512:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_WriteTime>
	LCD_blankChar(5);
     516:	85 e0       	ldi	r24, 0x05	; 5
     518:	0e 94 ed 04 	call	0x9da	; 0x9da <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strTemp);
     51c:	84 e7       	ldi	r24, 0x74	; 116
     51e:	94 e0       	ldi	r25, 0x04	; 4
     520:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
	//LCD_blankChar(1);
	lcd_write_character_4d('C');
     524:	83 e4       	ldi	r24, 0x43	; 67
     526:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>

	//LCD_Line(1);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     52a:	80 ec       	ldi	r24, 0xC0	; 192
     52c:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	LCD_WriteDate();
     530:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteDate>
	LCD_blankChar(2);
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	0e 94 ed 04 	call	0x9da	; 0x9da <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strHumid);
     53a:	81 e7       	ldi	r24, 0x71	; 113
     53c:	94 e0       	ldi	r25, 0x04	; 4
     53e:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
	//LCD_blankChar(1);
	//lcd_write_character_4d('%');
	lcd_write_character_4d(37);
     542:	85 e2       	ldi	r24, 0x25	; 37
     544:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
     548:	08 95       	ret

0000054a <I2C_Init>:
{
	I2C_Start(busAddr); // send bus address
	I2C_Write(deviceRegister); // first byte = device register address
	I2C_Write(data); // second byte = data for device register
	I2C_Stop();
}//I2C_WriteRegister
     54a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     54e:	8d ef       	ldi	r24, 0xFD	; 253
     550:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     554:	08 95       	ret

00000556 <I2C_Detect>:
     556:	94 ea       	ldi	r25, 0xA4	; 164
     558:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     55c:	ec eb       	ldi	r30, 0xBC	; 188
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	90 81       	ld	r25, Z
     562:	99 23       	and	r25, r25
     564:	ec f7       	brge	.-6      	; 0x560 <I2C_Detect+0xa>
     566:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     56a:	84 e8       	ldi	r24, 0x84	; 132
     56c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     570:	ec eb       	ldi	r30, 0xBC	; 188
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	88 23       	and	r24, r24
     578:	ec f7       	brge	.-6      	; 0x574 <I2C_Detect+0x1e>
     57a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     57e:	98 7f       	andi	r25, 0xF8	; 248
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	98 31       	cpi	r25, 0x18	; 24
     584:	09 f0       	breq	.+2      	; 0x588 <I2C_Detect+0x32>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	08 95       	ret

0000058a <I2C_Write>:
     58a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     58e:	84 e8       	ldi	r24, 0x84	; 132
     590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     594:	ec eb       	ldi	r30, 0xBC	; 188
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	88 23       	and	r24, r24
     59c:	ec f7       	brge	.-6      	; 0x598 <I2C_Write+0xe>
     59e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a2:	98 7f       	andi	r25, 0xF8	; 248
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	98 32       	cpi	r25, 0x28	; 40
     5a8:	09 f4       	brne	.+2      	; 0x5ac <I2C_Write+0x22>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret

000005ae <I2C_ReadNACK>:
     5ae:	84 e8       	ldi	r24, 0x84	; 132
     5b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5b4:	ec eb       	ldi	r30, 0xBC	; 188
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	88 23       	and	r24, r24
     5bc:	ec f7       	brge	.-6      	; 0x5b8 <I2C_ReadNACK+0xa>
     5be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5c2:	08 95       	ret

000005c4 <I2C_ReadRegister>:

//----------------------------------
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	c8 2f       	mov	r28, r24
     5ca:	d6 2f       	mov	r29, r22
}//I2C_FindDevice

//----------------------------------
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
     5cc:	0e 94 ab 02 	call	0x556	; 0x556 <I2C_Detect>
//----------------------------------
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
     5d0:	8d 2f       	mov	r24, r29
     5d2:	0e 94 c5 02 	call	0x58a	; 0x58a <I2C_Write>
}//I2C_FindDevice

//----------------------------------
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	8c 0f       	add	r24, r28
     5da:	0e 94 ab 02 	call	0x556	; 0x556 <I2C_Detect>
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
	I2C_Start(busAddr+READ); // restart as a read operation
	data = I2C_ReadNACK(); // read the register data
     5de:	0e 94 d7 02 	call	0x5ae	; 0x5ae <I2C_ReadNACK>
	I2C_Stop(); // stop
     5e2:	94 e9       	ldi	r25, 0x94	; 148
     5e4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	return data;
}//I2C_ReadRegister
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <__vector_3>:
    EIMSK = 0x00;

    TIMSK0 = 0x02; //timer 0 interrupt sources

    PRR = 0x00; //power controller
    sei(); //re-enable interrupts
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	2f 93       	push	r18
     5fa:	3f 93       	push	r19
     5fc:	4f 93       	push	r20
     5fe:	5f 93       	push	r21
     600:	6f 93       	push	r22
     602:	7f 93       	push	r23
     604:	8f 93       	push	r24
     606:	9f 93       	push	r25
     608:	af 93       	push	r26
     60a:	bf 93       	push	r27
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
     614:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <btcnt>
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	98 0f       	add	r25, r24
     61c:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <btcnt>
     620:	80 fd       	sbrc	r24, 0
     622:	2f c0       	rjmp	.+94     	; 0x682 <__vector_3+0x94>
     624:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <pwrOn>
     628:	81 11       	cpse	r24, r1
     62a:	0d c0       	rjmp	.+26     	; 0x646 <__vector_3+0x58>
     62c:	0e 94 49 07 	call	0xe92	; 0xe92 <makePDasOutput>
     630:	0e 94 92 04 	call	0x924	; 0x924 <lcd_init_4d>
     634:	83 ec       	ldi	r24, 0xC3	; 195
     636:	99 e0       	ldi	r25, 0x09	; 9
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <__vector_3+0x4a>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <__vector_3+0x50>
     63e:	00 00       	nop
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <pwrOn>
     646:	1c 9b       	sbis	0x03, 4	; 3
     648:	16 c0       	rjmp	.+44     	; 0x676 <__vector_3+0x88>
     64a:	cb e6       	ldi	r28, 0x6B	; 107
     64c:	d0 e0       	ldi	r29, 0x00	; 0
     64e:	88 81       	ld	r24, Y
     650:	8f 7e       	andi	r24, 0xEF	; 239
     652:	88 83       	st	Y, r24
     654:	81 ee       	ldi	r24, 0xE1	; 225
     656:	94 e0       	ldi	r25, 0x04	; 4
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <__vector_3+0x6a>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <__vector_3+0x70>
     65e:	00 00       	nop
     660:	0e 94 75 09 	call	0x12ea	; 0x12ea <countButton>
     664:	88 81       	ld	r24, Y
     666:	80 61       	ori	r24, 0x10	; 16
     668:	88 83       	st	Y, r24
     66a:	81 ee       	ldi	r24, 0xE1	; 225
     66c:	94 e0       	ldi	r25, 0x04	; 4
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <__vector_3+0x80>
     672:	00 c0       	rjmp	.+0      	; 0x674 <__vector_3+0x86>
     674:	00 00       	nop
     676:	8f e4       	ldi	r24, 0x4F	; 79
     678:	93 ec       	ldi	r25, 0xC3	; 195
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <__vector_3+0x8c>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <__vector_3+0x92>
     680:	00 00       	nop
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	bf 91       	pop	r27
     68c:	af 91       	pop	r26
     68e:	9f 91       	pop	r25
     690:	8f 91       	pop	r24
     692:	7f 91       	pop	r23
     694:	6f 91       	pop	r22
     696:	5f 91       	pop	r21
     698:	4f 91       	pop	r20
     69a:	3f 91       	pop	r19
     69c:	2f 91       	pop	r18
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <initINT>:
     6a8:	f8 94       	cli
     6aa:	e8 e6       	ldi	r30, 0x68	; 104
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	81 60       	ori	r24, 0x01	; 1
     6b2:	80 83       	st	Z, r24
     6b4:	eb e6       	ldi	r30, 0x6B	; 107
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	80 61       	ori	r24, 0x10	; 16
     6bc:	80 83       	st	Z, r24
     6be:	78 94       	sei
     6c0:	08 95       	ret

000006c2 <proceedClock>:

//----------------------------------
void proceedClock()
{
    //WDT interrupt occurs every 8 seconds
    sec += 8;
     6c2:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <sec>
     6c6:	88 5f       	subi	r24, 0xF8	; 248
     6c8:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <sec>
    accumulatedSec += 8;
     6cc:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <accumulatedSec>
     6d0:	28 5f       	subi	r18, 0xF8	; 248
     6d2:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <accumulatedSec>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
     6d6:	8c 33       	cpi	r24, 0x3C	; 60
     6d8:	5c f0       	brlt	.+22     	; 0x6f0 <proceedClock+0x2e>
    {
        sec%=60;
        min++;
     6da:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <min>
     6de:	9f 5f       	subi	r25, 0xFF	; 255
     6e0:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <min>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
    {
        sec%=60;
     6e4:	6c e3       	ldi	r22, 0x3C	; 60
     6e6:	0e 94 10 0a 	call	0x1420	; 0x1420 <__divmodqi4>
        min++;
        sec += 2;
     6ea:	9e 5f       	subi	r25, 0xFE	; 254
     6ec:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <sec>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
     6f0:	2c 33       	cpi	r18, 0x3C	; 60
     6f2:	64 f0       	brlt	.+24     	; 0x70c <proceedClock+0x4a>
    {
        accumulatedSec%=60;
        accumulatedMin++;
     6f4:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <accumulatedMin>
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <accumulatedMin>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
    {
        accumulatedSec%=60;
     6fe:	82 2f       	mov	r24, r18
     700:	6c e3       	ldi	r22, 0x3C	; 60
     702:	0e 94 10 0a 	call	0x1420	; 0x1420 <__divmodqi4>
        accumulatedMin++;
        accumulatedSec += 2;
     706:	9e 5f       	subi	r25, 0xFE	; 254
     708:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <accumulatedSec>
    }

    //real-time fetched from compiled time constant __TIME__
    //calculate hours
    if (min >= 60)
     70c:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <min>
     710:	8c 33       	cpi	r24, 0x3C	; 60
     712:	54 f0       	brlt	.+20     	; 0x728 <proceedClock+0x66>
    {
        min%=60;
     714:	6c e3       	ldi	r22, 0x3C	; 60
     716:	0e 94 10 0a 	call	0x1420	; 0x1420 <__divmodqi4>
     71a:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <min>
        hour++;
     71e:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <hour>
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <hour>
    }
    //system run-time acculated time
    //calculate hours
    //if ((accumulatedMin == 60) && (hourlyAdjusted == 0))
    if (accumulatedMin == 60)
     728:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <accumulatedMin>
     72c:	8c 33       	cpi	r24, 0x3C	; 60
     72e:	61 f4       	brne	.+24     	; 0x748 <proceedClock+0x86>
    {
        // adjust time by experiments
        //hourlyAdjusted = 1;
        sec -= 20;
     730:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <sec>
     734:	84 51       	subi	r24, 0x14	; 20
     736:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <sec>
        accumulatedMin = 0;
     73a:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <accumulatedMin>
        accumulatedHour++;
     73e:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <accumulatedHour>
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <accumulatedHour>
    }
    /*
    if (accumulatedMin == 59)
        hourlyAdjusted = 0;
    */
    if (hour >= 24)
     748:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <hour>
     74c:	88 31       	cpi	r24, 0x18	; 24
     74e:	04 f1       	brlt	.+64     	; 0x790 <proceedClock+0xce>
    {
        hour=0;
     750:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <hour>
        date++;
     754:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <date>
     758:	8f 5f       	subi	r24, 0xFF	; 255
     75a:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <date>
        day++;
     75e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <day>
     762:	8f 5f       	subi	r24, 0xFF	; 255
        if (day >= 7)
     764:	87 30       	cpi	r24, 0x07	; 7
     766:	1c f4       	brge	.+6      	; 0x76e <proceedClock+0xac>
    */
    if (hour >= 24)
    {
        hour=0;
        date++;
        day++;
     768:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <day>
     76c:	11 c0       	rjmp	.+34     	; 0x790 <proceedClock+0xce>
        if (day >= 7)
            day %= 7;
     76e:	93 e9       	ldi	r25, 0x93	; 147
     770:	89 02       	muls	r24, r25
     772:	91 2d       	mov	r25, r1
     774:	11 24       	eor	r1, r1
     776:	98 0f       	add	r25, r24
     778:	95 95       	asr	r25
     77a:	95 95       	asr	r25
     77c:	87 fd       	sbrc	r24, 7
     77e:	93 95       	inc	r25
     780:	29 2f       	mov	r18, r25
     782:	22 0f       	add	r18, r18
     784:	22 0f       	add	r18, r18
     786:	22 0f       	add	r18, r18
     788:	29 1b       	sub	r18, r25
     78a:	82 1b       	sub	r24, r18
     78c:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <day>
    }
    switch (month)
     790:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <month>
     794:	82 2f       	mov	r24, r18
     796:	02 2e       	mov	r0, r18
     798:	00 0c       	add	r0, r0
     79a:	99 0b       	sbc	r25, r25
     79c:	aa 0b       	sbc	r26, r26
     79e:	bb 0b       	sbc	r27, r27
     7a0:	fc 01       	movw	r30, r24
     7a2:	31 97       	sbiw	r30, 0x01	; 1
     7a4:	ec 30       	cpi	r30, 0x0C	; 12
     7a6:	f1 05       	cpc	r31, r1
     7a8:	60 f4       	brcc	.+24     	; 0x7c2 <proceedClock+0x100>
     7aa:	ec 5c       	subi	r30, 0xCC	; 204
     7ac:	ff 4f       	sbci	r31, 0xFF	; 255
     7ae:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__tablejump2__>
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            monthEndDate = 31;
     7b2:	8f e1       	ldi	r24, 0x1F	; 31
     7b4:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <monthEndDate>
            break;
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <proceedClock+0x106>
        case 2:
            monthEndDate = 28;
     7ba:	8c e1       	ldi	r24, 0x1C	; 28
     7bc:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <monthEndDate>
            break;
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <proceedClock+0x106>
        default:
            monthEndDate = 30;
     7c2:	8e e1       	ldi	r24, 0x1E	; 30
     7c4:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <monthEndDate>
    }//switch (month)

    if (date > monthEndDate)
     7c8:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <date>
     7cc:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <monthEndDate>
     7d0:	89 17       	cp	r24, r25
     7d2:	34 f4       	brge	.+12     	; 0x7e0 <proceedClock+0x11e>
    {
        date=1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <date>
        month++;
     7da:	2f 5f       	subi	r18, 0xFF	; 255
     7dc:	20 93 69 04 	sts	0x0469, r18	; 0x800469 <month>
    }

    if (month > 12)
     7e0:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <month>
     7e4:	8d 30       	cpi	r24, 0x0D	; 13
     7e6:	44 f0       	brlt	.+16     	; 0x7f8 <proceedClock+0x136>
    {
        month=1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
        year++;
     7ee:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <year>
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <year>
     7f8:	08 95       	ret

000007fa <__vector_6>:
	}//if ((btcnt++ % 2) == 0)
}//ISR(PCINT0_vect)

//-----------------------------------
ISR(WDT_vect)
{
     7fa:	1f 92       	push	r1
     7fc:	0f 92       	push	r0
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	0f 92       	push	r0
     802:	11 24       	eor	r1, r1
     804:	2f 93       	push	r18
     806:	3f 93       	push	r19
     808:	4f 93       	push	r20
     80a:	5f 93       	push	r21
     80c:	6f 93       	push	r22
     80e:	7f 93       	push	r23
     810:	8f 93       	push	r24
     812:	9f 93       	push	r25
     814:	af 93       	push	r26
     816:	bf 93       	push	r27
     818:	ef 93       	push	r30
     81a:	ff 93       	push	r31
    //PORTB |= _BV(PB4);
    proceedClock();
     81c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <proceedClock>
    lcd_dispWords(wd%MAXWORDCNT);
     820:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <wd>
     824:	9d ec       	ldi	r25, 0xCD	; 205
     826:	89 9f       	mul	r24, r25
     828:	91 2d       	mov	r25, r1
     82a:	11 24       	eor	r1, r1
     82c:	96 95       	lsr	r25
     82e:	96 95       	lsr	r25
     830:	96 95       	lsr	r25
     832:	99 0f       	add	r25, r25
     834:	29 2f       	mov	r18, r25
     836:	22 0f       	add	r18, r18
     838:	22 0f       	add	r18, r18
     83a:	92 0f       	add	r25, r18
     83c:	89 1b       	sub	r24, r25
     83e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <lcd_dispWords>
    wd++;
     842:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <wd>
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <wd>
    //lcd_dispRealClock();
    //PORTB &= ~_BV(PB4);
}//ISR(WDT_vect)
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	bf 91       	pop	r27
     852:	af 91       	pop	r26
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	7f 91       	pop	r23
     85a:	6f 91       	pop	r22
     85c:	5f 91       	pop	r21
     85e:	4f 91       	pop	r20
     860:	3f 91       	pop	r19
     862:	2f 91       	pop	r18
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~_BV(lcd_D7_bit);                        // assume that data is '0'
     86e:	5f 98       	cbi	0x0b, 7	; 11
    if (theByte & 1<<7) lcd_D7_port |= _BV(lcd_D7_bit);     // make data = '1' if necessary
     870:	88 23       	and	r24, r24
     872:	0c f4       	brge	.+2      	; 0x876 <lcd_write_4+0x8>
     874:	5f 9a       	sbi	0x0b, 7	; 11

    lcd_D6_port &= ~_BV(lcd_D6_bit);                        // repeat for each data bit
     876:	5e 98       	cbi	0x0b, 6	; 11
    if (theByte & 1<<6) lcd_D6_port |= _BV(lcd_D6_bit);
     878:	86 fd       	sbrc	r24, 6
     87a:	5e 9a       	sbi	0x0b, 6	; 11

    lcd_D5_port &= ~_BV(lcd_D5_bit);
     87c:	5d 98       	cbi	0x0b, 5	; 11
    if (theByte & 1<<5) lcd_D5_port |= _BV(lcd_D5_bit);
     87e:	85 fd       	sbrc	r24, 5
     880:	5d 9a       	sbi	0x0b, 5	; 11

    lcd_D4_port &= ~_BV(lcd_D4_bit);
     882:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<4) lcd_D4_port |= _BV(lcd_D4_bit);
     884:	84 fd       	sbrc	r24, 4
     886:	5c 9a       	sbi	0x0b, 4	; 11

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= _BV(lcd_E_bit);                   // Enable pin high
     888:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88a:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~_BV(lcd_E_bit);                  // Enable pin low
     88c:	5b 98       	cbi	0x0b, 3	; 11
     88e:	00 00       	nop
     890:	08 95       	ret

00000892 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     892:	cf 93       	push	r28
     894:	c8 2f       	mov	r28, r24
    lcd_RS_port |= _BV(lcd_RS_bit);                 // select the Data Register (RS high)
     896:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     898:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     89a:	0e 94 37 04 	call	0x86e	; 0x86e <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     89e:	8c 2f       	mov	r24, r28
     8a0:	82 95       	swap	r24
     8a2:	80 7f       	andi	r24, 0xF0	; 240
     8a4:	0e 94 37 04 	call	0x86e	; 0x86e <lcd_write_4>
}
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <lcd_write_string_4d+0xa>
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     8bc:	1a 82       	std	Y+2, r1	; 0x02
     8be:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     8c0:	e9 81       	ldd	r30, Y+1	; 0x01
     8c2:	fa 81       	ldd	r31, Y+2	; 0x02
     8c4:	e8 0f       	add	r30, r24
     8c6:	f9 1f       	adc	r31, r25
     8c8:	80 81       	ld	r24, Z
     8ca:	88 23       	and	r24, r24
     8cc:	b9 f0       	breq	.+46     	; 0x8fc <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     8ce:	e9 81       	ldd	r30, Y+1	; 0x01
     8d0:	fa 81       	ldd	r31, Y+2	; 0x02
     8d2:	e0 0f       	add	r30, r16
     8d4:	f1 1f       	adc	r31, r17
     8d6:	80 81       	ld	r24, Z
     8d8:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
        i++;
     8dc:	29 81       	ldd	r18, Y+1	; 0x01
     8de:	3a 81       	ldd	r19, Y+2	; 0x02
     8e0:	2f 5f       	subi	r18, 0xFF	; 255
     8e2:	3f 4f       	sbci	r19, 0xFF	; 255
     8e4:	3a 83       	std	Y+2, r19	; 0x02
     8e6:	29 83       	std	Y+1, r18	; 0x01
     8e8:	84 e1       	ldi	r24, 0x14	; 20
     8ea:	8a 95       	dec	r24
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <lcd_write_string_4d+0x3e>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     8ee:	e9 81       	ldd	r30, Y+1	; 0x01
     8f0:	fa 81       	ldd	r31, Y+2	; 0x02
     8f2:	e0 0f       	add	r30, r16
     8f4:	f1 1f       	adc	r31, r17
     8f6:	80 81       	ld	r24, Z
     8f8:	81 11       	cpse	r24, r1
     8fa:	e9 cf       	rjmp	.-46     	; 0x8ce <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(DELAY_INST);                              // 40 uS delay (min)
    }
}
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     90a:	cf 93       	push	r28
     90c:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     90e:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     910:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     912:	0e 94 37 04 	call	0x86e	; 0x86e <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     916:	8c 2f       	mov	r24, r28
     918:	82 95       	swap	r24
     91a:	80 7f       	andi	r24, 0xF0	; 240
     91c:	0e 94 37 04 	call	0x86e	; 0x86e <lcd_write_4>
}
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     924:	8f e0       	ldi	r24, 0x0F	; 15
     926:	97 e2       	ldi	r25, 0x27	; 39
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <lcd_init_4d+0x4>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <lcd_init_4d+0xa>
     92e:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     930:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     932:	5b 98       	cbi	0x0b, 3	; 11

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     934:	80 e3       	ldi	r24, 0x30	; 48
     936:	0e 94 37 04 	call	0x86e	; 0x86e <lcd_write_4>
     93a:	81 ee       	ldi	r24, 0xE1	; 225
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <lcd_init_4d+0x1a>
     942:	00 c0       	rjmp	.+0      	; 0x944 <lcd_init_4d+0x20>
     944:	00 00       	nop
    //_delay_ms(10);                                  // 4.1 mS delay (min)
	_delay_ms(5); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     946:	80 e3       	ldi	r24, 0x30	; 48
     948:	0e 94 37 04 	call	0x86e	; 0x86e <lcd_write_4>
     94c:	8f e2       	ldi	r24, 0x2F	; 47
     94e:	95 e7       	ldi	r25, 0x75	; 117
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <lcd_init_4d+0x2c>
     954:	00 c0       	rjmp	.+0      	; 0x956 <lcd_init_4d+0x32>
     956:	00 00       	nop
    //_delay_us(200);                                 // 100uS delay (min)
	_delay_ms(120); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     958:	80 e3       	ldi	r24, 0x30	; 48
     95a:	0e 94 37 04 	call	0x86e	; 0x86e <lcd_write_4>
     95e:	83 ec       	ldi	r24, 0xC3	; 195
     960:	99 e0       	ldi	r25, 0x09	; 9
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <lcd_init_4d+0x3e>
     966:	00 c0       	rjmp	.+0      	; 0x968 <lcd_init_4d+0x44>
     968:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     96a:	88 e2       	ldi	r24, 0x28	; 40
     96c:	0e 94 37 04 	call	0x86e	; 0x86e <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     970:	94 e1       	ldi	r25, 0x14	; 20
     972:	9a 95       	dec	r25
     974:	f1 f7       	brne	.-4      	; 0x972 <lcd_init_4d+0x4e>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     976:	88 e2       	ldi	r24, 0x28	; 40
     978:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     97c:	84 e1       	ldi	r24, 0x14	; 20
     97e:	8a 95       	dec	r24
     980:	f1 f7       	brne	.-4      	; 0x97e <lcd_init_4d+0x5a>
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     988:	94 e1       	ldi	r25, 0x14	; 20
     98a:	9a 95       	dec	r25
     98c:	f1 f7       	brne	.-4      	; 0x98a <lcd_init_4d+0x66>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     994:	87 ee       	ldi	r24, 0xE7	; 231
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <lcd_init_4d+0x74>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <lcd_init_4d+0x7a>
     99e:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     9a0:	86 e0       	ldi	r24, 0x06	; 6
     9a2:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a6:	94 e1       	ldi	r25, 0x14	; 20
     9a8:	9a 95       	dec	r25
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_init_4d+0x84>

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     9ac:	8c e0       	ldi	r24, 0x0C	; 12
     9ae:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     9b2:	84 e1       	ldi	r24, 0x14	; 20
     9b4:	8a 95       	dec	r24
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <lcd_init_4d+0x90>
     9b8:	08 95       	ret

000009ba <LCD_BCDDigits>:
	_delay_ms(1000);

	lcd_write_instruction_4d(lcd_DisplayOff);
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	_delay_ms(1000);
	lcd_write_instruction_4d(lcd_DisplayOn);
     9ba:	cf 93       	push	r28
     9bc:	c8 2f       	mov	r28, r24
     9be:	82 95       	swap	r24
     9c0:	8f 70       	andi	r24, 0x0F	; 15
     9c2:	80 5d       	subi	r24, 0xD0	; 208
     9c4:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
     9c8:	8c 2f       	mov	r24, r28
     9ca:	8f 70       	andi	r24, 0x0F	; 15
     9cc:	80 5d       	subi	r24, 0xD0	; 208
     9ce:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <turnOnLCDBacklight>:
     9d6:	28 98       	cbi	0x05, 0	; 5
     9d8:	08 95       	ret

000009da <LCD_blankChar>:
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	88 23       	and	r24, r24
     9e0:	41 f0       	breq	.+16     	; 0x9f2 <LCD_blankChar+0x18>
     9e2:	d8 2f       	mov	r29, r24
     9e4:	c0 e0       	ldi	r28, 0x00	; 0
     9e6:	80 e2       	ldi	r24, 0x20	; 32
     9e8:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
     9ec:	cf 5f       	subi	r28, 0xFF	; 255
     9ee:	cd 13       	cpse	r28, r29
     9f0:	fa cf       	rjmp	.-12     	; 0x9e6 <LCD_blankChar+0xc>
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <turnOffLCDBacklight>:
     9f8:	28 9a       	sbi	0x05, 0	; 5
     9fa:	08 95       	ret

000009fc <lcd_dispRealClock>:
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	6c 97       	sbiw	r28, 0x1c	; 28
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	80 e8       	ldi	r24, 0x80	; 128
     a12:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     a16:	84 e1       	ldi	r24, 0x14	; 20
     a18:	8a 95       	dec	r24
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <lcd_dispRealClock+0x1c>
     a1c:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <hour>
     a20:	4a e0       	ldi	r20, 0x0A	; 10
     a22:	be 01       	movw	r22, r28
     a24:	69 5f       	subi	r22, 0xF9	; 249
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	08 2e       	mov	r0, r24
     a2a:	00 0c       	add	r0, r0
     a2c:	99 0b       	sbc	r25, r25
     a2e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     a32:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <min>
     a36:	4a e0       	ldi	r20, 0x0A	; 10
     a38:	be 01       	movw	r22, r28
     a3a:	6c 5f       	subi	r22, 0xFC	; 252
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	08 2e       	mov	r0, r24
     a40:	00 0c       	add	r0, r0
     a42:	99 0b       	sbc	r25, r25
     a44:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     a48:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <sec>
     a4c:	4a e0       	ldi	r20, 0x0A	; 10
     a4e:	be 01       	movw	r22, r28
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	08 2e       	mov	r0, r24
     a56:	00 0c       	add	r0, r0
     a58:	99 0b       	sbc	r25, r25
     a5a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     a5e:	ce 01       	movw	r24, r28
     a60:	07 96       	adiw	r24, 0x07	; 7
     a62:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     a66:	88 e0       	ldi	r24, 0x08	; 8
     a68:	94 e0       	ldi	r25, 0x04	; 4
     a6a:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     a6e:	ce 01       	movw	r24, r28
     a70:	04 96       	adiw	r24, 0x04	; 4
     a72:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	94 e0       	ldi	r25, 0x04	; 4
     a7a:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     a7e:	ce 01       	movw	r24, r28
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     a86:	86 ef       	ldi	r24, 0xF6	; 246
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     a8e:	84 e1       	ldi	r24, 0x14	; 20
     a90:	8a 95       	dec	r24
     a92:	f1 f7       	brne	.-4      	; 0xa90 <lcd_dispRealClock+0x94>
     a94:	80 ec       	ldi	r24, 0xC0	; 192
     a96:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     a9a:	84 e1       	ldi	r24, 0x14	; 20
     a9c:	8a 95       	dec	r24
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <lcd_dispRealClock+0xa0>
     aa0:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <year>
     aa4:	4a e0       	ldi	r20, 0x0A	; 10
     aa6:	be 01       	movw	r22, r28
     aa8:	66 5f       	subi	r22, 0xF6	; 246
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	08 2e       	mov	r0, r24
     aae:	00 0c       	add	r0, r0
     ab0:	99 0b       	sbc	r25, r25
     ab2:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     ab6:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <month>
     aba:	4a e0       	ldi	r20, 0x0A	; 10
     abc:	be 01       	movw	r22, r28
     abe:	63 5f       	subi	r22, 0xF3	; 243
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	08 2e       	mov	r0, r24
     ac4:	00 0c       	add	r0, r0
     ac6:	99 0b       	sbc	r25, r25
     ac8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     acc:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <date>
     ad0:	4a e0       	ldi	r20, 0x0A	; 10
     ad2:	be 01       	movw	r22, r28
     ad4:	60 5f       	subi	r22, 0xF0	; 240
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	08 2e       	mov	r0, r24
     ada:	00 0c       	add	r0, r0
     adc:	99 0b       	sbc	r25, r25
     ade:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     ae2:	ce 01       	movw	r24, r28
     ae4:	0a 96       	adiw	r24, 0x0a	; 10
     ae6:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     af2:	ce 01       	movw	r24, r28
     af4:	0d 96       	adiw	r24, 0x0d	; 13
     af6:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	94 e0       	ldi	r25, 0x04	; 4
     afe:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     b02:	ce 01       	movw	r24, r28
     b04:	40 96       	adiw	r24, 0x10	; 16
     b06:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	94 e0       	ldi	r25, 0x04	; 4
     b0e:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     b12:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <day>
     b16:	8e 2f       	mov	r24, r30
     b18:	ee 0f       	add	r30, r30
     b1a:	99 0b       	sbc	r25, r25
     b1c:	aa 0b       	sbc	r26, r26
     b1e:	bb 0b       	sbc	r27, r27
     b20:	87 30       	cpi	r24, 0x07	; 7
     b22:	91 05       	cpc	r25, r1
     b24:	08 f0       	brcs	.+2      	; 0xb28 <lcd_dispRealClock+0x12c>
     b26:	43 c0       	rjmp	.+134    	; 0xbae <lcd_dispRealClock+0x1b2>
     b28:	fc 01       	movw	r30, r24
     b2a:	e0 5c       	subi	r30, 0xC0	; 192
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__tablejump2__>
     b32:	83 e5       	ldi	r24, 0x53	; 83
     b34:	95 e7       	ldi	r25, 0x75	; 117
     b36:	ae e6       	ldi	r26, 0x6E	; 110
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	8b 8b       	std	Y+19, r24	; 0x13
     b3c:	9c 8b       	std	Y+20, r25	; 0x14
     b3e:	ad 8b       	std	Y+21, r26	; 0x15
     b40:	be 8b       	std	Y+22, r27	; 0x16
     b42:	35 c0       	rjmp	.+106    	; 0xbae <lcd_dispRealClock+0x1b2>
     b44:	8d e4       	ldi	r24, 0x4D	; 77
     b46:	9f e6       	ldi	r25, 0x6F	; 111
     b48:	ae e6       	ldi	r26, 0x6E	; 110
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	8b 8b       	std	Y+19, r24	; 0x13
     b4e:	9c 8b       	std	Y+20, r25	; 0x14
     b50:	ad 8b       	std	Y+21, r26	; 0x15
     b52:	be 8b       	std	Y+22, r27	; 0x16
     b54:	2c c0       	rjmp	.+88     	; 0xbae <lcd_dispRealClock+0x1b2>
     b56:	84 e5       	ldi	r24, 0x54	; 84
     b58:	95 e7       	ldi	r25, 0x75	; 117
     b5a:	a5 e6       	ldi	r26, 0x65	; 101
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	8b 8b       	std	Y+19, r24	; 0x13
     b60:	9c 8b       	std	Y+20, r25	; 0x14
     b62:	ad 8b       	std	Y+21, r26	; 0x15
     b64:	be 8b       	std	Y+22, r27	; 0x16
     b66:	23 c0       	rjmp	.+70     	; 0xbae <lcd_dispRealClock+0x1b2>
     b68:	87 e5       	ldi	r24, 0x57	; 87
     b6a:	95 e6       	ldi	r25, 0x65	; 101
     b6c:	a4 e6       	ldi	r26, 0x64	; 100
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	8b 8b       	std	Y+19, r24	; 0x13
     b72:	9c 8b       	std	Y+20, r25	; 0x14
     b74:	ad 8b       	std	Y+21, r26	; 0x15
     b76:	be 8b       	std	Y+22, r27	; 0x16
     b78:	1a c0       	rjmp	.+52     	; 0xbae <lcd_dispRealClock+0x1b2>
     b7a:	84 e5       	ldi	r24, 0x54	; 84
     b7c:	98 e6       	ldi	r25, 0x68	; 104
     b7e:	a5 e7       	ldi	r26, 0x75	; 117
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	8b 8b       	std	Y+19, r24	; 0x13
     b84:	9c 8b       	std	Y+20, r25	; 0x14
     b86:	ad 8b       	std	Y+21, r26	; 0x15
     b88:	be 8b       	std	Y+22, r27	; 0x16
     b8a:	11 c0       	rjmp	.+34     	; 0xbae <lcd_dispRealClock+0x1b2>
     b8c:	86 e4       	ldi	r24, 0x46	; 70
     b8e:	92 e7       	ldi	r25, 0x72	; 114
     b90:	a9 e6       	ldi	r26, 0x69	; 105
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	8b 8b       	std	Y+19, r24	; 0x13
     b96:	9c 8b       	std	Y+20, r25	; 0x14
     b98:	ad 8b       	std	Y+21, r26	; 0x15
     b9a:	be 8b       	std	Y+22, r27	; 0x16
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <lcd_dispRealClock+0x1b2>
     b9e:	83 e5       	ldi	r24, 0x53	; 83
     ba0:	91 e6       	ldi	r25, 0x61	; 97
     ba2:	a4 e7       	ldi	r26, 0x74	; 116
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	8b 8b       	std	Y+19, r24	; 0x13
     ba8:	9c 8b       	std	Y+20, r25	; 0x14
     baa:	ad 8b       	std	Y+21, r26	; 0x15
     bac:	be 8b       	std	Y+22, r27	; 0x16
     bae:	ce 01       	movw	r24, r28
     bb0:	43 96       	adiw	r24, 0x13	; 19
     bb2:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     bb6:	8c ef       	ldi	r24, 0xFC	; 252
     bb8:	93 e0       	ldi	r25, 0x03	; 3
     bba:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     bbe:	84 e1       	ldi	r24, 0x14	; 20
     bc0:	8a 95       	dec	r24
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <lcd_dispRealClock+0x1c4>
     bc4:	6c 96       	adiw	r28, 0x1c	; 28
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <lcd_dispAccumulatedTime>:
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	29 97       	sbiw	r28, 0x09	; 9
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	80 ec       	ldi	r24, 0xC0	; 192
     bec:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     bf0:	84 e1       	ldi	r24, 0x14	; 20
     bf2:	8a 95       	dec	r24
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <lcd_dispAccumulatedTime+0x1c>
     bf6:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <accumulatedHour>
     bfa:	4a e0       	ldi	r20, 0x0A	; 10
     bfc:	be 01       	movw	r22, r28
     bfe:	69 5f       	subi	r22, 0xF9	; 249
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	08 2e       	mov	r0, r24
     c04:	00 0c       	add	r0, r0
     c06:	99 0b       	sbc	r25, r25
     c08:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     c0c:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <accumulatedMin>
     c10:	4a e0       	ldi	r20, 0x0A	; 10
     c12:	be 01       	movw	r22, r28
     c14:	6c 5f       	subi	r22, 0xFC	; 252
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	08 2e       	mov	r0, r24
     c1a:	00 0c       	add	r0, r0
     c1c:	99 0b       	sbc	r25, r25
     c1e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     c22:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <accumulatedSec>
     c26:	4a e0       	ldi	r20, 0x0A	; 10
     c28:	be 01       	movw	r22, r28
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	08 2e       	mov	r0, r24
     c30:	00 0c       	add	r0, r0
     c32:	99 0b       	sbc	r25, r25
     c34:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__itoa_ncheck>
     c38:	ce 01       	movw	r24, r28
     c3a:	07 96       	adiw	r24, 0x07	; 7
     c3c:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     c40:	88 e0       	ldi	r24, 0x08	; 8
     c42:	94 e0       	ldi	r25, 0x04	; 4
     c44:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     c48:	ce 01       	movw	r24, r28
     c4a:	04 96       	adiw	r24, 0x04	; 4
     c4c:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	94 e0       	ldi	r25, 0x04	; 4
     c54:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     c58:	ce 01       	movw	r24, r28
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     c60:	8a ef       	ldi	r24, 0xFA	; 250
     c62:	93 e0       	ldi	r25, 0x03	; 3
     c64:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     c68:	84 e1       	ldi	r24, 0x14	; 20
     c6a:	8a 95       	dec	r24
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <lcd_dispAccumulatedTime+0x94>
     c6e:	29 96       	adiw	r28, 0x09	; 9
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <lcd_dispProgInfo>:
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     c86:	24 e1       	ldi	r18, 0x14	; 20
     c88:	2a 95       	dec	r18
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <lcd_dispProgInfo+0x8>
     c8c:	8f e3       	ldi	r24, 0x3F	; 63
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     c94:	80 ec       	ldi	r24, 0xC0	; 192
     c96:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     c9a:	84 e1       	ldi	r24, 0x14	; 20
     c9c:	8a 95       	dec	r24
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <lcd_dispProgInfo+0x1c>
     ca0:	80 e3       	ldi	r24, 0x30	; 48
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     ca8:	9f e3       	ldi	r25, 0x3F	; 63
     caa:	2d e0       	ldi	r18, 0x0D	; 13
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	91 50       	subi	r25, 0x01	; 1
     cb0:	20 40       	sbci	r18, 0x00	; 0
     cb2:	80 40       	sbci	r24, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <lcd_dispProgInfo+0x2e>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <lcd_dispProgInfo+0x38>
     cb8:	00 00       	nop
     cba:	80 ec       	ldi	r24, 0xC0	; 192
     cbc:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     cc0:	94 e1       	ldi	r25, 0x14	; 20
     cc2:	9a 95       	dec	r25
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <lcd_dispProgInfo+0x42>
     cc6:	81 e2       	ldi	r24, 0x21	; 33
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     cce:	2f e7       	ldi	r18, 0x7F	; 127
     cd0:	8a e1       	ldi	r24, 0x1A	; 26
     cd2:	96 e0       	ldi	r25, 0x06	; 6
     cd4:	21 50       	subi	r18, 0x01	; 1
     cd6:	80 40       	sbci	r24, 0x00	; 0
     cd8:	90 40       	sbci	r25, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <lcd_dispProgInfo+0x54>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <lcd_dispProgInfo+0x5e>
     cde:	00 00       	nop
     ce0:	08 95       	ret

00000ce2 <lcd_dispMenu>:
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     ce8:	24 e1       	ldi	r18, 0x14	; 20
     cea:	2a 95       	dec	r18
     cec:	f1 f7       	brne	.-4      	; 0xcea <lcd_dispMenu+0x8>
     cee:	80 e1       	ldi	r24, 0x10	; 16
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     cf6:	80 ec       	ldi	r24, 0xC0	; 192
     cf8:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     cfc:	84 e1       	ldi	r24, 0x14	; 20
     cfe:	8a 95       	dec	r24
     d00:	f1 f7       	brne	.-4      	; 0xcfe <lcd_dispMenu+0x1c>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     d0a:	9f eb       	ldi	r25, 0xBF	; 191
     d0c:	27 e2       	ldi	r18, 0x27	; 39
     d0e:	89 e0       	ldi	r24, 0x09	; 9
     d10:	91 50       	subi	r25, 0x01	; 1
     d12:	20 40       	sbci	r18, 0x00	; 0
     d14:	80 40       	sbci	r24, 0x00	; 0
     d16:	e1 f7       	brne	.-8      	; 0xd10 <lcd_dispMenu+0x2e>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <lcd_dispMenu+0x38>
     d1a:	00 00       	nop
     d1c:	08 95       	ret

00000d1e <lcd_dispWords>:
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	e8 2e       	mov	r14, r24
     d2c:	80 e8       	ldi	r24, 0x80	; 128
     d2e:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     d32:	24 e1       	ldi	r18, 0x14	; 20
     d34:	2a 95       	dec	r18
     d36:	f1 f7       	brne	.-4      	; 0xd34 <lcd_dispWords+0x16>
     d38:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <min>
     d3c:	93 78       	andi	r25, 0x83	; 131
     d3e:	1c f4       	brge	.+6      	; 0xd46 <lcd_dispWords+0x28>
     d40:	91 50       	subi	r25, 0x01	; 1
     d42:	9c 6f       	ori	r25, 0xFC	; 252
     d44:	9f 5f       	subi	r25, 0xFF	; 255
     d46:	99 23       	and	r25, r25
     d48:	ec f0       	brlt	.+58     	; 0xd84 <lcd_dispWords+0x66>
     d4a:	92 30       	cpi	r25, 0x02	; 2
     d4c:	1c f0       	brlt	.+6      	; 0xd54 <lcd_dispWords+0x36>
     d4e:	94 30       	cpi	r25, 0x04	; 4
     d50:	6c f0       	brlt	.+26     	; 0xd6c <lcd_dispWords+0x4e>
     d52:	18 c0       	rjmp	.+48     	; 0xd84 <lcd_dispWords+0x66>
     d54:	30 e2       	ldi	r19, 0x20	; 32
     d56:	e3 9e       	mul	r14, r19
     d58:	c0 01       	movw	r24, r0
     d5a:	11 24       	eor	r1, r1
     d5c:	ec 01       	movw	r28, r24
     d5e:	c2 57       	subi	r28, 0x72	; 114
     d60:	dd 4f       	sbci	r29, 0xFD	; 253
     d62:	9c 01       	movw	r18, r24
     d64:	22 56       	subi	r18, 0x62	; 98
     d66:	3d 4f       	sbci	r19, 0xFD	; 253
     d68:	79 01       	movw	r14, r18
     d6a:	10 c0       	rjmp	.+32     	; 0xd8c <lcd_dispWords+0x6e>
     d6c:	30 e2       	ldi	r19, 0x20	; 32
     d6e:	e3 9e       	mul	r14, r19
     d70:	c0 01       	movw	r24, r0
     d72:	11 24       	eor	r1, r1
     d74:	ec 01       	movw	r28, r24
     d76:	c2 5b       	subi	r28, 0xB2	; 178
     d78:	de 4f       	sbci	r29, 0xFE	; 254
     d7a:	9c 01       	movw	r18, r24
     d7c:	22 5a       	subi	r18, 0xA2	; 162
     d7e:	3e 4f       	sbci	r19, 0xFE	; 254
     d80:	79 01       	movw	r14, r18
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <lcd_dispWords+0x6e>
     d84:	e1 2c       	mov	r14, r1
     d86:	f1 2c       	mov	r15, r1
     d88:	c0 e0       	ldi	r28, 0x00	; 0
     d8a:	d0 e0       	ldi	r29, 0x00	; 0
     d8c:	ce 01       	movw	r24, r28
     d8e:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     d92:	fe 01       	movw	r30, r28
     d94:	01 90       	ld	r0, Z+
     d96:	00 20       	and	r0, r0
     d98:	e9 f7       	brne	.-6      	; 0xd94 <lcd_dispWords+0x76>
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	ec 1b       	sub	r30, r28
     d9e:	fd 0b       	sbc	r31, r29
     da0:	00 e1       	ldi	r16, 0x10	; 16
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	0e 1b       	sub	r16, r30
     da6:	11 09       	sbc	r17, r1
     da8:	10 16       	cp	r1, r16
     daa:	11 06       	cpc	r1, r17
     dac:	54 f4       	brge	.+20     	; 0xdc2 <lcd_dispWords+0xa4>
     dae:	c0 e0       	ldi	r28, 0x00	; 0
     db0:	80 e2       	ldi	r24, 0x20	; 32
     db2:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
     db6:	cf 5f       	subi	r28, 0xFF	; 255
     db8:	2c 2f       	mov	r18, r28
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	20 17       	cp	r18, r16
     dbe:	31 07       	cpc	r19, r17
     dc0:	bc f3       	brlt	.-18     	; 0xdb0 <lcd_dispWords+0x92>
     dc2:	80 ec       	ldi	r24, 0xC0	; 192
     dc4:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     dc8:	34 e1       	ldi	r19, 0x14	; 20
     dca:	3a 95       	dec	r19
     dcc:	f1 f7       	brne	.-4      	; 0xdca <lcd_dispWords+0xac>
     dce:	c7 01       	movw	r24, r14
     dd0:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
     dd4:	f7 01       	movw	r30, r14
     dd6:	01 90       	ld	r0, Z+
     dd8:	00 20       	and	r0, r0
     dda:	e9 f7       	brne	.-6      	; 0xdd6 <lcd_dispWords+0xb8>
     ddc:	31 97       	sbiw	r30, 0x01	; 1
     dde:	ee 19       	sub	r30, r14
     de0:	ff 09       	sbc	r31, r15
     de2:	00 e1       	ldi	r16, 0x10	; 16
     de4:	10 e0       	ldi	r17, 0x00	; 0
     de6:	0e 1b       	sub	r16, r30
     de8:	11 09       	sbc	r17, r1
     dea:	10 16       	cp	r1, r16
     dec:	11 06       	cpc	r1, r17
     dee:	54 f4       	brge	.+20     	; 0xe04 <lcd_dispWords+0xe6>
     df0:	c0 e0       	ldi	r28, 0x00	; 0
     df2:	80 e2       	ldi	r24, 0x20	; 32
     df4:	0e 94 49 04 	call	0x892	; 0x892 <lcd_write_character_4d>
     df8:	cf 5f       	subi	r28, 0xFF	; 255
     dfa:	8c 2f       	mov	r24, r28
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	80 17       	cp	r24, r16
     e00:	91 07       	cpc	r25, r17
     e02:	bc f3       	brlt	.-18     	; 0xdf2 <lcd_dispWords+0xd4>
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	08 95       	ret

00000e12 <LCD_dispNotice>:
}//lcd_testString

//-----------------------------------
void LCD_dispNotice()
{
	makePDasOutput();
     e12:	0e 94 49 07 	call	0xe92	; 0xe92 <makePDasOutput>

	lcd_init_4d();
     e16:	0e 94 92 04 	call	0x924	; 0x924 <lcd_init_4d>
     e1a:	89 ef       	ldi	r24, 0xF9	; 249
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <LCD_dispNotice+0xc>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <LCD_dispNotice+0x12>
     e24:	00 00       	nop
	_delay_us(1000);                                  // 40 uS delay (min)

	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     e2c:	94 e1       	ldi	r25, 0x14	; 20
     e2e:	9a 95       	dec	r25
     e30:	f1 f7       	brne	.-4      	; 0xe2e <LCD_dispNotice+0x1c>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	lcd_write_string_4d((uint8_t *)"Ready to run!");
     e32:	84 e1       	ldi	r24, 0x14	; 20
     e34:	94 e0       	ldi	r25, 0x04	; 4
     e36:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     e3a:	80 ec       	ldi	r24, 0xC0	; 192
     e3c:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_write_instruction_4d>
     e40:	24 e1       	ldi	r18, 0x14	; 20
     e42:	2a 95       	dec	r18
     e44:	f1 f7       	brne	.-4      	; 0xe42 <LCD_dispNotice+0x30>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	lcd_write_string_4d((uint8_t *)"Now,sleep.Bye.");
     e46:	82 e2       	ldi	r24, 0x22	; 34
     e48:	94 e0       	ldi	r25, 0x04	; 4
     e4a:	0e 94 56 04 	call	0x8ac	; 0x8ac <lcd_write_string_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e4e:	8f eb       	ldi	r24, 0xBF	; 191
     e50:	97 e2       	ldi	r25, 0x27	; 39
     e52:	29 e0       	ldi	r18, 0x09	; 9
     e54:	81 50       	subi	r24, 0x01	; 1
     e56:	90 40       	sbci	r25, 0x00	; 0
     e58:	20 40       	sbci	r18, 0x00	; 0
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <LCD_dispNotice+0x42>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <LCD_dispNotice+0x4c>
     e5e:	00 00       	nop
	_delay_ms(3000);
	
	makePDasInput();
     e60:	0e 94 64 07 	call	0xec8	; 0xec8 <makePDasInput>
     e64:	08 95       	ret

00000e66 <main>:
//------------------------------------
int main()
{
	// configure MCU IO pins
	// implemented at "config.c"
    config();
     e66:	0e 94 7e 00 	call	0xfc	; 0xfc <config>
 
	// setup ISR
	// implemented at "intrpt.c"
    initINT();
     e6a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <initINT>

	I2C_Init();
     e6e:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Init>
    parseCompileTime();
     e72:	0e 94 8a 07 	call	0xf14	; 0xf14 <parseCompileTime>
	
	//After call LCD_dispNotice(), sleep current remain rather high 680 uA
	//	otherwise, 230 uA
	//As of July 15, 2017, this function does not cause any further current draw than 0.2uA
	LCD_dispNotice(); 
     e76:	0e 94 09 07 	call	0xe12	; 0xe12 <LCD_dispNotice>

    //lcd_dispRealClock();
	//lcd_dispProgInfo(); //LCD display program info
    // Use the Power Down sleep mode
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     e7a:	83 b7       	in	r24, 0x33	; 51
     e7c:	81 7f       	andi	r24, 0xF1	; 241
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	83 bf       	out	0x33, r24	; 51

    // endless loop
    while(1)
    {
      // go to sleep and wait for interrupt...
      sleep_mode();
     e82:	83 b7       	in	r24, 0x33	; 51
     e84:	81 60       	ori	r24, 0x01	; 1
     e86:	83 bf       	out	0x33, r24	; 51
     e88:	88 95       	sleep
     e8a:	83 b7       	in	r24, 0x33	; 51
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	83 bf       	out	0x33, r24	; 51
	  
	}
     e90:	f8 cf       	rjmp	.-16     	; 0xe82 <main+0x1c>

00000e92 <makePDasOutput>:
//by calling makePDasInput(). (added by Insoo: Jul 12, 2017)
void makePDasOutput()
{
	// configure the microprocessor pins for the data lines
	// 4 data lines - output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
     e92:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
     e94:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
     e96:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
     e98:	54 9a       	sbi	0x0a, 4	; 10

	// LCD backlight cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
     e9a:	20 9a       	sbi	0x04, 0	; 4

	// LCD VSS pin (Power Supply) - Output
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
     e9c:	26 9a       	sbi	0x04, 6	; 4
	//turn on LCD power
	lcd_VDD_port |= _BV(lcd_VDD_bit);
     e9e:	2e 9a       	sbi	0x05, 6	; 5
     ea0:	83 ec       	ldi	r24, 0xC3	; 195
     ea2:	99 e0       	ldi	r25, 0x09	; 9
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <makePDasOutput+0x12>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <makePDasOutput+0x18>
     eaa:	00 00       	nop
	_delay_ms(10);

	// DS1307 Vcc pin (Power Supply) - output
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
     eac:	27 9a       	sbi	0x04, 7	; 4
	//turn on DS1307 power
	DS1307_VCC_port |= _BV(DS1307_VCC_bit);
     eae:	2f 9a       	sbi	0x05, 7	; 5
     eb0:	83 ec       	ldi	r24, 0xC3	; 195
     eb2:	99 e0       	ldi	r25, 0x09	; 9
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <makePDasOutput+0x22>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <makePDasOutput+0x28>
     eba:	00 00       	nop
	_delay_ms(10);

	// DHT11 (temp & humid sensor) VCC pin (Power Supply) - Output
	//added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
     ebc:	22 98       	cbi	0x04, 2	; 4
	//turn on DHT11 chip power
	DHT_VCC_port |= _BV(DHT_VCC_bit);
     ebe:	2a 9a       	sbi	0x05, 2	; 5
	//Tactile switch - Input
	//tactile_Switch_ddr |= _BV(tactile_Switch_bit);

	// configure the microprocessor pins for the control lines
	// E line - output
	lcd_E_ddr |= _BV(lcd_E_bit);
     ec0:	53 9a       	sbi	0x0a, 3	; 10
	// RS line - output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
     ec2:	52 9a       	sbi	0x0a, 2	; 10
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
     ec4:	5a 98       	cbi	0x0b, 2	; 11
     ec6:	08 95       	ret

00000ec8 <makePDasInput>:
void makePDasInput()
{

	// turn off four data lines
	// following four lines added by Insoo on Jul 15, 2017
	lcd_D7_port &= ~_BV(lcd_D7_bit);
     ec8:	5f 98       	cbi	0x0b, 7	; 11
	lcd_D6_port &= ~_BV(lcd_D6_bit);
     eca:	5e 98       	cbi	0x0b, 6	; 11
	lcd_D5_port &= ~_BV(lcd_D5_bit);
     ecc:	5d 98       	cbi	0x0b, 5	; 11
	lcd_D4_port &= ~_BV(lcd_D4_bit);
     ece:	5c 98       	cbi	0x0b, 4	; 11

	// configure the microprocessor pins for the data lines
	// 4 data lines - output, but make it input
	lcd_D7_ddr &= ~_BV(lcd_D7_bit);
     ed0:	57 98       	cbi	0x0a, 7	; 10
	lcd_D6_ddr &= ~_BV(lcd_D6_bit);
     ed2:	56 98       	cbi	0x0a, 6	; 10
	lcd_D5_ddr &= ~_BV(lcd_D5_bit);
     ed4:	55 98       	cbi	0x0a, 5	; 10
	lcd_D4_ddr &= ~_BV(lcd_D4_bit);
     ed6:	54 98       	cbi	0x0a, 4	; 10

	// turn off backlight cathode(GND)
	// following one line added by Insoo on Jul 15, 2017
	lcd_Backlight_port = _BV(lcd_Backlight_bit);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	85 b9       	out	0x05, r24	; 5
	// LCD backlight cathode pin (K) - output, but make it input
	lcd_Backlight_ddr &= ~_BV(lcd_Backlight_bit);
     edc:	20 98       	cbi	0x04, 0	; 4

	// turn off DS1307
	DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
     ede:	2f 98       	cbi	0x05, 7	; 5
	// then, DS1307 Vcc pin (Power Supply) - output, but make it input
	DS1307_VCC_ddr &= ~_BV(DS1307_VCC_bit);
     ee0:	27 98       	cbi	0x04, 7	; 4

	// DHT11 (temp & humid sensor) signal pin - Output/Input
	//turn off and
	DHT_SIG_port &= ~_BV(DHT_SIG_bit);
     ee2:	29 98       	cbi	0x05, 1	; 5
	//make it input
	DHT_SIG_ddr &= ~_BV(DHT_SIG_bit);
     ee4:	21 98       	cbi	0x04, 1	; 4
	DHT_SIG_port &= ~_BV(DHT_SIG_bit);
     ee6:	29 98       	cbi	0x05, 1	; 5

	//turn off DHT11 chip power
	DHT_VCC_port &= ~_BV(DHT_VCC_bit);
     ee8:	2a 98       	cbi	0x05, 2	; 5
	//make DHT_VCC as input, added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
     eea:	22 98       	cbi	0x04, 2	; 4
	//Tactile switch - Input
	//tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);

	// turn off Enable pin
	// following one line added by Insoo on Jul 15, 2017
	lcd_E_port &= ~_BV(lcd_E_bit);
     eec:	5b 98       	cbi	0x0b, 3	; 11
	// configure the microprocessor pins for the control lines
	// E line - output, but make it input
	lcd_E_ddr &= ~_BV(lcd_E_bit);
     eee:	53 98       	cbi	0x0a, 3	; 10
	 
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
     ef0:	5a 98       	cbi	0x0b, 2	; 11
	// RS line - output, but make it input
	lcd_RS_ddr &= ~_BV(lcd_RS_bit);
     ef2:	52 98       	cbi	0x0a, 2	; 10

	// turn off LCD power
	lcd_VDD_port &= ~_BV(lcd_VDD_bit);
     ef4:	2e 98       	cbi	0x05, 6	; 5
	// then, LCD VSS pin (Power Supply) - output, but make it input
	lcd_VDD_ddr &= ~_BV(lcd_VDD_bit);
     ef6:	26 98       	cbi	0x04, 6	; 4
     ef8:	08 95       	ret

00000efa <calcDay>:
    calcDay();
}//parseCompileTime

void calcDay()
{
    day = (date - 17)%7;
     efa:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <date>
     efe:	08 2e       	mov	r0, r24
     f00:	00 0c       	add	r0, r0
     f02:	99 0b       	sbc	r25, r25
     f04:	41 97       	sbiw	r24, 0x11	; 17
     f06:	67 e0       	ldi	r22, 0x07	; 7
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 1e 0a 	call	0x143c	; 0x143c <__divmodhi4>
     f0e:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <day>
     f12:	08 95       	ret

00000f14 <parseCompileTime>:
extern uint8_t year, month, date;
extern uint8_t monthEndDate, day;
*/

void parseCompileTime()
{
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	e4 97       	sbiw	r28, 0x34	; 52
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
    char sTime[4][3];
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
     f2a:	68 e0       	ldi	r22, 0x08	; 8
     f2c:	74 e0       	ldi	r23, 0x04	; 4
     f2e:	81 ee       	ldi	r24, 0xE1	; 225
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	0e 94 85 0a 	call	0x150a	; 0x150a <strtok>
     f36:	bc 01       	movw	r22, r24
    while (*p)
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	e9 f0       	breq	.+58     	; 0xf7a <parseCompileTime+0x66>
     f40:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sTime[n++], p);
     f42:	11 e0       	ldi	r17, 0x01	; 1
     f44:	12 0f       	add	r17, r18
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	c9 01       	movw	r24, r18
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	82 0f       	add	r24, r18
     f50:	93 1f       	adc	r25, r19
     f52:	21 e0       	ldi	r18, 0x01	; 1
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	2c 0f       	add	r18, r28
     f58:	3d 1f       	adc	r19, r29
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	0e 94 93 0a 	call	0x1526	; 0x1526 <strcpy>
        p=strtok(NULL, ":");
     f62:	68 e0       	ldi	r22, 0x08	; 8
     f64:	74 e0       	ldi	r23, 0x04	; 4
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 85 0a 	call	0x150a	; 0x150a <strtok>
     f6e:	bc 01       	movw	r22, r24
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
    {
        strcpy((char *)&sTime[n++], p);
     f70:	21 2f       	mov	r18, r17
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	81 11       	cpse	r24, r1
     f78:	e4 cf       	rjmp	.-56     	; 0xf42 <parseCompileTime+0x2e>
    {
        strcpy((char *)&sTime[n++], p);
        p=strtok(NULL, ":");
    }
    hour=atoi(sTime[0]);
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <atoi>
     f82:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <hour>
    min=atoi(sTime[1]);
     f86:	ce 01       	movw	r24, r28
     f88:	04 96       	adiw	r24, 0x04	; 4
     f8a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <atoi>
     f8e:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <min>
    //give some delay (8 seconds), to compile & upload by human click
    //sec=atoi(sTime[2]) + 8;

    //if you change power source to battery,
    //  you'd better put more time allowance
    sec=atoi(sTime[2]) + 15;
     f92:	ce 01       	movw	r24, r28
     f94:	07 96       	adiw	r24, 0x07	; 7
     f96:	0e 94 67 0a 	call	0x14ce	; 0x14ce <atoi>
     f9a:	81 5f       	subi	r24, 0xF1	; 241
     f9c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <sec>
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	74 e0       	ldi	r23, 0x04	; 4
     fa4:	8a ee       	ldi	r24, 0xEA	; 234
     fa6:	93 e0       	ldi	r25, 0x03	; 3
     fa8:	0e 94 85 0a 	call	0x150a	; 0x150a <strtok>
     fac:	bc 01       	movw	r22, r24
    while (*p)
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	88 23       	and	r24, r24
     fb4:	19 f1       	breq	.+70     	; 0xffc <parseCompileTime+0xe8>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sDate[n++], p);
     fb8:	11 e0       	ldi	r17, 0x01	; 1
     fba:	12 0f       	add	r17, r18
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	c9 01       	movw	r24, r18
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	22 0f       	add	r18, r18
     fc6:	33 1f       	adc	r19, r19
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	2d e0       	ldi	r18, 0x0D	; 13
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	2c 0f       	add	r18, r28
     fda:	3d 1f       	adc	r19, r29
     fdc:	82 0f       	add	r24, r18
     fde:	93 1f       	adc	r25, r19
     fe0:	0e 94 93 0a 	call	0x1526	; 0x1526 <strcpy>
        p=strtok(NULL, " ");
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	74 e0       	ldi	r23, 0x04	; 4
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 85 0a 	call	0x150a	; 0x150a <strtok>
     ff0:	bc 01       	movw	r22, r24

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    {
        strcpy((char *)&sDate[n++], p);
     ff2:	21 2f       	mov	r18, r17
    sec=atoi(sTime[2]) + 15;
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	81 11       	cpse	r24, r1
     ffa:	de cf       	rjmp	.-68     	; 0xfb8 <parseCompileTime+0xa4>
    {
        strcpy((char *)&sDate[n++], p);
        p=strtok(NULL, " ");
    }

    if ( strcmp(sDate[0], "Jan") == 0 )
     ffc:	61 e3       	ldi	r22, 0x31	; 49
     ffe:	74 e0       	ldi	r23, 0x04	; 4
    1000:	ce 01       	movw	r24, r28
    1002:	0d 96       	adiw	r24, 0x0d	; 13
    1004:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    1008:	89 2b       	or	r24, r25
    100a:	21 f4       	brne	.+8      	; 0x1014 <parseCompileTime+0x100>
        month = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    1012:	83 c0       	rjmp	.+262    	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Feb") == 0 )
    1014:	65 e3       	ldi	r22, 0x35	; 53
    1016:	74 e0       	ldi	r23, 0x04	; 4
    1018:	ce 01       	movw	r24, r28
    101a:	0d 96       	adiw	r24, 0x0d	; 13
    101c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    1020:	89 2b       	or	r24, r25
    1022:	21 f4       	brne	.+8      	; 0x102c <parseCompileTime+0x118>
        month = 2;
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    102a:	77 c0       	rjmp	.+238    	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Mar") == 0 )
    102c:	69 e3       	ldi	r22, 0x39	; 57
    102e:	74 e0       	ldi	r23, 0x04	; 4
    1030:	ce 01       	movw	r24, r28
    1032:	0d 96       	adiw	r24, 0x0d	; 13
    1034:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    1038:	89 2b       	or	r24, r25
    103a:	21 f4       	brne	.+8      	; 0x1044 <parseCompileTime+0x130>
        month = 3;
    103c:	83 e0       	ldi	r24, 0x03	; 3
    103e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    1042:	6b c0       	rjmp	.+214    	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Apr") == 0 )
    1044:	6d e3       	ldi	r22, 0x3D	; 61
    1046:	74 e0       	ldi	r23, 0x04	; 4
    1048:	ce 01       	movw	r24, r28
    104a:	0d 96       	adiw	r24, 0x0d	; 13
    104c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    1050:	89 2b       	or	r24, r25
    1052:	21 f4       	brne	.+8      	; 0x105c <parseCompileTime+0x148>
        month = 4;
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    105a:	5f c0       	rjmp	.+190    	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "May") == 0 )
    105c:	61 e4       	ldi	r22, 0x41	; 65
    105e:	74 e0       	ldi	r23, 0x04	; 4
    1060:	ce 01       	movw	r24, r28
    1062:	0d 96       	adiw	r24, 0x0d	; 13
    1064:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    1068:	89 2b       	or	r24, r25
    106a:	21 f4       	brne	.+8      	; 0x1074 <parseCompileTime+0x160>
        month = 5;
    106c:	85 e0       	ldi	r24, 0x05	; 5
    106e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    1072:	53 c0       	rjmp	.+166    	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jun") == 0 )
    1074:	65 e4       	ldi	r22, 0x45	; 69
    1076:	74 e0       	ldi	r23, 0x04	; 4
    1078:	ce 01       	movw	r24, r28
    107a:	0d 96       	adiw	r24, 0x0d	; 13
    107c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    1080:	89 2b       	or	r24, r25
    1082:	21 f4       	brne	.+8      	; 0x108c <parseCompileTime+0x178>
        month = 6;
    1084:	86 e0       	ldi	r24, 0x06	; 6
    1086:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    108a:	47 c0       	rjmp	.+142    	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jul") == 0 )
    108c:	69 e4       	ldi	r22, 0x49	; 73
    108e:	74 e0       	ldi	r23, 0x04	; 4
    1090:	ce 01       	movw	r24, r28
    1092:	0d 96       	adiw	r24, 0x0d	; 13
    1094:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    1098:	89 2b       	or	r24, r25
    109a:	21 f4       	brne	.+8      	; 0x10a4 <parseCompileTime+0x190>
        month = 7;
    109c:	87 e0       	ldi	r24, 0x07	; 7
    109e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    10a2:	3b c0       	rjmp	.+118    	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Aug") == 0 )
    10a4:	6d e4       	ldi	r22, 0x4D	; 77
    10a6:	74 e0       	ldi	r23, 0x04	; 4
    10a8:	ce 01       	movw	r24, r28
    10aa:	0d 96       	adiw	r24, 0x0d	; 13
    10ac:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    10b0:	89 2b       	or	r24, r25
    10b2:	21 f4       	brne	.+8      	; 0x10bc <parseCompileTime+0x1a8>
        month = 8;
    10b4:	88 e0       	ldi	r24, 0x08	; 8
    10b6:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    10ba:	2f c0       	rjmp	.+94     	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Sep") == 0 )
    10bc:	61 e5       	ldi	r22, 0x51	; 81
    10be:	74 e0       	ldi	r23, 0x04	; 4
    10c0:	ce 01       	movw	r24, r28
    10c2:	0d 96       	adiw	r24, 0x0d	; 13
    10c4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    10c8:	89 2b       	or	r24, r25
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <parseCompileTime+0x1c0>
        month = 9;
    10cc:	89 e0       	ldi	r24, 0x09	; 9
    10ce:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    10d2:	23 c0       	rjmp	.+70     	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Oct") == 0 )
    10d4:	65 e5       	ldi	r22, 0x55	; 85
    10d6:	74 e0       	ldi	r23, 0x04	; 4
    10d8:	ce 01       	movw	r24, r28
    10da:	0d 96       	adiw	r24, 0x0d	; 13
    10dc:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    10e0:	89 2b       	or	r24, r25
    10e2:	21 f4       	brne	.+8      	; 0x10ec <parseCompileTime+0x1d8>
        month = 10;
    10e4:	8a e0       	ldi	r24, 0x0A	; 10
    10e6:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    10ea:	17 c0       	rjmp	.+46     	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Nov") == 0 )
    10ec:	69 e5       	ldi	r22, 0x59	; 89
    10ee:	74 e0       	ldi	r23, 0x04	; 4
    10f0:	ce 01       	movw	r24, r28
    10f2:	0d 96       	adiw	r24, 0x0d	; 13
    10f4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    10f8:	89 2b       	or	r24, r25
    10fa:	21 f4       	brne	.+8      	; 0x1104 <parseCompileTime+0x1f0>
        month = 11;
    10fc:	8b e0       	ldi	r24, 0x0B	; 11
    10fe:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>
    1102:	0b c0       	rjmp	.+22     	; 0x111a <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Dec") == 0 )
    1104:	6d e5       	ldi	r22, 0x5D	; 93
    1106:	74 e0       	ldi	r23, 0x04	; 4
    1108:	ce 01       	movw	r24, r28
    110a:	0d 96       	adiw	r24, 0x0d	; 13
    110c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strcmp>
    1110:	89 2b       	or	r24, r25
    1112:	19 f4       	brne	.+6      	; 0x111a <parseCompileTime+0x206>
        month = 12;
    1114:	8c e0       	ldi	r24, 0x0C	; 12
    1116:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <month>

    date=atoi(sDate[1]);
    111a:	ce 01       	movw	r24, r28
    111c:	47 96       	adiw	r24, 0x17	; 23
    111e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <atoi>
    1122:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <date>
    yearLong=atoi(sDate[2]);
    1126:	ce 01       	movw	r24, r28
    1128:	81 96       	adiw	r24, 0x21	; 33
    112a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <atoi>
    112e:	ac 01       	movw	r20, r24
    year=yearLong%1000;
    1130:	9c 01       	movw	r18, r24
    1132:	36 95       	lsr	r19
    1134:	27 95       	ror	r18
    1136:	36 95       	lsr	r19
    1138:	27 95       	ror	r18
    113a:	36 95       	lsr	r19
    113c:	27 95       	ror	r18
    113e:	a5 ec       	ldi	r26, 0xC5	; 197
    1140:	b0 e2       	ldi	r27, 0x20	; 32
    1142:	0e 94 38 0a 	call	0x1470	; 0x1470 <__umulhisi3>
    1146:	92 95       	swap	r25
    1148:	82 95       	swap	r24
    114a:	8f 70       	andi	r24, 0x0F	; 15
    114c:	89 27       	eor	r24, r25
    114e:	9f 70       	andi	r25, 0x0F	; 15
    1150:	89 27       	eor	r24, r25
    1152:	68 ee       	ldi	r22, 0xE8	; 232
    1154:	73 e0       	ldi	r23, 0x03	; 3
    1156:	86 9f       	mul	r24, r22
    1158:	90 01       	movw	r18, r0
    115a:	87 9f       	mul	r24, r23
    115c:	30 0d       	add	r19, r0
    115e:	96 9f       	mul	r25, r22
    1160:	30 0d       	add	r19, r0
    1162:	11 24       	eor	r1, r1
    1164:	42 1b       	sub	r20, r18
    1166:	53 0b       	sbc	r21, r19
    1168:	40 93 6a 04 	sts	0x046A, r20	; 0x80046a <year>

    calcDay();
    116c:	0e 94 7d 07 	call	0xefa	; 0xefa <calcDay>
}//parseCompileTime
    1170:	e4 96       	adiw	r28, 0x34	; 52
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	08 95       	ret

00001184 <tinudht_read>:
#define TINUDHT_RCV_DELAY 10
#define TINUDHT_RCV_LENGTH 2

// ----------------------------------------------------------------------------

uint8_t tinudht_read(TinuDHT *ptinudht, uint8_t dht_pin) {
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	00 d0       	rcall	.+0      	; 0x1192 <tinudht_read+0xe>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <tinudht_read+0x10>
    1194:	1f 92       	push	r1
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	7c 01       	movw	r14, r24
	
	// Buffer to received data
	uint8_t data[5];
	// Empty the buffer
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    119c:	1d 82       	std	Y+5, r1	; 0x05
    119e:	1c 82       	std	Y+4, r1	; 0x04
    11a0:	1b 82       	std	Y+3, r1	; 0x03
    11a2:	1a 82       	std	Y+2, r1	; 0x02
    11a4:	19 82       	std	Y+1, r1	; 0x01
//	for (uint8_t i=0; i< 5; i++) data[i] = 0;	// Another way to empty the data buffer.

	// Send request
	DDRB |= (1 << dht_pin);	// Set port as output
    11a6:	84 b1       	in	r24, 0x04	; 4
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	06 2e       	mov	r0, r22
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <tinudht_read+0x30>
    11b0:	44 0f       	add	r20, r20
    11b2:	55 1f       	adc	r21, r21
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <tinudht_read+0x2c>
    11b8:	84 2b       	or	r24, r20
    11ba:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << dht_pin);	// Set to 0
    11bc:	95 b1       	in	r25, 0x05	; 5
    11be:	24 2f       	mov	r18, r20
    11c0:	20 95       	com	r18
    11c2:	92 23       	and	r25, r18
    11c4:	95 b9       	out	0x05, r25	; 5
    11c6:	83 e9       	ldi	r24, 0x93	; 147
    11c8:	91 e1       	ldi	r25, 0x11	; 17
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <tinudht_read+0x46>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <tinudht_read+0x4c>
    11d0:	00 00       	nop
	_delay_ms(18);	// Wait 18 ms
	PORTB |= (1 << dht_pin);	// Set to 1
    11d2:	95 b1       	in	r25, 0x05	; 5
    11d4:	94 2b       	or	r25, r20
    11d6:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11d8:	9d e0       	ldi	r25, 0x0D	; 13
    11da:	9a 95       	dec	r25
    11dc:	f1 f7       	brne	.-4      	; 0x11da <tinudht_read+0x56>
    11de:	00 00       	nop
	_delay_us(40);	// Wait 40 us

	// Receive response
	DDRB &= ~(1 << dht_pin);	// Set port as input
    11e0:	84 b1       	in	r24, 0x04	; 4
    11e2:	82 23       	and	r24, r18
    11e4:	84 b9       	out	0x04, r24	; 4

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <tinudht_read+0x6c>
    11ea:	81 50       	subi	r24, 0x01	; 1
		if (timeout-- == 0)
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <tinudht_read+0x6c>
    11ee:	5a c0       	rjmp	.+180    	; 0x12a4 <tinudht_read+0x120>

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    11f0:	23 b1       	in	r18, 0x03	; 3
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	24 23       	and	r18, r20
    11f6:	35 23       	and	r19, r21
    11f8:	23 2b       	or	r18, r19
    11fa:	b9 f3       	breq	.-18     	; 0x11ea <tinudht_read+0x66>
    11fc:	5d c0       	rjmp	.+186    	; 0x12b8 <tinudht_read+0x134>
    11fe:	21 50       	subi	r18, 0x01	; 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
    1200:	11 f4       	brne	.+4      	; 0x1206 <tinudht_read+0x82>
    1202:	52 c0       	rjmp	.+164    	; 0x12a8 <tinudht_read+0x124>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    1204:	2f ef       	ldi	r18, 0xFF	; 255
    1206:	83 b1       	in	r24, 0x03	; 3
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	84 23       	and	r24, r20
    120c:	95 23       	and	r25, r21
    120e:	89 2b       	or	r24, r25
    1210:	b1 f7       	brne	.-20     	; 0x11fe <tinudht_read+0x7a>
    1212:	88 e2       	ldi	r24, 0x28	; 40
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	a7 e0       	ldi	r26, 0x07	; 7
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <tinudht_read+0x9c>
    121a:	91 50       	subi	r25, 0x01	; 1
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
    121c:	31 f4       	brne	.+12     	; 0x122a <tinudht_read+0xa6>
    121e:	46 c0       	rjmp	.+140    	; 0x12ac <tinudht_read+0x128>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    1220:	b0 e0       	ldi	r27, 0x00	; 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	70 e0       	ldi	r23, 0x00	; 0
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
    1226:	07 e0       	ldi	r16, 0x07	; 7
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    1228:	9b 2f       	mov	r25, r27
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    122a:	23 b1       	in	r18, 0x03	; 3
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	24 23       	and	r18, r20
    1230:	35 23       	and	r19, r21
    1232:	23 2b       	or	r18, r19
    1234:	91 f3       	breq	.-28     	; 0x121a <tinudht_read+0x96>
    1236:	9b 2f       	mov	r25, r27
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <tinudht_read+0xc2>
    123a:	e3 e0       	ldi	r30, 0x03	; 3
    123c:	ea 95       	dec	r30
    123e:	f1 f7       	brne	.-4      	; 0x123c <tinudht_read+0xb8>
    1240:	00 00       	nop

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
    1242:	9f 5f       	subi	r25, 0xFF	; 255
    1244:	a9 f1       	breq	.+106    	; 0x12b0 <tinudht_read+0x12c>
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
    1246:	23 b1       	in	r18, 0x03	; 3
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	24 23       	and	r18, r20
    124c:	35 23       	and	r19, r21
    124e:	23 2b       	or	r18, r19
    1250:	a1 f7       	brne	.-24     	; 0x123a <tinudht_read+0xb6>
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
    1252:	92 30       	cpi	r25, 0x02	; 2
    1254:	80 f0       	brcs	.+32     	; 0x1276 <tinudht_read+0xf2>
    1256:	e1 e0       	ldi	r30, 0x01	; 1
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	ec 0f       	add	r30, r28
    125c:	fd 1f       	adc	r31, r29
    125e:	e1 0f       	add	r30, r17
    1260:	f1 1d       	adc	r31, r1
    1262:	90 81       	ld	r25, Z
    1264:	9b 01       	movw	r18, r22
    1266:	0a 2e       	mov	r0, r26
    1268:	02 c0       	rjmp	.+4      	; 0x126e <tinudht_read+0xea>
    126a:	22 0f       	add	r18, r18
    126c:	33 1f       	adc	r19, r19
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <tinudht_read+0xe6>
    1272:	29 2b       	or	r18, r25
    1274:	20 83       	st	Z, r18
		// delay =  9..29us, len = 2
		
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
    1276:	a1 11       	cpse	r26, r1
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <tinudht_read+0xfc>
		{
			bit_index = 7;	// restart at MSB
			byte_index++;	// next byte!
    127a:	1f 5f       	subi	r17, 0xFF	; 255
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
    127c:	a0 2f       	mov	r26, r16
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <tinudht_read+0xfe>
			byte_index++;	// next byte!
		}
		else bit_index--;
    1280:	a1 50       	subi	r26, 0x01	; 1
    1282:	81 50       	subi	r24, 0x01	; 1
			return TINUDHT_ERROR_TIMEOUT;

	uint8_t bit_index = 7;
	uint8_t byte_index = 0;
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
    1284:	89 f6       	brne	.-94     	; 0x1228 <tinudht_read+0xa4>
	// DEBUGGING_STRING("DT:");
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
    1286:	49 81       	ldd	r20, Y+1	; 0x01
    1288:	2b 81       	ldd	r18, Y+3	; 0x03
    128a:	92 2f       	mov	r25, r18
    128c:	94 0f       	add	r25, r20
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    128e:	3d 81       	ldd	r19, Y+5	; 0x05
    1290:	39 13       	cpse	r19, r25
    1292:	10 c0       	rjmp	.+32     	; 0x12b4 <tinudht_read+0x130>
	// DEBUGGING_NUMDECP(data[4]);
	// DEBUGGING_NUMDECP(checksum);
	// DEBUGGING_STRING("\n\r");

	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	f7 01       	movw	r30, r14
    1298:	51 83       	std	Z+1, r21	; 0x01
    129a:	40 83       	st	Z, r20
	ptinudht->temperature = data[2]; 
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	33 83       	std	Z+3, r19	; 0x03
    12a0:	22 83       	std	Z+2, r18	; 0x02

	return TINUDHT_OK;
    12a2:	17 c0       	rjmp	.+46     	; 0x12d2 <tinudht_read+0x14e>

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
    12a4:	8e ef       	ldi	r24, 0xFE	; 254
    12a6:	15 c0       	rjmp	.+42     	; 0x12d2 <tinudht_read+0x14e>
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
    12a8:	8e ef       	ldi	r24, 0xFE	; 254
    12aa:	13 c0       	rjmp	.+38     	; 0x12d2 <tinudht_read+0x14e>
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;
    12ac:	8e ef       	ldi	r24, 0xFE	; 254
    12ae:	11 c0       	rjmp	.+34     	; 0x12d2 <tinudht_read+0x14e>
		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
    12b0:	8e ef       	ldi	r24, 0xFE	; 254
    12b2:	0f c0       	rjmp	.+30     	; 0x12d2 <tinudht_read+0x14e>
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <tinudht_read+0x14e>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    12b8:	83 b1       	in	r24, 0x03	; 3
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <tinudht_read+0x13e>
    12be:	95 95       	asr	r25
    12c0:	87 95       	ror	r24
    12c2:	6a 95       	dec	r22
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <tinudht_read+0x13a>
    12c6:	80 fd       	sbrc	r24, 0
    12c8:	9d cf       	rjmp	.-198    	; 0x1204 <tinudht_read+0x80>
    12ca:	88 e2       	ldi	r24, 0x28	; 40
    12cc:	10 e0       	ldi	r17, 0x00	; 0
    12ce:	a7 e0       	ldi	r26, 0x07	; 7
    12d0:	a7 cf       	rjmp	.-178    	; 0x1220 <tinudht_read+0x9c>
	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
	ptinudht->temperature = data[2]; 

	return TINUDHT_OK;
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	08 95       	ret

000012ea <countButton>:

    uint8_t val;
    uint8_t DONE=0;


    loopCnt=0;
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    prevLoop=0;
    12ec:	30 e0       	ldi	r19, 0x00	; 0


//-----------------------------------
void countButton()
{
    uint8_t menuCnt=0;
    12ee:	20 e0       	ldi	r18, 0x00	; 0
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	40 e0       	ldi	r20, 0x00	; 0
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    12f4:	52 e0       	ldi	r21, 0x02	; 2
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    {
        loopCnt++;
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
        curLoop = loopCnt;
        lapse = curLoop - prevLoop;
    12f8:	98 2f       	mov	r25, r24
    12fa:	93 1b       	sub	r25, r19

        //menuSelectInterval is
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
    12fc:	93 30       	cpi	r25, 0x03	; 3
    12fe:	18 f0       	brcs	.+6      	; 0x1306 <countButton+0x1c>
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
    1300:	21 11       	cpse	r18, r1
    1302:	8b c0       	rjmp	.+278    	; 0x141a <countButton+0x130>
    1304:	75 c0       	rjmp	.+234    	; 0x13f0 <countButton+0x106>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    1306:	95 30       	cpi	r25, 0x05	; 5
    1308:	08 f4       	brcc	.+2      	; 0x130c <countButton+0x22>
    130a:	7c c0       	rjmp	.+248    	; 0x1404 <countButton+0x11a>
    130c:	22 23       	and	r18, r18
    130e:	09 f4       	brne	.+2      	; 0x1312 <countButton+0x28>
    1310:	6c c0       	rjmp	.+216    	; 0x13ea <countButton+0x100>
    1312:	78 c0       	rjmp	.+240    	; 0x1404 <countButton+0x11a>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1314:	1c 99       	sbic	0x03, 4	; 3
    1316:	10 c0       	rjmp	.+32     	; 0x1338 <countButton+0x4e>
    1318:	94 2f       	mov	r25, r20
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <countButton+0x3c>
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    131c:	95 2f       	mov	r25, r21
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <countButton+0x3c>

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1320:	94 2f       	mov	r25, r20
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <countButton+0x3c>
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    1324:	96 2f       	mov	r25, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1326:	e3 e2       	ldi	r30, 0x23	; 35
    1328:	f4 ef       	ldi	r31, 0xF4	; 244
    132a:	31 97       	sbiw	r30, 0x01	; 1
    132c:	f1 f7       	brne	.-4      	; 0x132a <countButton+0x40>
    132e:	00 c0       	rjmp	.+0      	; 0x1330 <countButton+0x46>
    1330:	00 00       	nop
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
      {
        // for debounce
        _delay_ms(halfSec/2);
        menuCnt++;
    1332:	2f 5f       	subi	r18, 0xFF	; 255

        //Pressing the button, lap time calculation should be reset
        //to give 1 sec of time to choose menuCnt
        prevLoop = loopCnt;
    1334:	38 2f       	mov	r19, r24
    1336:	01 c0       	rjmp	.+2      	; 0x133a <countButton+0x50>
    1338:	94 2f       	mov	r25, r20
    133a:	e1 e1       	ldi	r30, 0x11	; 17
    133c:	fa e7       	ldi	r31, 0x7A	; 122
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <countButton+0x54>
    1342:	00 c0       	rjmp	.+0      	; 0x1344 <countButton+0x5a>
    1344:	00 00       	nop
    //Get menuCnt by counting the button press
    //If pressing the button within 1 second of interval between each press,
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    1346:	99 23       	and	r25, r25
    1348:	b1 f2       	breq	.-84     	; 0x12f6 <countButton+0xc>

    //menuCnt has been set within 3sec of a PCINT occurence
    //  then, play WDT count for a corresponding alarm period.
    if (DONE)
    {
        if (DONE == 2)
    134a:	92 30       	cpi	r25, 0x02	; 2
    134c:	11 f4       	brne	.+4      	; 0x1352 <countButton+0x68>
            menuCnt = prevMenuCnt;
    134e:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <prevMenuCnt>
        //visual cue to notifiy user selected menuCnt
        //blinkLED(menuCnt);
        //_delay_ms(halfSec);
        //turnOnLCDpower();
        //lcd_dispON();
        prevMenuCnt = menuCnt;
    1352:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <prevMenuCnt>
        switch (menuCnt)
    1356:	23 30       	cpi	r18, 0x03	; 3
    1358:	91 f0       	breq	.+36     	; 0x137e <countButton+0x94>
    135a:	28 f4       	brcc	.+10     	; 0x1366 <countButton+0x7c>
    135c:	21 30       	cpi	r18, 0x01	; 1
    135e:	49 f0       	breq	.+18     	; 0x1372 <countButton+0x88>
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	51 f0       	breq	.+20     	; 0x1378 <countButton+0x8e>
    1364:	2b c0       	rjmp	.+86     	; 0x13bc <countButton+0xd2>
    1366:	25 30       	cpi	r18, 0x05	; 5
    1368:	19 f1       	breq	.+70     	; 0x13b0 <countButton+0xc6>
    136a:	c8 f0       	brcs	.+50     	; 0x139e <countButton+0xb4>
    136c:	26 30       	cpi	r18, 0x06	; 6
    136e:	19 f1       	breq	.+70     	; 0x13b6 <countButton+0xcc>
    1370:	25 c0       	rjmp	.+74     	; 0x13bc <countButton+0xd2>
        {
            case 1:
                //lcd_dispWords();
                //lcd_dispRealClock();
				LCD_WriteTimeDateTempHumid();
    1372:	0e 94 84 02 	call	0x508	; 0x508 <LCD_WriteTimeDateTempHumid>
				//LCD_WriteTimeDate();
				//LCD_WriteTimeDateTempHumid();
                //_delay_ms(2000);
				//getDHT();
                break;
    1376:	24 c0       	rjmp	.+72     	; 0x13c0 <countButton+0xd6>
            case 2:
				LCD_WriteTimeDate();
    1378:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_WriteTimeDate>
                //_delay_ms(2000);
				//getDHT();
                //lcd_showDHT11();
                break;
    137c:	21 c0       	rjmp	.+66     	; 0x13c0 <countButton+0xd6>
            case 3:
				makePDasOutput();
    137e:	0e 94 49 07 	call	0xe92	; 0xe92 <makePDasOutput>
                turnOnLCDBacklight();
    1382:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <turnOnLCDBacklight>
    1386:	ff e9       	ldi	r31, 0x9F	; 159
    1388:	26 e8       	ldi	r18, 0x86	; 134
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	f1 50       	subi	r31, 0x01	; 1
    138e:	20 40       	sbci	r18, 0x00	; 0
    1390:	80 40       	sbci	r24, 0x00	; 0
    1392:	e1 f7       	brne	.-8      	; 0x138c <countButton+0xa2>
    1394:	00 c0       	rjmp	.+0      	; 0x1396 <countButton+0xac>
    1396:	00 00       	nop
				//LCD_WriteTimeDate();
				_delay_ms(500);
                turnOffLCDBacklight();
    1398:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <turnOffLCDBacklight>
                break;
    139c:	11 c0       	rjmp	.+34     	; 0x13c0 <countButton+0xd6>
            case 4:
                //adjustClock();
                adjustMin();
    139e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <adjustMin>
                adjustHour();
    13a2:	0e 94 1c 01 	call	0x238	; 0x238 <adjustHour>
                adjustSec();
    13a6:	0e 94 c8 01 	call	0x390	; 0x390 <adjustSec>
                lcd_dispRealClock();
    13aa:	0e 94 fe 04 	call	0x9fc	; 0x9fc <lcd_dispRealClock>
                break;
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <countButton+0xd6>
            case 5:
                lcd_dispAccumulatedTime();
    13b0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <lcd_dispAccumulatedTime>
                break;
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <countButton+0xd6>
            case 6:
                lcd_dispProgInfo();
    13b6:	0e 94 40 06 	call	0xc80	; 0xc80 <lcd_dispProgInfo>
                break;
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <countButton+0xd6>
            default:
                lcd_dispMenu();
    13bc:	0e 94 71 06 	call	0xce2	; 0xce2 <lcd_dispMenu>
    13c0:	9f e3       	ldi	r25, 0x3F	; 63
    13c2:	e2 e4       	ldi	r30, 0x42	; 66
    13c4:	ff e0       	ldi	r31, 0x0F	; 15
    13c6:	91 50       	subi	r25, 0x01	; 1
    13c8:	e0 40       	sbci	r30, 0x00	; 0
    13ca:	f0 40       	sbci	r31, 0x00	; 0
    13cc:	e1 f7       	brne	.-8      	; 0x13c6 <countButton+0xdc>
    13ce:	00 c0       	rjmp	.+0      	; 0x13d0 <countButton+0xe6>
    13d0:	00 00       	nop
                //getDHT();
        }//switch (menuCnt)

        _delay_ms(5000); //show time of menu result

		makePDasInput(); //make LCD in deep power save mode
    13d2:	0e 94 64 07 	call	0xec8	; 0xec8 <makePDasInput>
		pwrOn = 0;
    13d6:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <pwrOn>
    13da:	08 95       	ret
    13dc:	81 e1       	ldi	r24, 0x11	; 17
    13de:	9a e7       	ldi	r25, 0x7A	; 122
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <countButton+0xf6>
    13e4:	00 c0       	rjmp	.+0      	; 0x13e6 <countButton+0xfc>
    13e6:	00 00       	nop
    13e8:	b2 cf       	rjmp	.-156    	; 0x134e <countButton+0x64>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    13ea:	1c 99       	sbic	0x03, 4	; 3
    13ec:	f7 cf       	rjmp	.-18     	; 0x13dc <countButton+0xf2>
    13ee:	96 cf       	rjmp	.-212    	; 0x131c <countButton+0x32>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    13f0:	95 30       	cpi	r25, 0x05	; 5
    13f2:	d8 f7       	brcc	.-10     	; 0x13ea <countButton+0x100>
    13f4:	8f cf       	rjmp	.-226    	; 0x1314 <countButton+0x2a>
    13f6:	e1 e1       	ldi	r30, 0x11	; 17
    13f8:	fa e7       	ldi	r31, 0x7A	; 122
    13fa:	31 97       	sbiw	r30, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <countButton+0x110>
    13fe:	00 c0       	rjmp	.+0      	; 0x1400 <countButton+0x116>
    1400:	00 00       	nop
    1402:	79 cf       	rjmp	.-270    	; 0x12f6 <countButton+0xc>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1404:	1c 99       	sbic	0x03, 4	; 3
    1406:	f7 cf       	rjmp	.-18     	; 0x13f6 <countButton+0x10c>
    1408:	8b cf       	rjmp	.-234    	; 0x1320 <countButton+0x36>
    140a:	81 e1       	ldi	r24, 0x11	; 17
    140c:	9a e7       	ldi	r25, 0x7A	; 122
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <countButton+0x124>
    1412:	00 c0       	rjmp	.+0      	; 0x1414 <countButton+0x12a>
    1414:	00 00       	nop
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	98 cf       	rjmp	.-208    	; 0x134a <countButton+0x60>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    141a:	1c 99       	sbic	0x03, 4	; 3
    141c:	f6 cf       	rjmp	.-20     	; 0x140a <countButton+0x120>
    141e:	82 cf       	rjmp	.-252    	; 0x1324 <countButton+0x3a>

00001420 <__divmodqi4>:
    1420:	87 fb       	bst	r24, 7
    1422:	08 2e       	mov	r0, r24
    1424:	06 26       	eor	r0, r22
    1426:	87 fd       	sbrc	r24, 7
    1428:	81 95       	neg	r24
    142a:	67 fd       	sbrc	r22, 7
    142c:	61 95       	neg	r22
    142e:	0e 94 47 0a 	call	0x148e	; 0x148e <__udivmodqi4>
    1432:	0e f4       	brtc	.+2      	; 0x1436 <__divmodqi4_1>
    1434:	91 95       	neg	r25

00001436 <__divmodqi4_1>:
    1436:	07 fc       	sbrc	r0, 7
    1438:	81 95       	neg	r24

0000143a <__divmodqi4_exit>:
    143a:	08 95       	ret

0000143c <__divmodhi4>:
    143c:	97 fb       	bst	r25, 7
    143e:	07 2e       	mov	r0, r23
    1440:	16 f4       	brtc	.+4      	; 0x1446 <__divmodhi4+0xa>
    1442:	00 94       	com	r0
    1444:	07 d0       	rcall	.+14     	; 0x1454 <__divmodhi4_neg1>
    1446:	77 fd       	sbrc	r23, 7
    1448:	09 d0       	rcall	.+18     	; 0x145c <__divmodhi4_neg2>
    144a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__udivmodhi4>
    144e:	07 fc       	sbrc	r0, 7
    1450:	05 d0       	rcall	.+10     	; 0x145c <__divmodhi4_neg2>
    1452:	3e f4       	brtc	.+14     	; 0x1462 <__divmodhi4_exit>

00001454 <__divmodhi4_neg1>:
    1454:	90 95       	com	r25
    1456:	81 95       	neg	r24
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	08 95       	ret

0000145c <__divmodhi4_neg2>:
    145c:	70 95       	com	r23
    145e:	61 95       	neg	r22
    1460:	7f 4f       	sbci	r23, 0xFF	; 255

00001462 <__divmodhi4_exit>:
    1462:	08 95       	ret

00001464 <__tablejump2__>:
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	05 90       	lpm	r0, Z+
    146a:	f4 91       	lpm	r31, Z
    146c:	e0 2d       	mov	r30, r0
    146e:	09 94       	ijmp

00001470 <__umulhisi3>:
    1470:	a2 9f       	mul	r26, r18
    1472:	b0 01       	movw	r22, r0
    1474:	b3 9f       	mul	r27, r19
    1476:	c0 01       	movw	r24, r0
    1478:	a3 9f       	mul	r26, r19
    147a:	70 0d       	add	r23, r0
    147c:	81 1d       	adc	r24, r1
    147e:	11 24       	eor	r1, r1
    1480:	91 1d       	adc	r25, r1
    1482:	b2 9f       	mul	r27, r18
    1484:	70 0d       	add	r23, r0
    1486:	81 1d       	adc	r24, r1
    1488:	11 24       	eor	r1, r1
    148a:	91 1d       	adc	r25, r1
    148c:	08 95       	ret

0000148e <__udivmodqi4>:
    148e:	99 1b       	sub	r25, r25
    1490:	79 e0       	ldi	r23, 0x09	; 9
    1492:	04 c0       	rjmp	.+8      	; 0x149c <__udivmodqi4_ep>

00001494 <__udivmodqi4_loop>:
    1494:	99 1f       	adc	r25, r25
    1496:	96 17       	cp	r25, r22
    1498:	08 f0       	brcs	.+2      	; 0x149c <__udivmodqi4_ep>
    149a:	96 1b       	sub	r25, r22

0000149c <__udivmodqi4_ep>:
    149c:	88 1f       	adc	r24, r24
    149e:	7a 95       	dec	r23
    14a0:	c9 f7       	brne	.-14     	; 0x1494 <__udivmodqi4_loop>
    14a2:	80 95       	com	r24
    14a4:	08 95       	ret

000014a6 <__udivmodhi4>:
    14a6:	aa 1b       	sub	r26, r26
    14a8:	bb 1b       	sub	r27, r27
    14aa:	51 e1       	ldi	r21, 0x11	; 17
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <__udivmodhi4_ep>

000014ae <__udivmodhi4_loop>:
    14ae:	aa 1f       	adc	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	a6 17       	cp	r26, r22
    14b4:	b7 07       	cpc	r27, r23
    14b6:	10 f0       	brcs	.+4      	; 0x14bc <__udivmodhi4_ep>
    14b8:	a6 1b       	sub	r26, r22
    14ba:	b7 0b       	sbc	r27, r23

000014bc <__udivmodhi4_ep>:
    14bc:	88 1f       	adc	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	5a 95       	dec	r21
    14c2:	a9 f7       	brne	.-22     	; 0x14ae <__udivmodhi4_loop>
    14c4:	80 95       	com	r24
    14c6:	90 95       	com	r25
    14c8:	bc 01       	movw	r22, r24
    14ca:	cd 01       	movw	r24, r26
    14cc:	08 95       	ret

000014ce <atoi>:
    14ce:	fc 01       	movw	r30, r24
    14d0:	88 27       	eor	r24, r24
    14d2:	99 27       	eor	r25, r25
    14d4:	e8 94       	clt
    14d6:	21 91       	ld	r18, Z+
    14d8:	20 32       	cpi	r18, 0x20	; 32
    14da:	e9 f3       	breq	.-6      	; 0x14d6 <atoi+0x8>
    14dc:	29 30       	cpi	r18, 0x09	; 9
    14de:	10 f0       	brcs	.+4      	; 0x14e4 <atoi+0x16>
    14e0:	2e 30       	cpi	r18, 0x0E	; 14
    14e2:	c8 f3       	brcs	.-14     	; 0x14d6 <atoi+0x8>
    14e4:	2b 32       	cpi	r18, 0x2B	; 43
    14e6:	41 f0       	breq	.+16     	; 0x14f8 <atoi+0x2a>
    14e8:	2d 32       	cpi	r18, 0x2D	; 45
    14ea:	39 f4       	brne	.+14     	; 0x14fa <atoi+0x2c>
    14ec:	68 94       	set
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <atoi+0x2a>
    14f0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__mulhi_const_10>
    14f4:	82 0f       	add	r24, r18
    14f6:	91 1d       	adc	r25, r1
    14f8:	21 91       	ld	r18, Z+
    14fa:	20 53       	subi	r18, 0x30	; 48
    14fc:	2a 30       	cpi	r18, 0x0A	; 10
    14fe:	c0 f3       	brcs	.-16     	; 0x14f0 <atoi+0x22>
    1500:	1e f4       	brtc	.+6      	; 0x1508 <atoi+0x3a>
    1502:	90 95       	com	r25
    1504:	81 95       	neg	r24
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	08 95       	ret

0000150a <strtok>:
    150a:	42 e6       	ldi	r20, 0x62	; 98
    150c:	54 e0       	ldi	r21, 0x04	; 4
    150e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <strtok_r>
    1512:	08 95       	ret

00001514 <strcmp>:
    1514:	fb 01       	movw	r30, r22
    1516:	dc 01       	movw	r26, r24
    1518:	8d 91       	ld	r24, X+
    151a:	01 90       	ld	r0, Z+
    151c:	80 19       	sub	r24, r0
    151e:	01 10       	cpse	r0, r1
    1520:	d9 f3       	breq	.-10     	; 0x1518 <strcmp+0x4>
    1522:	99 0b       	sbc	r25, r25
    1524:	08 95       	ret

00001526 <strcpy>:
    1526:	fb 01       	movw	r30, r22
    1528:	dc 01       	movw	r26, r24
    152a:	01 90       	ld	r0, Z+
    152c:	0d 92       	st	X+, r0
    152e:	00 20       	and	r0, r0
    1530:	e1 f7       	brne	.-8      	; 0x152a <strcpy+0x4>
    1532:	08 95       	ret

00001534 <strtok_r>:
    1534:	fa 01       	movw	r30, r20
    1536:	a1 91       	ld	r26, Z+
    1538:	b0 81       	ld	r27, Z
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	19 f4       	brne	.+6      	; 0x1544 <strtok_r+0x10>
    153e:	10 97       	sbiw	r26, 0x00	; 0
    1540:	e1 f0       	breq	.+56     	; 0x157a <strtok_r+0x46>
    1542:	cd 01       	movw	r24, r26
    1544:	dc 01       	movw	r26, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0d 90       	ld	r0, X+
    154a:	00 20       	and	r0, r0
    154c:	11 f4       	brne	.+4      	; 0x1552 <strtok_r+0x1e>
    154e:	c0 01       	movw	r24, r0
    1550:	13 c0       	rjmp	.+38     	; 0x1578 <strtok_r+0x44>
    1552:	fb 01       	movw	r30, r22
    1554:	21 91       	ld	r18, Z+
    1556:	22 23       	and	r18, r18
    1558:	19 f0       	breq	.+6      	; 0x1560 <strtok_r+0x2c>
    155a:	20 15       	cp	r18, r0
    155c:	d9 f7       	brne	.-10     	; 0x1554 <strtok_r+0x20>
    155e:	f3 cf       	rjmp	.-26     	; 0x1546 <strtok_r+0x12>
    1560:	fb 01       	movw	r30, r22
    1562:	21 91       	ld	r18, Z+
    1564:	20 15       	cp	r18, r0
    1566:	19 f4       	brne	.+6      	; 0x156e <strtok_r+0x3a>
    1568:	1e 92       	st	-X, r1
    156a:	11 96       	adiw	r26, 0x01	; 1
    156c:	06 c0       	rjmp	.+12     	; 0x157a <strtok_r+0x46>
    156e:	22 23       	and	r18, r18
    1570:	c1 f7       	brne	.-16     	; 0x1562 <strtok_r+0x2e>
    1572:	0d 90       	ld	r0, X+
    1574:	00 20       	and	r0, r0
    1576:	a1 f7       	brne	.-24     	; 0x1560 <strtok_r+0x2c>
    1578:	d0 01       	movw	r26, r0
    157a:	fa 01       	movw	r30, r20
    157c:	a1 93       	st	Z+, r26
    157e:	b0 83       	st	Z, r27
    1580:	08 95       	ret

00001582 <__itoa_ncheck>:
    1582:	bb 27       	eor	r27, r27
    1584:	4a 30       	cpi	r20, 0x0A	; 10
    1586:	31 f4       	brne	.+12     	; 0x1594 <__itoa_ncheck+0x12>
    1588:	99 23       	and	r25, r25
    158a:	22 f4       	brpl	.+8      	; 0x1594 <__itoa_ncheck+0x12>
    158c:	bd e2       	ldi	r27, 0x2D	; 45
    158e:	90 95       	com	r25
    1590:	81 95       	neg	r24
    1592:	9f 4f       	sbci	r25, 0xFF	; 255
    1594:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__utoa_common>

00001598 <__mulhi_const_10>:
    1598:	7a e0       	ldi	r23, 0x0A	; 10
    159a:	97 9f       	mul	r25, r23
    159c:	90 2d       	mov	r25, r0
    159e:	87 9f       	mul	r24, r23
    15a0:	80 2d       	mov	r24, r0
    15a2:	91 0d       	add	r25, r1
    15a4:	11 24       	eor	r1, r1
    15a6:	08 95       	ret

000015a8 <__utoa_ncheck>:
    15a8:	bb 27       	eor	r27, r27

000015aa <__utoa_common>:
    15aa:	fb 01       	movw	r30, r22
    15ac:	55 27       	eor	r21, r21
    15ae:	aa 27       	eor	r26, r26
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	aa 1f       	adc	r26, r26
    15b6:	a4 17       	cp	r26, r20
    15b8:	10 f0       	brcs	.+4      	; 0x15be <__utoa_common+0x14>
    15ba:	a4 1b       	sub	r26, r20
    15bc:	83 95       	inc	r24
    15be:	50 51       	subi	r21, 0x10	; 16
    15c0:	b9 f7       	brne	.-18     	; 0x15b0 <__utoa_common+0x6>
    15c2:	a0 5d       	subi	r26, 0xD0	; 208
    15c4:	aa 33       	cpi	r26, 0x3A	; 58
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <__utoa_common+0x20>
    15c8:	a9 5d       	subi	r26, 0xD9	; 217
    15ca:	a1 93       	st	Z+, r26
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	79 f7       	brne	.-34     	; 0x15ae <__utoa_common+0x4>
    15d0:	b1 11       	cpse	r27, r1
    15d2:	b1 93       	st	Z+, r27
    15d4:	11 92       	st	Z+, r1
    15d6:	cb 01       	movw	r24, r22
    15d8:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <strrev>

000015dc <strrev>:
    15dc:	dc 01       	movw	r26, r24
    15de:	fc 01       	movw	r30, r24
    15e0:	67 2f       	mov	r22, r23
    15e2:	71 91       	ld	r23, Z+
    15e4:	77 23       	and	r23, r23
    15e6:	e1 f7       	brne	.-8      	; 0x15e0 <strrev+0x4>
    15e8:	32 97       	sbiw	r30, 0x02	; 2
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <strrev+0x18>
    15ec:	7c 91       	ld	r23, X
    15ee:	6d 93       	st	X+, r22
    15f0:	70 83       	st	Z, r23
    15f2:	62 91       	ld	r22, -Z
    15f4:	ae 17       	cp	r26, r30
    15f6:	bf 07       	cpc	r27, r31
    15f8:	c8 f3       	brcs	.-14     	; 0x15ec <strrev+0x10>
    15fa:	08 95       	ret

000015fc <_exit>:
    15fc:	f8 94       	cli

000015fe <__stop_program>:
    15fe:	ff cf       	rjmp	.-2      	; 0x15fe <__stop_program>
