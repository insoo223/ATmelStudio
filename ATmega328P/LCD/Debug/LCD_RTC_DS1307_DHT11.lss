
LCD_RTC_DS1307_DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000372  00800100  000015de  00001672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800472  00800472  000019e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fcf  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001675  00000000  00000000  00006cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000219e  00000000  00000000  00008370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  0000a510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3c  00000000  00000000  0000ac7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f91  00000000  00000000  0000b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000d649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_3>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	d8 01       	movw	r26, r16
      6a:	dc 01       	movw	r26, r24
      6c:	d8 01       	movw	r26, r16
      6e:	e0 01       	movw	r28, r0
      70:	d8 01       	movw	r26, r16
      72:	e0 01       	movw	r28, r0
      74:	d8 01       	movw	r26, r16
      76:	d8 01       	movw	r26, r16
      78:	e0 01       	movw	r28, r0
      7a:	d8 01       	movw	r26, r16
      7c:	e0 01       	movw	r28, r0
      7e:	d8 01       	movw	r26, r16
      80:	cd 03       	fmulsu	r20, r21
      82:	d6 03       	fmuls	r21, r22
      84:	df 03       	fmulsu	r21, r23
      86:	e8 03       	fmulsu	r22, r16
      88:	f1 03       	fmuls	r23, r17
      8a:	fa 03       	fmulsu	r23, r18
      8c:	03 04       	cpc	r0, r3

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	14 e0       	ldi	r17, 0x04	; 4
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	ee ed       	ldi	r30, 0xDE	; 222
      a2:	f5 e1       	ldi	r31, 0x15	; 21
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a2 37       	cpi	r26, 0x72	; 114
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	24 e0       	ldi	r18, 0x04	; 4
      b2:	a2 e7       	ldi	r26, 0x72	; 114
      b4:	b4 e0       	ldi	r27, 0x04	; 4
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a9 38       	cpi	r26, 0x89	; 137
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 18 03 	call	0x630	; 0x630 <main>
      c4:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <getDHT>:

char strTemp[3], strHumid[3];

//-------------------------------------------
void getDHT()
{
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	00 d0       	rcall	.+0      	; 0xd6 <getDHT+0xa>
      d6:	00 d0       	rcall	.+0      	; 0xd8 <getDHT+0xc>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
	uint16_t temp; 
	uint16_t humid; 
	TinuDHT tinudht;
	DHT_VCC_ddr |= _BV(DHT_VCC_bit);
      dc:	22 9a       	sbi	0x04, 2	; 4
	DHT_VCC_port |= _BV(DHT_VCC_bit);
      de:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e0:	2f e9       	ldi	r18, 0x9F	; 159
      e2:	86 e8       	ldi	r24, 0x86	; 134
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	21 50       	subi	r18, 0x01	; 1
      e8:	80 40       	sbci	r24, 0x00	; 0
      ea:	90 40       	sbci	r25, 0x00	; 0
      ec:	e1 f7       	brne	.-8      	; 0xe6 <getDHT+0x1a>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <getDHT+0x24>
      f0:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, TINUDHT_PIN);
      f2:	61 e0       	ldi	r22, 0x01	; 1
      f4:	ce 01       	movw	r24, r28
      f6:	01 96       	adiw	r24, 0x01	; 1
      f8:	0e 94 7b 07 	call	0xef6	; 0xef6 <tinudht_read>
      fc:	2f e9       	ldi	r18, 0x9F	; 159
      fe:	86 e8       	ldi	r24, 0x86	; 134
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	21 50       	subi	r18, 0x01	; 1
     104:	80 40       	sbci	r24, 0x00	; 0
     106:	90 40       	sbci	r25, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <getDHT+0x36>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <getDHT+0x40>
     10c:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, TINUDHT_PIN);
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	ce 01       	movw	r24, r28
     112:	01 96       	adiw	r24, 0x01	; 1
     114:	0e 94 7b 07 	call	0xef6	; 0xef6 <tinudht_read>
	temp = tinudht.temperature;
	humid = tinudht.humidity;
     118:	09 81       	ldd	r16, Y+1	; 0x01
     11a:	1a 81       	ldd	r17, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     11c:	4a e0       	ldi	r20, 0x0A	; 10
     11e:	64 e8       	ldi	r22, 0x84	; 132
     120:	74 e0       	ldi	r23, 0x04	; 4
     122:	8b 81       	ldd	r24, Y+3	; 0x03
     124:	9c 81       	ldd	r25, Y+4	; 0x04
     126:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     12a:	4a e0       	ldi	r20, 0x0A	; 10
     12c:	61 e8       	ldi	r22, 0x81	; 129
     12e:	74 e0       	ldi	r23, 0x04	; 4
     130:	c8 01       	movw	r24, r16
     132:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	lcd_write_string_4d((uint8_t *)strHumid);
	*/

}//getDHT
     136:	0f 90       	pop	r0
     138:	0f 90       	pop	r0
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	08 95       	ret

00000148 <I2C_Init>:
 {
	 I2C_Start(busAddr); // send bus address
	 I2C_Write(deviceRegister); // first byte = device register address
	 I2C_Write(data); // second byte = data for device register
	 I2C_Stop();
 }
     148:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     14c:	8d ef       	ldi	r24, 0xFD	; 253
     14e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     152:	08 95       	ret

00000154 <I2C_Detect>:
     154:	94 ea       	ldi	r25, 0xA4	; 164
     156:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     15a:	ec eb       	ldi	r30, 0xBC	; 188
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	90 81       	ld	r25, Z
     160:	99 23       	and	r25, r25
     162:	ec f7       	brge	.-6      	; 0x15e <I2C_Detect+0xa>
     164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     168:	84 e8       	ldi	r24, 0x84	; 132
     16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     16e:	ec eb       	ldi	r30, 0xBC	; 188
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	88 23       	and	r24, r24
     176:	ec f7       	brge	.-6      	; 0x172 <I2C_Detect+0x1e>
     178:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     17c:	98 7f       	andi	r25, 0xF8	; 248
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	98 31       	cpi	r25, 0x18	; 24
     182:	09 f0       	breq	.+2      	; 0x186 <I2C_Detect+0x32>
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	08 95       	ret

00000188 <I2C_Write>:
     188:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     18c:	84 e8       	ldi	r24, 0x84	; 132
     18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     192:	ec eb       	ldi	r30, 0xBC	; 188
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	88 23       	and	r24, r24
     19a:	ec f7       	brge	.-6      	; 0x196 <I2C_Write+0xe>
     19c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1a0:	98 7f       	andi	r25, 0xF8	; 248
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	98 32       	cpi	r25, 0x28	; 40
     1a6:	09 f4       	brne	.+2      	; 0x1aa <I2C_Write+0x22>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	08 95       	ret

000001ac <I2C_ReadNACK>:
     1ac:	84 e8       	ldi	r24, 0x84	; 132
     1ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1b2:	ec eb       	ldi	r30, 0xBC	; 188
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	88 23       	and	r24, r24
     1ba:	ec f7       	brge	.-6      	; 0x1b6 <I2C_ReadNACK+0xa>
     1bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1c0:	08 95       	ret

000001c2 <I2C_ReadRegister>:
 byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
 {
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	c8 2f       	mov	r28, r24
     1c8:	d6 2f       	mov	r29, r22
	 }
	 return 0; // none detected, so return 0.
 }
 void I2C_Start (byte slaveAddr)
 {
	 I2C_Detect(slaveAddr);
     1ca:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Detect>
 }
 byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
 {
	 byte data = 0;
	 I2C_Start(busAddr); // send device address
	 I2C_Write(deviceRegister); // set register pointer
     1ce:	8d 2f       	mov	r24, r29
     1d0:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>
	 }
	 return 0; // none detected, so return 0.
 }
 void I2C_Start (byte slaveAddr)
 {
	 I2C_Detect(slaveAddr);
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	8c 0f       	add	r24, r28
     1d8:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Detect>
 {
	 byte data = 0;
	 I2C_Start(busAddr); // send device address
	 I2C_Write(deviceRegister); // set register pointer
	 I2C_Start(busAddr+READ); // restart as a read operation
	 data = I2C_ReadNACK(); // read the register data
     1dc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <I2C_ReadNACK>
	 I2C_Stop(); // stop
     1e0:	94 e9       	ldi	r25, 0x94	; 148
     1e2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	 return data;
 }
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <__vector_3>:
    EIMSK = 0x00;

    TIMSK0 = 0x02; //timer 0 interrupt sources

    PRR = 0x00; //power controller
    sei(); //re-enable interrupts
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	0f 92       	push	r0
     1f4:	11 24       	eor	r1, r1
     1f6:	2f 93       	push	r18
     1f8:	3f 93       	push	r19
     1fa:	4f 93       	push	r20
     1fc:	5f 93       	push	r21
     1fe:	6f 93       	push	r22
     200:	7f 93       	push	r23
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ef 93       	push	r30
     210:	ff 93       	push	r31
     212:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <btcnt>
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	98 0f       	add	r25, r24
     21a:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <btcnt>
     21e:	80 fd       	sbrc	r24, 0
     220:	2f c0       	rjmp	.+94     	; 0x280 <__vector_3+0x94>
     222:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <pwrOn>
     226:	81 11       	cpse	r24, r1
     228:	0d c0       	rjmp	.+26     	; 0x244 <__vector_3+0x58>
     22a:	0e 94 2e 08 	call	0x105c	; 0x105c <makePDasOutput>
     22e:	0e 94 91 02 	call	0x522	; 0x522 <lcd_init_4d>
     232:	83 ec       	ldi	r24, 0xC3	; 195
     234:	99 e0       	ldi	r25, 0x09	; 9
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <__vector_3+0x4a>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <__vector_3+0x50>
     23c:	00 00       	nop
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <pwrOn>
     244:	1c 9b       	sbis	0x03, 4	; 3
     246:	16 c0       	rjmp	.+44     	; 0x274 <__vector_3+0x88>
     248:	cb e6       	ldi	r28, 0x6B	; 107
     24a:	d0 e0       	ldi	r29, 0x00	; 0
     24c:	88 81       	ld	r24, Y
     24e:	8f 7e       	andi	r24, 0xEF	; 239
     250:	88 83       	st	Y, r24
     252:	81 ee       	ldi	r24, 0xE1	; 225
     254:	94 e0       	ldi	r25, 0x04	; 4
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <__vector_3+0x6a>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <__vector_3+0x70>
     25c:	00 00       	nop
     25e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <countButton>
     262:	88 81       	ld	r24, Y
     264:	80 61       	ori	r24, 0x10	; 16
     266:	88 83       	st	Y, r24
     268:	81 ee       	ldi	r24, 0xE1	; 225
     26a:	94 e0       	ldi	r25, 0x04	; 4
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <__vector_3+0x80>
     270:	00 c0       	rjmp	.+0      	; 0x272 <__vector_3+0x86>
     272:	00 00       	nop
     274:	8f e4       	ldi	r24, 0x4F	; 79
     276:	93 ec       	ldi	r25, 0xC3	; 195
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <__vector_3+0x8c>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <__vector_3+0x92>
     27e:	00 00       	nop
     280:	ff 91       	pop	r31
     282:	ef 91       	pop	r30
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	bf 91       	pop	r27
     28a:	af 91       	pop	r26
     28c:	9f 91       	pop	r25
     28e:	8f 91       	pop	r24
     290:	7f 91       	pop	r23
     292:	6f 91       	pop	r22
     294:	5f 91       	pop	r21
     296:	4f 91       	pop	r20
     298:	3f 91       	pop	r19
     29a:	2f 91       	pop	r18
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <initINT>:
     2a6:	f8 94       	cli
     2a8:	e8 e6       	ldi	r30, 0x68	; 104
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	81 60       	ori	r24, 0x01	; 1
     2b0:	80 83       	st	Z, r24
     2b2:	eb e6       	ldi	r30, 0x6B	; 107
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 61       	ori	r24, 0x10	; 16
     2ba:	80 83       	st	Z, r24
     2bc:	78 94       	sei
     2be:	08 95       	ret

000002c0 <proceedClock>:
}

void proceedClock()
{
    //WDT interrupt occurs every 8 seconds
    sec += 8;
     2c0:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
     2c4:	88 5f       	subi	r24, 0xF8	; 248
     2c6:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <sec>
    accumulatedSec += 8;
     2ca:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <accumulatedSec>
     2ce:	28 5f       	subi	r18, 0xF8	; 248
     2d0:	20 93 74 04 	sts	0x0474, r18	; 0x800474 <accumulatedSec>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
     2d4:	8c 33       	cpi	r24, 0x3C	; 60
     2d6:	5c f0       	brlt	.+22     	; 0x2ee <proceedClock+0x2e>
    {
        sec%=60;
        min++;
     2d8:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <min>
     2dc:	9f 5f       	subi	r25, 0xFF	; 255
     2de:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <min>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
    {
        sec%=60;
     2e2:	6c e3       	ldi	r22, 0x3C	; 60
     2e4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divmodqi4>
        min++;
        sec += 2;
     2e8:	9e 5f       	subi	r25, 0xFE	; 254
     2ea:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <sec>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
     2ee:	2c 33       	cpi	r18, 0x3C	; 60
     2f0:	64 f0       	brlt	.+24     	; 0x30a <proceedClock+0x4a>
    {
        accumulatedSec%=60;
        accumulatedMin++;
     2f2:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accumulatedMin>
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <accumulatedMin>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
    {
        accumulatedSec%=60;
     2fc:	82 2f       	mov	r24, r18
     2fe:	6c e3       	ldi	r22, 0x3C	; 60
     300:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divmodqi4>
        accumulatedMin++;
        accumulatedSec += 2;
     304:	9e 5f       	subi	r25, 0xFE	; 254
     306:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <accumulatedSec>
    }

    //real-time fetched from compiled time constant __TIME__
    //calculate hours
    if (min >= 60)
     30a:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <min>
     30e:	8c 33       	cpi	r24, 0x3C	; 60
     310:	54 f0       	brlt	.+20     	; 0x326 <proceedClock+0x66>
    {
        min%=60;
     312:	6c e3       	ldi	r22, 0x3C	; 60
     314:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__divmodqi4>
     318:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <min>
        hour++;
     31c:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <hour>
    }
    //system run-time acculated time
    //calculate hours
    //if ((accumulatedMin == 60) && (hourlyAdjusted == 0))
    if (accumulatedMin == 60)
     326:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accumulatedMin>
     32a:	8c 33       	cpi	r24, 0x3C	; 60
     32c:	61 f4       	brne	.+24     	; 0x346 <proceedClock+0x86>
    {
        // adjust time by experiments
        //hourlyAdjusted = 1;
        sec -= 20;
     32e:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
     332:	84 51       	subi	r24, 0x14	; 20
     334:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <sec>
        accumulatedMin = 0;
     338:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <accumulatedMin>
        accumulatedHour++;
     33c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <accumulatedHour>
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <accumulatedHour>
    }
    /*
    if (accumulatedMin == 59)
        hourlyAdjusted = 0;
    */
    if (hour >= 24)
     346:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
     34a:	88 31       	cpi	r24, 0x18	; 24
     34c:	04 f1       	brlt	.+64     	; 0x38e <proceedClock+0xce>
    {
        hour=0;
     34e:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <hour>
        date++;
     352:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <date>
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <date>
        day++;
     35c:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <day>
     360:	8f 5f       	subi	r24, 0xFF	; 255
        if (day >= 7)
     362:	87 30       	cpi	r24, 0x07	; 7
     364:	1c f4       	brge	.+6      	; 0x36c <proceedClock+0xac>
    */
    if (hour >= 24)
    {
        hour=0;
        date++;
        day++;
     366:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <day>
     36a:	11 c0       	rjmp	.+34     	; 0x38e <proceedClock+0xce>
        if (day >= 7)
            day %= 7;
     36c:	93 e9       	ldi	r25, 0x93	; 147
     36e:	89 02       	muls	r24, r25
     370:	91 2d       	mov	r25, r1
     372:	11 24       	eor	r1, r1
     374:	98 0f       	add	r25, r24
     376:	95 95       	asr	r25
     378:	95 95       	asr	r25
     37a:	87 fd       	sbrc	r24, 7
     37c:	93 95       	inc	r25
     37e:	29 2f       	mov	r18, r25
     380:	22 0f       	add	r18, r18
     382:	22 0f       	add	r18, r18
     384:	22 0f       	add	r18, r18
     386:	29 1b       	sub	r18, r25
     388:	82 1b       	sub	r24, r18
     38a:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <day>
    }
    switch (month)
     38e:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <month>
     392:	82 2f       	mov	r24, r18
     394:	02 2e       	mov	r0, r18
     396:	00 0c       	add	r0, r0
     398:	99 0b       	sbc	r25, r25
     39a:	aa 0b       	sbc	r26, r26
     39c:	bb 0b       	sbc	r27, r27
     39e:	fc 01       	movw	r30, r24
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	ec 30       	cpi	r30, 0x0C	; 12
     3a4:	f1 05       	cpc	r31, r1
     3a6:	60 f4       	brcc	.+24     	; 0x3c0 <proceedClock+0x100>
     3a8:	ec 5c       	subi	r30, 0xCC	; 204
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__tablejump2__>
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            monthEndDate = 31;
     3b0:	8f e1       	ldi	r24, 0x1F	; 31
     3b2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <monthEndDate>
            break;
     3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <proceedClock+0x106>
        case 2:
            monthEndDate = 28;
     3b8:	8c e1       	ldi	r24, 0x1C	; 28
     3ba:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <monthEndDate>
            break;
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <proceedClock+0x106>
        default:
            monthEndDate = 30;
     3c0:	8e e1       	ldi	r24, 0x1E	; 30
     3c2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <monthEndDate>
    }//switch (month)

    if (date > monthEndDate)
     3c6:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <date>
     3ca:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <monthEndDate>
     3ce:	89 17       	cp	r24, r25
     3d0:	34 f4       	brge	.+12     	; 0x3de <proceedClock+0x11e>
    {
        date=1;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <date>
        month++;
     3d8:	2f 5f       	subi	r18, 0xFF	; 255
     3da:	20 93 79 04 	sts	0x0479, r18	; 0x800479 <month>
    }

    if (month > 12)
     3de:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <month>
     3e2:	8d 30       	cpi	r24, 0x0D	; 13
     3e4:	44 f0       	brlt	.+16     	; 0x3f6 <proceedClock+0x136>
    {
        month=1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
        year++;
     3ec:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <year>
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <year>
     3f6:	08 95       	ret

000003f8 <__vector_6>:
	}//if ((btcnt++ % 2) == 0)
}//ISR(PCINT0_vect)

//-----------------------------------
ISR(WDT_vect)
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
    //PORTB |= _BV(PB4);
    proceedClock();
     41a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <proceedClock>
    lcd_dispWords(wd%MAXWORDCNT);
     41e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <wd>
     422:	9d ec       	ldi	r25, 0xCD	; 205
     424:	89 9f       	mul	r24, r25
     426:	91 2d       	mov	r25, r1
     428:	11 24       	eor	r1, r1
     42a:	96 95       	lsr	r25
     42c:	96 95       	lsr	r25
     42e:	96 95       	lsr	r25
     430:	99 0f       	add	r25, r25
     432:	29 2f       	mov	r18, r25
     434:	22 0f       	add	r18, r18
     436:	22 0f       	add	r18, r18
     438:	92 0f       	add	r25, r18
     43a:	89 1b       	sub	r24, r25
     43c:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_dispWords>
    wd++;
     440:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <wd>
     444:	8f 5f       	subi	r24, 0xFF	; 255
     446:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <wd>
    //lcd_dispRealClock();
    //PORTB &= ~_BV(PB4);
}//ISR(WDT_vect)
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	bf 91       	pop	r27
     450:	af 91       	pop	r26
     452:	9f 91       	pop	r25
     454:	8f 91       	pop	r24
     456:	7f 91       	pop	r23
     458:	6f 91       	pop	r22
     45a:	5f 91       	pop	r21
     45c:	4f 91       	pop	r20
     45e:	3f 91       	pop	r19
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~_BV(lcd_D7_bit);                        // assume that data is '0'
     46c:	5f 98       	cbi	0x0b, 7	; 11
    if (theByte & 1<<7) lcd_D7_port |= _BV(lcd_D7_bit);     // make data = '1' if necessary
     46e:	88 23       	and	r24, r24
     470:	0c f4       	brge	.+2      	; 0x474 <lcd_write_4+0x8>
     472:	5f 9a       	sbi	0x0b, 7	; 11

    lcd_D6_port &= ~_BV(lcd_D6_bit);                        // repeat for each data bit
     474:	5e 98       	cbi	0x0b, 6	; 11
    if (theByte & 1<<6) lcd_D6_port |= _BV(lcd_D6_bit);
     476:	86 fd       	sbrc	r24, 6
     478:	5e 9a       	sbi	0x0b, 6	; 11

    lcd_D5_port &= ~_BV(lcd_D5_bit);
     47a:	5d 98       	cbi	0x0b, 5	; 11
    if (theByte & 1<<5) lcd_D5_port |= _BV(lcd_D5_bit);
     47c:	85 fd       	sbrc	r24, 5
     47e:	5d 9a       	sbi	0x0b, 5	; 11

    lcd_D4_port &= ~_BV(lcd_D4_bit);
     480:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<4) lcd_D4_port |= _BV(lcd_D4_bit);
     482:	84 fd       	sbrc	r24, 4
     484:	5c 9a       	sbi	0x0b, 4	; 11

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= _BV(lcd_E_bit);                   // Enable pin high
     486:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     488:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~_BV(lcd_E_bit);                  // Enable pin low
     48a:	5b 98       	cbi	0x0b, 3	; 11
     48c:	00 00       	nop
     48e:	08 95       	ret

00000490 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     490:	cf 93       	push	r28
     492:	c8 2f       	mov	r28, r24
    lcd_RS_port |= _BV(lcd_RS_bit);                 // select the Data Register (RS high)
     494:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     496:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     498:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     49c:	8c 2f       	mov	r24, r28
     49e:	82 95       	swap	r24
     4a0:	80 7f       	andi	r24, 0xF0	; 240
     4a2:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
}
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <lcd_write_string_4d+0xa>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     4ba:	1a 82       	std	Y+2, r1	; 0x02
     4bc:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     4be:	e9 81       	ldd	r30, Y+1	; 0x01
     4c0:	fa 81       	ldd	r31, Y+2	; 0x02
     4c2:	e8 0f       	add	r30, r24
     4c4:	f9 1f       	adc	r31, r25
     4c6:	80 81       	ld	r24, Z
     4c8:	88 23       	and	r24, r24
     4ca:	b9 f0       	breq	.+46     	; 0x4fa <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     4cc:	e9 81       	ldd	r30, Y+1	; 0x01
     4ce:	fa 81       	ldd	r31, Y+2	; 0x02
     4d0:	e0 0f       	add	r30, r16
     4d2:	f1 1f       	adc	r31, r17
     4d4:	80 81       	ld	r24, Z
     4d6:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
        i++;
     4da:	29 81       	ldd	r18, Y+1	; 0x01
     4dc:	3a 81       	ldd	r19, Y+2	; 0x02
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	3a 83       	std	Y+2, r19	; 0x02
     4e4:	29 83       	std	Y+1, r18	; 0x01
     4e6:	84 e1       	ldi	r24, 0x14	; 20
     4e8:	8a 95       	dec	r24
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <lcd_write_string_4d+0x3e>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     4ec:	e9 81       	ldd	r30, Y+1	; 0x01
     4ee:	fa 81       	ldd	r31, Y+2	; 0x02
     4f0:	e0 0f       	add	r30, r16
     4f2:	f1 1f       	adc	r31, r17
     4f4:	80 81       	ld	r24, Z
     4f6:	81 11       	cpse	r24, r1
     4f8:	e9 cf       	rjmp	.-46     	; 0x4cc <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(DELAY_INST);                              // 40 uS delay (min)
    }
}
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     508:	cf 93       	push	r28
     50a:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     50c:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     50e:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     510:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     514:	8c 2f       	mov	r24, r28
     516:	82 95       	swap	r24
     518:	80 7f       	andi	r24, 0xF0	; 240
     51a:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
}
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	8f e0       	ldi	r24, 0x0F	; 15
     524:	97 e2       	ldi	r25, 0x27	; 39
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <lcd_init_4d+0x4>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <lcd_init_4d+0xa>
     52c:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     52e:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     530:	5b 98       	cbi	0x0b, 3	; 11

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     532:	80 e3       	ldi	r24, 0x30	; 48
     534:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
     538:	81 ee       	ldi	r24, 0xE1	; 225
     53a:	94 e0       	ldi	r25, 0x04	; 4
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <lcd_init_4d+0x1a>
     540:	00 c0       	rjmp	.+0      	; 0x542 <lcd_init_4d+0x20>
     542:	00 00       	nop
    //_delay_ms(10);                                  // 4.1 mS delay (min)
	_delay_ms(5); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     544:	80 e3       	ldi	r24, 0x30	; 48
     546:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
     54a:	8f e2       	ldi	r24, 0x2F	; 47
     54c:	95 e7       	ldi	r25, 0x75	; 117
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <lcd_init_4d+0x2c>
     552:	00 c0       	rjmp	.+0      	; 0x554 <lcd_init_4d+0x32>
     554:	00 00       	nop
    //_delay_us(200);                                 // 100uS delay (min)
	_delay_ms(120); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     556:	80 e3       	ldi	r24, 0x30	; 48
     558:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
     55c:	83 ec       	ldi	r24, 0xC3	; 195
     55e:	99 e0       	ldi	r25, 0x09	; 9
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <lcd_init_4d+0x3e>
     564:	00 c0       	rjmp	.+0      	; 0x566 <lcd_init_4d+0x44>
     566:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     568:	88 e2       	ldi	r24, 0x28	; 40
     56a:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56e:	94 e1       	ldi	r25, 0x14	; 20
     570:	9a 95       	dec	r25
     572:	f1 f7       	brne	.-4      	; 0x570 <lcd_init_4d+0x4e>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     574:	88 e2       	ldi	r24, 0x28	; 40
     576:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     57a:	84 e1       	ldi	r24, 0x14	; 20
     57c:	8a 95       	dec	r24
     57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init_4d+0x5a>
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     586:	94 e1       	ldi	r25, 0x14	; 20
     588:	9a 95       	dec	r25
     58a:	f1 f7       	brne	.-4      	; 0x588 <lcd_init_4d+0x66>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     592:	87 ee       	ldi	r24, 0xE7	; 231
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_init_4d+0x74>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <lcd_init_4d+0x7a>
     59c:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a4:	94 e1       	ldi	r25, 0x14	; 20
     5a6:	9a 95       	dec	r25
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <lcd_init_4d+0x84>

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     5aa:	8c e0       	ldi	r24, 0x0C	; 12
     5ac:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     5b0:	84 e1       	ldi	r24, 0x14	; 20
     5b2:	8a 95       	dec	r24
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <lcd_init_4d+0x90>
     5b6:	08 95       	ret

000005b8 <dispNotice>:
	SetTimeDate(wkDay, month, day, year,  ampm,  h,  m,  s);
	_delay_ms(1000);
	
	LCD_TimeDate();
	_delay_ms(3000);
}//setTime2DS1307
     5b8:	0e 94 2e 08 	call	0x105c	; 0x105c <makePDasOutput>
     5bc:	0e 94 91 02 	call	0x522	; 0x522 <lcd_init_4d>
     5c0:	89 ef       	ldi	r24, 0xF9	; 249
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <dispNotice+0xc>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <dispNotice+0x12>
     5ca:	00 00       	nop
     5cc:	80 e8       	ldi	r24, 0x80	; 128
     5ce:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     5d2:	94 e1       	ldi	r25, 0x14	; 20
     5d4:	9a 95       	dec	r25
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <dispNotice+0x1c>
     5d8:	8e ec       	ldi	r24, 0xCE	; 206
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     5e0:	80 ec       	ldi	r24, 0xC0	; 192
     5e2:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     5e6:	24 e1       	ldi	r18, 0x14	; 20
     5e8:	2a 95       	dec	r18
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <dispNotice+0x30>
     5ec:	8c ed       	ldi	r24, 0xDC	; 220
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     5f4:	8f eb       	ldi	r24, 0xBF	; 191
     5f6:	97 e2       	ldi	r25, 0x27	; 39
     5f8:	29 e0       	ldi	r18, 0x09	; 9
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	90 40       	sbci	r25, 0x00	; 0
     5fe:	20 40       	sbci	r18, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <dispNotice+0x42>
     602:	00 c0       	rjmp	.+0      	; 0x604 <dispNotice+0x4c>
     604:	00 00       	nop
     606:	0e 94 49 08 	call	0x1092	; 0x1092 <makePDasInput>
     60a:	08 95       	ret

0000060c <config>:
     60c:	57 9a       	sbi	0x0a, 7	; 10
     60e:	56 9a       	sbi	0x0a, 6	; 10
     610:	55 9a       	sbi	0x0a, 5	; 10
     612:	54 9a       	sbi	0x0a, 4	; 10
     614:	20 9a       	sbi	0x04, 0	; 4
     616:	28 9a       	sbi	0x05, 0	; 5
     618:	26 9a       	sbi	0x04, 6	; 4
     61a:	2e 98       	cbi	0x05, 6	; 5
     61c:	27 9a       	sbi	0x04, 7	; 4
     61e:	2f 98       	cbi	0x05, 7	; 5
     620:	22 9a       	sbi	0x04, 2	; 4
     622:	2a 98       	cbi	0x05, 2	; 5
     624:	24 98       	cbi	0x04, 4	; 4
     626:	53 9a       	sbi	0x0a, 3	; 10
     628:	52 9a       	sbi	0x0a, 2	; 10
     62a:	23 9a       	sbi	0x04, 3	; 4
     62c:	2b 98       	cbi	0x05, 3	; 5
     62e:	08 95       	ret

00000630 <main>:
     630:	0e 94 06 03 	call	0x60c	; 0x60c <config>
     634:	0e 94 53 01 	call	0x2a6	; 0x2a6 <initINT>
     638:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_Init>
     63c:	0e 94 43 06 	call	0xc86	; 0xc86 <parseCompileTime>
     640:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <dispNotice>
     644:	83 b7       	in	r24, 0x33	; 51
     646:	81 7f       	andi	r24, 0xF1	; 241
     648:	84 60       	ori	r24, 0x04	; 4
     64a:	83 bf       	out	0x33, r24	; 51
     64c:	83 b7       	in	r24, 0x33	; 51
     64e:	81 60       	ori	r24, 0x01	; 1
     650:	83 bf       	out	0x33, r24	; 51
     652:	88 95       	sleep
     654:	83 b7       	in	r24, 0x33	; 51
     656:	8e 7f       	andi	r24, 0xFE	; 254
     658:	83 bf       	out	0x33, r24	; 51
     65a:	f8 cf       	rjmp	.-16     	; 0x64c <main+0x1c>

0000065c <turnOnLCDBacklight>:
     65c:	28 98       	cbi	0x05, 0	; 5
     65e:	08 95       	ret

00000660 <turnOffLCDBacklight>:
     660:	28 9a       	sbi	0x05, 0	; 5
     662:	08 95       	ret

00000664 <lcd_dispRealClock>:
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	6c 97       	sbiw	r28, 0x1c	; 28
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	80 e8       	ldi	r24, 0x80	; 128
     67a:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     67e:	84 e1       	ldi	r24, 0x14	; 20
     680:	8a 95       	dec	r24
     682:	f1 f7       	brne	.-4      	; 0x680 <lcd_dispRealClock+0x1c>
     684:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
     688:	4a e0       	ldi	r20, 0x0A	; 10
     68a:	be 01       	movw	r22, r28
     68c:	69 5f       	subi	r22, 0xF9	; 249
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	08 2e       	mov	r0, r24
     692:	00 0c       	add	r0, r0
     694:	99 0b       	sbc	r25, r25
     696:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     69a:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <min>
     69e:	4a e0       	ldi	r20, 0x0A	; 10
     6a0:	be 01       	movw	r22, r28
     6a2:	6c 5f       	subi	r22, 0xFC	; 252
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	08 2e       	mov	r0, r24
     6a8:	00 0c       	add	r0, r0
     6aa:	99 0b       	sbc	r25, r25
     6ac:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     6b0:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
     6b4:	4a e0       	ldi	r20, 0x0A	; 10
     6b6:	be 01       	movw	r22, r28
     6b8:	6f 5f       	subi	r22, 0xFF	; 255
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	08 2e       	mov	r0, r24
     6be:	00 0c       	add	r0, r0
     6c0:	99 0b       	sbc	r25, r25
     6c2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     6c6:	ce 01       	movw	r24, r28
     6c8:	07 96       	adiw	r24, 0x07	; 7
     6ca:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     6ce:	83 e2       	ldi	r24, 0x23	; 35
     6d0:	94 e0       	ldi	r25, 0x04	; 4
     6d2:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     6d6:	ce 01       	movw	r24, r28
     6d8:	04 96       	adiw	r24, 0x04	; 4
     6da:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     6de:	83 e2       	ldi	r24, 0x23	; 35
     6e0:	94 e0       	ldi	r25, 0x04	; 4
     6e2:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     6e6:	ce 01       	movw	r24, r28
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	94 e0       	ldi	r25, 0x04	; 4
     6f2:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     6f6:	84 e1       	ldi	r24, 0x14	; 20
     6f8:	8a 95       	dec	r24
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <lcd_dispRealClock+0x94>
     6fc:	80 ec       	ldi	r24, 0xC0	; 192
     6fe:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     702:	84 e1       	ldi	r24, 0x14	; 20
     704:	8a 95       	dec	r24
     706:	f1 f7       	brne	.-4      	; 0x704 <lcd_dispRealClock+0xa0>
     708:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <year>
     70c:	4a e0       	ldi	r20, 0x0A	; 10
     70e:	be 01       	movw	r22, r28
     710:	66 5f       	subi	r22, 0xF6	; 246
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	08 2e       	mov	r0, r24
     716:	00 0c       	add	r0, r0
     718:	99 0b       	sbc	r25, r25
     71a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     71e:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <month>
     722:	4a e0       	ldi	r20, 0x0A	; 10
     724:	be 01       	movw	r22, r28
     726:	63 5f       	subi	r22, 0xF3	; 243
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	08 2e       	mov	r0, r24
     72c:	00 0c       	add	r0, r0
     72e:	99 0b       	sbc	r25, r25
     730:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     734:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <date>
     738:	4a e0       	ldi	r20, 0x0A	; 10
     73a:	be 01       	movw	r22, r28
     73c:	60 5f       	subi	r22, 0xF0	; 240
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	08 2e       	mov	r0, r24
     742:	00 0c       	add	r0, r0
     744:	99 0b       	sbc	r25, r25
     746:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     74a:	ce 01       	movw	r24, r28
     74c:	0a 96       	adiw	r24, 0x0a	; 10
     74e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     752:	8c e0       	ldi	r24, 0x0C	; 12
     754:	94 e0       	ldi	r25, 0x04	; 4
     756:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     75a:	ce 01       	movw	r24, r28
     75c:	0d 96       	adiw	r24, 0x0d	; 13
     75e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     762:	8c e0       	ldi	r24, 0x0C	; 12
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     76a:	ce 01       	movw	r24, r28
     76c:	40 96       	adiw	r24, 0x10	; 16
     76e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     772:	8a e0       	ldi	r24, 0x0A	; 10
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     77a:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <day>
     77e:	8e 2f       	mov	r24, r30
     780:	ee 0f       	add	r30, r30
     782:	99 0b       	sbc	r25, r25
     784:	aa 0b       	sbc	r26, r26
     786:	bb 0b       	sbc	r27, r27
     788:	87 30       	cpi	r24, 0x07	; 7
     78a:	91 05       	cpc	r25, r1
     78c:	08 f0       	brcs	.+2      	; 0x790 <lcd_dispRealClock+0x12c>
     78e:	43 c0       	rjmp	.+134    	; 0x816 <lcd_dispRealClock+0x1b2>
     790:	fc 01       	movw	r30, r24
     792:	e0 5c       	subi	r30, 0xC0	; 192
     794:	ff 4f       	sbci	r31, 0xFF	; 255
     796:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__tablejump2__>
     79a:	83 e5       	ldi	r24, 0x53	; 83
     79c:	95 e7       	ldi	r25, 0x75	; 117
     79e:	ae e6       	ldi	r26, 0x6E	; 110
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	8b 8b       	std	Y+19, r24	; 0x13
     7a4:	9c 8b       	std	Y+20, r25	; 0x14
     7a6:	ad 8b       	std	Y+21, r26	; 0x15
     7a8:	be 8b       	std	Y+22, r27	; 0x16
     7aa:	35 c0       	rjmp	.+106    	; 0x816 <lcd_dispRealClock+0x1b2>
     7ac:	8d e4       	ldi	r24, 0x4D	; 77
     7ae:	9f e6       	ldi	r25, 0x6F	; 111
     7b0:	ae e6       	ldi	r26, 0x6E	; 110
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	8b 8b       	std	Y+19, r24	; 0x13
     7b6:	9c 8b       	std	Y+20, r25	; 0x14
     7b8:	ad 8b       	std	Y+21, r26	; 0x15
     7ba:	be 8b       	std	Y+22, r27	; 0x16
     7bc:	2c c0       	rjmp	.+88     	; 0x816 <lcd_dispRealClock+0x1b2>
     7be:	84 e5       	ldi	r24, 0x54	; 84
     7c0:	95 e7       	ldi	r25, 0x75	; 117
     7c2:	a5 e6       	ldi	r26, 0x65	; 101
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	8b 8b       	std	Y+19, r24	; 0x13
     7c8:	9c 8b       	std	Y+20, r25	; 0x14
     7ca:	ad 8b       	std	Y+21, r26	; 0x15
     7cc:	be 8b       	std	Y+22, r27	; 0x16
     7ce:	23 c0       	rjmp	.+70     	; 0x816 <lcd_dispRealClock+0x1b2>
     7d0:	87 e5       	ldi	r24, 0x57	; 87
     7d2:	95 e6       	ldi	r25, 0x65	; 101
     7d4:	a4 e6       	ldi	r26, 0x64	; 100
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	8b 8b       	std	Y+19, r24	; 0x13
     7da:	9c 8b       	std	Y+20, r25	; 0x14
     7dc:	ad 8b       	std	Y+21, r26	; 0x15
     7de:	be 8b       	std	Y+22, r27	; 0x16
     7e0:	1a c0       	rjmp	.+52     	; 0x816 <lcd_dispRealClock+0x1b2>
     7e2:	84 e5       	ldi	r24, 0x54	; 84
     7e4:	98 e6       	ldi	r25, 0x68	; 104
     7e6:	a5 e7       	ldi	r26, 0x75	; 117
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	8b 8b       	std	Y+19, r24	; 0x13
     7ec:	9c 8b       	std	Y+20, r25	; 0x14
     7ee:	ad 8b       	std	Y+21, r26	; 0x15
     7f0:	be 8b       	std	Y+22, r27	; 0x16
     7f2:	11 c0       	rjmp	.+34     	; 0x816 <lcd_dispRealClock+0x1b2>
     7f4:	86 e4       	ldi	r24, 0x46	; 70
     7f6:	92 e7       	ldi	r25, 0x72	; 114
     7f8:	a9 e6       	ldi	r26, 0x69	; 105
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	8b 8b       	std	Y+19, r24	; 0x13
     7fe:	9c 8b       	std	Y+20, r25	; 0x14
     800:	ad 8b       	std	Y+21, r26	; 0x15
     802:	be 8b       	std	Y+22, r27	; 0x16
     804:	08 c0       	rjmp	.+16     	; 0x816 <lcd_dispRealClock+0x1b2>
     806:	83 e5       	ldi	r24, 0x53	; 83
     808:	91 e6       	ldi	r25, 0x61	; 97
     80a:	a4 e7       	ldi	r26, 0x74	; 116
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	8b 8b       	std	Y+19, r24	; 0x13
     810:	9c 8b       	std	Y+20, r25	; 0x14
     812:	ad 8b       	std	Y+21, r26	; 0x15
     814:	be 8b       	std	Y+22, r27	; 0x16
     816:	ce 01       	movw	r24, r28
     818:	43 96       	adiw	r24, 0x13	; 19
     81a:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	94 e0       	ldi	r25, 0x04	; 4
     822:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     826:	84 e1       	ldi	r24, 0x14	; 20
     828:	8a 95       	dec	r24
     82a:	f1 f7       	brne	.-4      	; 0x828 <lcd_dispRealClock+0x1c4>
     82c:	6c 96       	adiw	r28, 0x1c	; 28
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <lcd_dispAccumulatedTime>:
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	29 97       	sbiw	r28, 0x09	; 9
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	80 ec       	ldi	r24, 0xC0	; 192
     854:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     858:	84 e1       	ldi	r24, 0x14	; 20
     85a:	8a 95       	dec	r24
     85c:	f1 f7       	brne	.-4      	; 0x85a <lcd_dispAccumulatedTime+0x1c>
     85e:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <accumulatedHour>
     862:	4a e0       	ldi	r20, 0x0A	; 10
     864:	be 01       	movw	r22, r28
     866:	69 5f       	subi	r22, 0xF9	; 249
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	08 2e       	mov	r0, r24
     86c:	00 0c       	add	r0, r0
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     874:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accumulatedMin>
     878:	4a e0       	ldi	r20, 0x0A	; 10
     87a:	be 01       	movw	r22, r28
     87c:	6c 5f       	subi	r22, 0xFC	; 252
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	08 2e       	mov	r0, r24
     882:	00 0c       	add	r0, r0
     884:	99 0b       	sbc	r25, r25
     886:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     88a:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <accumulatedSec>
     88e:	4a e0       	ldi	r20, 0x0A	; 10
     890:	be 01       	movw	r22, r28
     892:	6f 5f       	subi	r22, 0xFF	; 255
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	08 2e       	mov	r0, r24
     898:	00 0c       	add	r0, r0
     89a:	99 0b       	sbc	r25, r25
     89c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
     8a0:	ce 01       	movw	r24, r28
     8a2:	07 96       	adiw	r24, 0x07	; 7
     8a4:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8a8:	83 e2       	ldi	r24, 0x23	; 35
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8b0:	ce 01       	movw	r24, r28
     8b2:	04 96       	adiw	r24, 0x04	; 4
     8b4:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8b8:	83 e2       	ldi	r24, 0x23	; 35
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8c8:	84 e0       	ldi	r24, 0x04	; 4
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8d0:	84 e1       	ldi	r24, 0x14	; 20
     8d2:	8a 95       	dec	r24
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <lcd_dispAccumulatedTime+0x94>
     8d6:	29 96       	adiw	r28, 0x09	; 9
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <lcd_dispProgInfo>:
     8e8:	80 e8       	ldi	r24, 0x80	; 128
     8ea:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     8ee:	24 e1       	ldi	r18, 0x14	; 20
     8f0:	2a 95       	dec	r18
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <lcd_dispProgInfo+0x8>
     8f4:	8f e3       	ldi	r24, 0x3F	; 63
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8fc:	80 ec       	ldi	r24, 0xC0	; 192
     8fe:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     902:	84 e1       	ldi	r24, 0x14	; 20
     904:	8a 95       	dec	r24
     906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0x5>
     908:	80 e3       	ldi	r24, 0x30	; 48
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     910:	9f e3       	ldi	r25, 0x3F	; 63
     912:	2d e0       	ldi	r18, 0x0D	; 13
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	91 50       	subi	r25, 0x01	; 1
     918:	20 40       	sbci	r18, 0x00	; 0
     91a:	80 40       	sbci	r24, 0x00	; 0
     91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0x17>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0x21>
     920:	00 00       	nop
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     928:	94 e1       	ldi	r25, 0x14	; 20
     92a:	9a 95       	dec	r25
     92c:	f1 f7       	brne	.-4      	; 0x92a <__stack+0x2b>
     92e:	81 e2       	ldi	r24, 0x21	; 33
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     936:	2f e7       	ldi	r18, 0x7F	; 127
     938:	8a e1       	ldi	r24, 0x1A	; 26
     93a:	96 e0       	ldi	r25, 0x06	; 6
     93c:	21 50       	subi	r18, 0x01	; 1
     93e:	80 40       	sbci	r24, 0x00	; 0
     940:	90 40       	sbci	r25, 0x00	; 0
     942:	e1 f7       	brne	.-8      	; 0x93c <__stack+0x3d>
     944:	00 c0       	rjmp	.+0      	; 0x946 <__stack+0x47>
     946:	00 00       	nop
     948:	08 95       	ret

0000094a <lcd_dispMenu>:
     94a:	80 e8       	ldi	r24, 0x80	; 128
     94c:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     950:	24 e1       	ldi	r18, 0x14	; 20
     952:	2a 95       	dec	r18
     954:	f1 f7       	brne	.-4      	; 0x952 <lcd_dispMenu+0x8>
     956:	80 e1       	ldi	r24, 0x10	; 16
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     95e:	80 ec       	ldi	r24, 0xC0	; 192
     960:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     964:	84 e1       	ldi	r24, 0x14	; 20
     966:	8a 95       	dec	r24
     968:	f1 f7       	brne	.-4      	; 0x966 <lcd_dispMenu+0x1c>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     972:	9f eb       	ldi	r25, 0xBF	; 191
     974:	27 e2       	ldi	r18, 0x27	; 39
     976:	89 e0       	ldi	r24, 0x09	; 9
     978:	91 50       	subi	r25, 0x01	; 1
     97a:	20 40       	sbci	r18, 0x00	; 0
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <lcd_dispMenu+0x2e>
     980:	00 c0       	rjmp	.+0      	; 0x982 <lcd_dispMenu+0x38>
     982:	00 00       	nop
     984:	08 95       	ret

00000986 <lcd_dispWords>:
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	e8 2e       	mov	r14, r24
     994:	80 e8       	ldi	r24, 0x80	; 128
     996:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     99a:	24 e1       	ldi	r18, 0x14	; 20
     99c:	2a 95       	dec	r18
     99e:	f1 f7       	brne	.-4      	; 0x99c <lcd_dispWords+0x16>
     9a0:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <min>
     9a4:	93 78       	andi	r25, 0x83	; 131
     9a6:	1c f4       	brge	.+6      	; 0x9ae <lcd_dispWords+0x28>
     9a8:	91 50       	subi	r25, 0x01	; 1
     9aa:	9c 6f       	ori	r25, 0xFC	; 252
     9ac:	9f 5f       	subi	r25, 0xFF	; 255
     9ae:	99 23       	and	r25, r25
     9b0:	ec f0       	brlt	.+58     	; 0x9ec <lcd_dispWords+0x66>
     9b2:	92 30       	cpi	r25, 0x02	; 2
     9b4:	1c f0       	brlt	.+6      	; 0x9bc <lcd_dispWords+0x36>
     9b6:	94 30       	cpi	r25, 0x04	; 4
     9b8:	6c f0       	brlt	.+26     	; 0x9d4 <lcd_dispWords+0x4e>
     9ba:	18 c0       	rjmp	.+48     	; 0x9ec <lcd_dispWords+0x66>
     9bc:	30 e2       	ldi	r19, 0x20	; 32
     9be:	e3 9e       	mul	r14, r19
     9c0:	c0 01       	movw	r24, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	ec 01       	movw	r28, r24
     9c6:	c2 57       	subi	r28, 0x72	; 114
     9c8:	dd 4f       	sbci	r29, 0xFD	; 253
     9ca:	9c 01       	movw	r18, r24
     9cc:	22 56       	subi	r18, 0x62	; 98
     9ce:	3d 4f       	sbci	r19, 0xFD	; 253
     9d0:	79 01       	movw	r14, r18
     9d2:	10 c0       	rjmp	.+32     	; 0x9f4 <lcd_dispWords+0x6e>
     9d4:	30 e2       	ldi	r19, 0x20	; 32
     9d6:	e3 9e       	mul	r14, r19
     9d8:	c0 01       	movw	r24, r0
     9da:	11 24       	eor	r1, r1
     9dc:	ec 01       	movw	r28, r24
     9de:	c2 5b       	subi	r28, 0xB2	; 178
     9e0:	de 4f       	sbci	r29, 0xFE	; 254
     9e2:	9c 01       	movw	r18, r24
     9e4:	22 5a       	subi	r18, 0xA2	; 162
     9e6:	3e 4f       	sbci	r19, 0xFE	; 254
     9e8:	79 01       	movw	r14, r18
     9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <lcd_dispWords+0x6e>
     9ec:	e1 2c       	mov	r14, r1
     9ee:	f1 2c       	mov	r15, r1
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
     9f4:	ce 01       	movw	r24, r28
     9f6:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     9fa:	fe 01       	movw	r30, r28
     9fc:	01 90       	ld	r0, Z+
     9fe:	00 20       	and	r0, r0
     a00:	e9 f7       	brne	.-6      	; 0x9fc <lcd_dispWords+0x76>
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	ec 1b       	sub	r30, r28
     a06:	fd 0b       	sbc	r31, r29
     a08:	00 e1       	ldi	r16, 0x10	; 16
     a0a:	10 e0       	ldi	r17, 0x00	; 0
     a0c:	0e 1b       	sub	r16, r30
     a0e:	11 09       	sbc	r17, r1
     a10:	10 16       	cp	r1, r16
     a12:	11 06       	cpc	r1, r17
     a14:	54 f4       	brge	.+20     	; 0xa2a <lcd_dispWords+0xa4>
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	80 e2       	ldi	r24, 0x20	; 32
     a1a:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     a1e:	cf 5f       	subi	r28, 0xFF	; 255
     a20:	2c 2f       	mov	r18, r28
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	20 17       	cp	r18, r16
     a26:	31 07       	cpc	r19, r17
     a28:	bc f3       	brlt	.-18     	; 0xa18 <lcd_dispWords+0x92>
     a2a:	80 ec       	ldi	r24, 0xC0	; 192
     a2c:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     a30:	34 e1       	ldi	r19, 0x14	; 20
     a32:	3a 95       	dec	r19
     a34:	f1 f7       	brne	.-4      	; 0xa32 <lcd_dispWords+0xac>
     a36:	c7 01       	movw	r24, r14
     a38:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     a3c:	f7 01       	movw	r30, r14
     a3e:	01 90       	ld	r0, Z+
     a40:	00 20       	and	r0, r0
     a42:	e9 f7       	brne	.-6      	; 0xa3e <lcd_dispWords+0xb8>
     a44:	31 97       	sbiw	r30, 0x01	; 1
     a46:	ee 19       	sub	r30, r14
     a48:	ff 09       	sbc	r31, r15
     a4a:	00 e1       	ldi	r16, 0x10	; 16
     a4c:	10 e0       	ldi	r17, 0x00	; 0
     a4e:	0e 1b       	sub	r16, r30
     a50:	11 09       	sbc	r17, r1
     a52:	10 16       	cp	r1, r16
     a54:	11 06       	cpc	r1, r17
     a56:	54 f4       	brge	.+20     	; 0xa6c <lcd_dispWords+0xe6>
     a58:	c0 e0       	ldi	r28, 0x00	; 0
     a5a:	80 e2       	ldi	r24, 0x20	; 32
     a5c:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     a60:	cf 5f       	subi	r28, 0xFF	; 255
     a62:	8c 2f       	mov	r24, r28
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	80 17       	cp	r24, r16
     a68:	91 07       	cpc	r25, r17
     a6a:	bc f3       	brlt	.-18     	; 0xa5a <lcd_dispWords+0xd4>
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	08 95       	ret

00000a7a <DS1307_GetTime>:
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ec 01       	movw	r28, r24
     a88:	7b 01       	movw	r14, r22
     a8a:	8a 01       	movw	r16, r20
     a8c:	62 e0       	ldi	r22, 0x02	; 2
     a8e:	80 ed       	ldi	r24, 0xD0	; 208
     a90:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     a94:	88 83       	st	Y, r24
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	80 ed       	ldi	r24, 0xD0	; 208
     a9a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     a9e:	f7 01       	movw	r30, r14
     aa0:	80 83       	st	Z, r24
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	80 ed       	ldi	r24, 0xD0	; 208
     aa6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     aaa:	f8 01       	movw	r30, r16
     aac:	80 83       	st	Z, r24
     aae:	98 81       	ld	r25, Y
     ab0:	96 ff       	sbrs	r25, 6
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <DS1307_GetTime+0x40>
     ab4:	9f 71       	andi	r25, 0x1F	; 31
     ab6:	98 83       	st	Y, r25
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <DS1307_GetTime+0x44>
     aba:	9f 73       	andi	r25, 0x3F	; 63
     abc:	98 83       	st	Y, r25
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	08 95       	ret

00000acc <DS1307_GetDate>:
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	7c 01       	movw	r14, r24
     ada:	8b 01       	movw	r16, r22
     adc:	ea 01       	movw	r28, r20
     ade:	65 e0       	ldi	r22, 0x05	; 5
     ae0:	80 ed       	ldi	r24, 0xD0	; 208
     ae2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     ae6:	f7 01       	movw	r30, r14
     ae8:	80 83       	st	Z, r24
     aea:	64 e0       	ldi	r22, 0x04	; 4
     aec:	80 ed       	ldi	r24, 0xD0	; 208
     aee:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     af2:	f8 01       	movw	r30, r16
     af4:	80 83       	st	Z, r24
     af6:	66 e0       	ldi	r22, 0x06	; 6
     af8:	80 ed       	ldi	r24, 0xD0	; 208
     afa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     afe:	88 83       	st	Y, r24
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	08 95       	ret

00000b0e <DS1307_GetWkDay>:
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	ec 01       	movw	r28, r24
     b14:	63 e0       	ldi	r22, 0x03	; 3
     b16:	80 ed       	ldi	r24, 0xD0	; 208
     b18:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     b1c:	88 83       	st	Y, r24
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <LCD_BCDDigits>:
     b24:	cf 93       	push	r28
     b26:	c8 2f       	mov	r28, r24
     b28:	82 95       	swap	r24
     b2a:	8f 70       	andi	r24, 0x0F	; 15
     b2c:	80 5d       	subi	r24, 0xD0	; 208
     b2e:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b32:	8c 2f       	mov	r24, r28
     b34:	8f 70       	andi	r24, 0x0F	; 15
     b36:	80 5d       	subi	r24, 0xD0	; 208
     b38:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <WriteDate>:
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <WriteDate+0x6>
     b46:	00 d0       	rcall	.+0      	; 0xb48 <WriteDate+0x8>
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	ae 01       	movw	r20, r28
     b4e:	4d 5f       	subi	r20, 0xFD	; 253
     b50:	5f 4f       	sbci	r21, 0xFF	; 255
     b52:	be 01       	movw	r22, r28
     b54:	6e 5f       	subi	r22, 0xFE	; 254
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 66 05 	call	0xacc	; 0xacc <DS1307_GetDate>
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_BCDDigits>
     b66:	8f e2       	ldi	r24, 0x2F	; 47
     b68:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_BCDDigits>
     b72:	8f e2       	ldi	r24, 0x2F	; 47
     b74:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_BCDDigits>
     b7e:	80 e2       	ldi	r24, 0x20	; 32
     b80:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b84:	ce 01       	movw	r24, r28
     b86:	04 96       	adiw	r24, 0x04	; 4
     b88:	0e 94 87 05 	call	0xb0e	; 0xb0e <DS1307_GetWkDay>
     b8c:	8c 81       	ldd	r24, Y+4	; 0x04
     b8e:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_BCDDigits>
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <WriteTime>:
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <WriteTime+0x6>
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	ae 01       	movw	r20, r28
     bae:	4d 5f       	subi	r20, 0xFD	; 253
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	be 01       	movw	r22, r28
     bb4:	6e 5f       	subi	r22, 0xFE	; 254
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <DS1307_GetTime>
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_BCDDigits>
     bc6:	8a e3       	ldi	r24, 0x3A	; 58
     bc8:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_BCDDigits>
     bd2:	8a e3       	ldi	r24, 0x3A	; 58
     bd4:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_BCDDigits>
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <LCD_blankChar>:
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	88 23       	and	r24, r24
     bf0:	41 f0       	breq	.+16     	; 0xc02 <LCD_blankChar+0x18>
     bf2:	d8 2f       	mov	r29, r24
     bf4:	c0 e0       	ldi	r28, 0x00	; 0
     bf6:	80 e2       	ldi	r24, 0x20	; 32
     bf8:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     bfc:	cf 5f       	subi	r28, 0xFF	; 255
     bfe:	cd 13       	cpse	r28, r29
     c00:	fa cf       	rjmp	.-12     	; 0xbf6 <LCD_blankChar+0xc>
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <LCD_TimeDate>:
     c08:	80 e8       	ldi	r24, 0x80	; 128
     c0a:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     c0e:	0e 94 d0 05 	call	0xba0	; 0xba0 <WriteTime>
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_blankChar>
     c18:	80 ec       	ldi	r24, 0xC0	; 192
     c1a:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     c1e:	0e 94 a0 05 	call	0xb40	; 0xb40 <WriteDate>
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_blankChar>
     c28:	08 95       	ret

00000c2a <LCD_TimeDateTempHumid>:
}//LCD_TimeDate

void LCD_TimeDateTempHumid()
{
	//LCD_Line(0);
	getDHT();
     c2a:	0e 94 66 00 	call	0xcc	; 0xcc <getDHT>
	//_delay_ms(1000);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     c2e:	80 e8       	ldi	r24, 0x80	; 128
     c30:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	WriteTime();
     c34:	0e 94 d0 05 	call	0xba0	; 0xba0 <WriteTime>
	LCD_blankChar(1);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strTemp);
     c3e:	84 e8       	ldi	r24, 0x84	; 132
     c40:	94 e0       	ldi	r25, 0x04	; 4
     c42:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
	//LCD_blankChar(1);
	lcd_write_character_4d('C');
     c46:	83 e4       	ldi	r24, 0x43	; 67
     c48:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>

	//LCD_Line(1);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     c4c:	80 ec       	ldi	r24, 0xC0	; 192
     c4e:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	WriteDate();
     c52:	0e 94 a0 05 	call	0xb40	; 0xb40 <WriteDate>
	LCD_blankChar(2);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strHumid);
     c5c:	81 e8       	ldi	r24, 0x81	; 129
     c5e:	94 e0       	ldi	r25, 0x04	; 4
     c60:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
	//LCD_blankChar(1);
	//lcd_write_character_4d('%');
	lcd_write_character_4d(37);
     c64:	85 e2       	ldi	r24, 0x25	; 37
     c66:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     c6a:	08 95       	ret

00000c6c <calcDay>:
    calcDay();
}//parseCompileTime

void calcDay()
{
    day = (date - 17)%7;
     c6c:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <date>
     c70:	08 2e       	mov	r0, r24
     c72:	00 0c       	add	r0, r0
     c74:	99 0b       	sbc	r25, r25
     c76:	41 97       	sbiw	r24, 0x11	; 17
     c78:	67 e0       	ldi	r22, 0x07	; 7
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     c80:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <day>
     c84:	08 95       	ret

00000c86 <parseCompileTime>:
extern uint8_t year, month, date;
extern uint8_t monthEndDate, day;
*/

void parseCompileTime()
{
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	e4 97       	sbiw	r28, 0x34	; 52
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
    char sTime[4][3];
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
     c9c:	63 e2       	ldi	r22, 0x23	; 35
     c9e:	74 e0       	ldi	r23, 0x04	; 4
     ca0:	85 e2       	ldi	r24, 0x25	; 37
     ca2:	94 e0       	ldi	r25, 0x04	; 4
     ca4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <strtok>
     ca8:	bc 01       	movw	r22, r24
    while (*p)
     caa:	fc 01       	movw	r30, r24
     cac:	80 81       	ld	r24, Z
     cae:	88 23       	and	r24, r24
     cb0:	e9 f0       	breq	.+58     	; 0xcec <parseCompileTime+0x66>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sTime[n++], p);
     cb4:	11 e0       	ldi	r17, 0x01	; 1
     cb6:	12 0f       	add	r17, r18
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	c9 01       	movw	r24, r18
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	2c 0f       	add	r18, r28
     cca:	3d 1f       	adc	r19, r29
     ccc:	82 0f       	add	r24, r18
     cce:	93 1f       	adc	r25, r19
     cd0:	0e 94 82 0a 	call	0x1504	; 0x1504 <strcpy>
        p=strtok(NULL, ":");
     cd4:	63 e2       	ldi	r22, 0x23	; 35
     cd6:	74 e0       	ldi	r23, 0x04	; 4
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <strtok>
     ce0:	bc 01       	movw	r22, r24
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
    {
        strcpy((char *)&sTime[n++], p);
     ce2:	21 2f       	mov	r18, r17
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 81       	ld	r24, Z
     ce8:	81 11       	cpse	r24, r1
     cea:	e4 cf       	rjmp	.-56     	; 0xcb4 <parseCompileTime+0x2e>
    {
        strcpy((char *)&sTime[n++], p);
        p=strtok(NULL, ":");
    }
    hour=atoi(sTime[0]);
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <atoi>
     cf4:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <hour>
    min=atoi(sTime[1]);
     cf8:	ce 01       	movw	r24, r28
     cfa:	04 96       	adiw	r24, 0x04	; 4
     cfc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <atoi>
     d00:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <min>
    //give some delay (8 seconds), to compile & upload by human click
    //sec=atoi(sTime[2]) + 8;

    //if you change power source to battery,
    //  you'd better put more time allowance
    sec=atoi(sTime[2]) + 15;
     d04:	ce 01       	movw	r24, r28
     d06:	07 96       	adiw	r24, 0x07	; 7
     d08:	0e 94 56 0a 	call	0x14ac	; 0x14ac <atoi>
     d0c:	81 5f       	subi	r24, 0xF1	; 241
     d0e:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <sec>
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
     d12:	6a e0       	ldi	r22, 0x0A	; 10
     d14:	74 e0       	ldi	r23, 0x04	; 4
     d16:	84 ef       	ldi	r24, 0xF4	; 244
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <strtok>
     d1e:	bc 01       	movw	r22, r24
    while (*p)
     d20:	fc 01       	movw	r30, r24
     d22:	80 81       	ld	r24, Z
     d24:	88 23       	and	r24, r24
     d26:	19 f1       	breq	.+70     	; 0xd6e <parseCompileTime+0xe8>
     d28:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sDate[n++], p);
     d2a:	11 e0       	ldi	r17, 0x01	; 1
     d2c:	12 0f       	add	r17, r18
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	c9 01       	movw	r24, r18
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	22 0f       	add	r18, r18
     d40:	33 1f       	adc	r19, r19
     d42:	82 0f       	add	r24, r18
     d44:	93 1f       	adc	r25, r19
     d46:	2d e0       	ldi	r18, 0x0D	; 13
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	2c 0f       	add	r18, r28
     d4c:	3d 1f       	adc	r19, r29
     d4e:	82 0f       	add	r24, r18
     d50:	93 1f       	adc	r25, r19
     d52:	0e 94 82 0a 	call	0x1504	; 0x1504 <strcpy>
        p=strtok(NULL, " ");
     d56:	6a e0       	ldi	r22, 0x0A	; 10
     d58:	74 e0       	ldi	r23, 0x04	; 4
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <strtok>
     d62:	bc 01       	movw	r22, r24

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    {
        strcpy((char *)&sDate[n++], p);
     d64:	21 2f       	mov	r18, r17
    sec=atoi(sTime[2]) + 15;
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
     d66:	fc 01       	movw	r30, r24
     d68:	80 81       	ld	r24, Z
     d6a:	81 11       	cpse	r24, r1
     d6c:	de cf       	rjmp	.-68     	; 0xd2a <parseCompileTime+0xa4>
    {
        strcpy((char *)&sDate[n++], p);
        p=strtok(NULL, " ");
    }

    if ( strcmp(sDate[0], "Jan") == 0 )
     d6e:	6e e2       	ldi	r22, 0x2E	; 46
     d70:	74 e0       	ldi	r23, 0x04	; 4
     d72:	ce 01       	movw	r24, r28
     d74:	0d 96       	adiw	r24, 0x0d	; 13
     d76:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     d7a:	89 2b       	or	r24, r25
     d7c:	21 f4       	brne	.+8      	; 0xd86 <parseCompileTime+0x100>
        month = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     d84:	83 c0       	rjmp	.+262    	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Feb") == 0 )
     d86:	62 e3       	ldi	r22, 0x32	; 50
     d88:	74 e0       	ldi	r23, 0x04	; 4
     d8a:	ce 01       	movw	r24, r28
     d8c:	0d 96       	adiw	r24, 0x0d	; 13
     d8e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     d92:	89 2b       	or	r24, r25
     d94:	21 f4       	brne	.+8      	; 0xd9e <parseCompileTime+0x118>
        month = 2;
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     d9c:	77 c0       	rjmp	.+238    	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Mar") == 0 )
     d9e:	66 e3       	ldi	r22, 0x36	; 54
     da0:	74 e0       	ldi	r23, 0x04	; 4
     da2:	ce 01       	movw	r24, r28
     da4:	0d 96       	adiw	r24, 0x0d	; 13
     da6:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     daa:	89 2b       	or	r24, r25
     dac:	21 f4       	brne	.+8      	; 0xdb6 <parseCompileTime+0x130>
        month = 3;
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     db4:	6b c0       	rjmp	.+214    	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Apr") == 0 )
     db6:	6a e3       	ldi	r22, 0x3A	; 58
     db8:	74 e0       	ldi	r23, 0x04	; 4
     dba:	ce 01       	movw	r24, r28
     dbc:	0d 96       	adiw	r24, 0x0d	; 13
     dbe:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     dc2:	89 2b       	or	r24, r25
     dc4:	21 f4       	brne	.+8      	; 0xdce <parseCompileTime+0x148>
        month = 4;
     dc6:	84 e0       	ldi	r24, 0x04	; 4
     dc8:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "May") == 0 )
     dce:	6e e3       	ldi	r22, 0x3E	; 62
     dd0:	74 e0       	ldi	r23, 0x04	; 4
     dd2:	ce 01       	movw	r24, r28
     dd4:	0d 96       	adiw	r24, 0x0d	; 13
     dd6:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     dda:	89 2b       	or	r24, r25
     ddc:	21 f4       	brne	.+8      	; 0xde6 <parseCompileTime+0x160>
        month = 5;
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     de4:	53 c0       	rjmp	.+166    	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jun") == 0 )
     de6:	62 e4       	ldi	r22, 0x42	; 66
     de8:	74 e0       	ldi	r23, 0x04	; 4
     dea:	ce 01       	movw	r24, r28
     dec:	0d 96       	adiw	r24, 0x0d	; 13
     dee:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     df2:	89 2b       	or	r24, r25
     df4:	21 f4       	brne	.+8      	; 0xdfe <parseCompileTime+0x178>
        month = 6;
     df6:	86 e0       	ldi	r24, 0x06	; 6
     df8:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     dfc:	47 c0       	rjmp	.+142    	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jul") == 0 )
     dfe:	66 e4       	ldi	r22, 0x46	; 70
     e00:	74 e0       	ldi	r23, 0x04	; 4
     e02:	ce 01       	movw	r24, r28
     e04:	0d 96       	adiw	r24, 0x0d	; 13
     e06:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     e0a:	89 2b       	or	r24, r25
     e0c:	21 f4       	brne	.+8      	; 0xe16 <parseCompileTime+0x190>
        month = 7;
     e0e:	87 e0       	ldi	r24, 0x07	; 7
     e10:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     e14:	3b c0       	rjmp	.+118    	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Aug") == 0 )
     e16:	6a e4       	ldi	r22, 0x4A	; 74
     e18:	74 e0       	ldi	r23, 0x04	; 4
     e1a:	ce 01       	movw	r24, r28
     e1c:	0d 96       	adiw	r24, 0x0d	; 13
     e1e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     e22:	89 2b       	or	r24, r25
     e24:	21 f4       	brne	.+8      	; 0xe2e <parseCompileTime+0x1a8>
        month = 8;
     e26:	88 e0       	ldi	r24, 0x08	; 8
     e28:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     e2c:	2f c0       	rjmp	.+94     	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Sep") == 0 )
     e2e:	6e e4       	ldi	r22, 0x4E	; 78
     e30:	74 e0       	ldi	r23, 0x04	; 4
     e32:	ce 01       	movw	r24, r28
     e34:	0d 96       	adiw	r24, 0x0d	; 13
     e36:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     e3a:	89 2b       	or	r24, r25
     e3c:	21 f4       	brne	.+8      	; 0xe46 <parseCompileTime+0x1c0>
        month = 9;
     e3e:	89 e0       	ldi	r24, 0x09	; 9
     e40:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     e44:	23 c0       	rjmp	.+70     	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Oct") == 0 )
     e46:	62 e5       	ldi	r22, 0x52	; 82
     e48:	74 e0       	ldi	r23, 0x04	; 4
     e4a:	ce 01       	movw	r24, r28
     e4c:	0d 96       	adiw	r24, 0x0d	; 13
     e4e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     e52:	89 2b       	or	r24, r25
     e54:	21 f4       	brne	.+8      	; 0xe5e <parseCompileTime+0x1d8>
        month = 10;
     e56:	8a e0       	ldi	r24, 0x0A	; 10
     e58:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     e5c:	17 c0       	rjmp	.+46     	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Nov") == 0 )
     e5e:	66 e5       	ldi	r22, 0x56	; 86
     e60:	74 e0       	ldi	r23, 0x04	; 4
     e62:	ce 01       	movw	r24, r28
     e64:	0d 96       	adiw	r24, 0x0d	; 13
     e66:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     e6a:	89 2b       	or	r24, r25
     e6c:	21 f4       	brne	.+8      	; 0xe76 <parseCompileTime+0x1f0>
        month = 11;
     e6e:	8b e0       	ldi	r24, 0x0B	; 11
     e70:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     e74:	0b c0       	rjmp	.+22     	; 0xe8c <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Dec") == 0 )
     e76:	6a e5       	ldi	r22, 0x5A	; 90
     e78:	74 e0       	ldi	r23, 0x04	; 4
     e7a:	ce 01       	movw	r24, r28
     e7c:	0d 96       	adiw	r24, 0x0d	; 13
     e7e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <strcmp>
     e82:	89 2b       	or	r24, r25
     e84:	19 f4       	brne	.+6      	; 0xe8c <parseCompileTime+0x206>
        month = 12;
     e86:	8c e0       	ldi	r24, 0x0C	; 12
     e88:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>

    date=atoi(sDate[1]);
     e8c:	ce 01       	movw	r24, r28
     e8e:	47 96       	adiw	r24, 0x17	; 23
     e90:	0e 94 56 0a 	call	0x14ac	; 0x14ac <atoi>
     e94:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <date>
    yearLong=atoi(sDate[2]);
     e98:	ce 01       	movw	r24, r28
     e9a:	81 96       	adiw	r24, 0x21	; 33
     e9c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <atoi>
     ea0:	ac 01       	movw	r20, r24
    year=yearLong%1000;
     ea2:	9c 01       	movw	r18, r24
     ea4:	36 95       	lsr	r19
     ea6:	27 95       	ror	r18
     ea8:	36 95       	lsr	r19
     eaa:	27 95       	ror	r18
     eac:	36 95       	lsr	r19
     eae:	27 95       	ror	r18
     eb0:	a5 ec       	ldi	r26, 0xC5	; 197
     eb2:	b0 e2       	ldi	r27, 0x20	; 32
     eb4:	0e 94 27 0a 	call	0x144e	; 0x144e <__umulhisi3>
     eb8:	92 95       	swap	r25
     eba:	82 95       	swap	r24
     ebc:	8f 70       	andi	r24, 0x0F	; 15
     ebe:	89 27       	eor	r24, r25
     ec0:	9f 70       	andi	r25, 0x0F	; 15
     ec2:	89 27       	eor	r24, r25
     ec4:	68 ee       	ldi	r22, 0xE8	; 232
     ec6:	73 e0       	ldi	r23, 0x03	; 3
     ec8:	86 9f       	mul	r24, r22
     eca:	90 01       	movw	r18, r0
     ecc:	87 9f       	mul	r24, r23
     ece:	30 0d       	add	r19, r0
     ed0:	96 9f       	mul	r25, r22
     ed2:	30 0d       	add	r19, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	42 1b       	sub	r20, r18
     ed8:	53 0b       	sbc	r21, r19
     eda:	40 93 7a 04 	sts	0x047A, r20	; 0x80047a <year>

    calcDay();
     ede:	0e 94 36 06 	call	0xc6c	; 0xc6c <calcDay>
}//parseCompileTime
     ee2:	e4 96       	adiw	r28, 0x34	; 52
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	08 95       	ret

00000ef6 <tinudht_read>:
#define TINUDHT_RCV_DELAY 10
#define TINUDHT_RCV_LENGTH 2

// ----------------------------------------------------------------------------

uint8_t tinudht_read(TinuDHT *ptinudht, uint8_t dht_pin) {
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	00 d0       	rcall	.+0      	; 0xf04 <tinudht_read+0xe>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <tinudht_read+0x10>
     f06:	1f 92       	push	r1
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	7c 01       	movw	r14, r24
	
	// Buffer to received data
	uint8_t data[5];
	// Empty the buffer
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     f0e:	1d 82       	std	Y+5, r1	; 0x05
     f10:	1c 82       	std	Y+4, r1	; 0x04
     f12:	1b 82       	std	Y+3, r1	; 0x03
     f14:	1a 82       	std	Y+2, r1	; 0x02
     f16:	19 82       	std	Y+1, r1	; 0x01
//	for (uint8_t i=0; i< 5; i++) data[i] = 0;	// Another way to empty the data buffer.

	// Send request
	DDRB |= (1 << dht_pin);	// Set port as output
     f18:	84 b1       	in	r24, 0x04	; 4
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	06 2e       	mov	r0, r22
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <tinudht_read+0x30>
     f22:	44 0f       	add	r20, r20
     f24:	55 1f       	adc	r21, r21
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <tinudht_read+0x2c>
     f2a:	84 2b       	or	r24, r20
     f2c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << dht_pin);	// Set to 0
     f2e:	95 b1       	in	r25, 0x05	; 5
     f30:	24 2f       	mov	r18, r20
     f32:	20 95       	com	r18
     f34:	92 23       	and	r25, r18
     f36:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f38:	83 e9       	ldi	r24, 0x93	; 147
     f3a:	91 e1       	ldi	r25, 0x11	; 17
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <tinudht_read+0x46>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <tinudht_read+0x4c>
     f42:	00 00       	nop
	_delay_ms(18);	// Wait 18 ms
	PORTB |= (1 << dht_pin);	// Set to 1
     f44:	95 b1       	in	r25, 0x05	; 5
     f46:	94 2b       	or	r25, r20
     f48:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f4a:	9d e0       	ldi	r25, 0x0D	; 13
     f4c:	9a 95       	dec	r25
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <tinudht_read+0x56>
     f50:	00 00       	nop
	_delay_us(40);	// Wait 40 us

	// Receive response
	DDRB &= ~(1 << dht_pin);	// Set port as input
     f52:	84 b1       	in	r24, 0x04	; 4
     f54:	82 23       	and	r24, r18
     f56:	84 b9       	out	0x04, r24	; 4

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <tinudht_read+0x6c>
     f5c:	81 50       	subi	r24, 0x01	; 1
		if (timeout-- == 0)
     f5e:	09 f4       	brne	.+2      	; 0xf62 <tinudht_read+0x6c>
     f60:	5a c0       	rjmp	.+180    	; 0x1016 <tinudht_read+0x120>

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
     f62:	23 b1       	in	r18, 0x03	; 3
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	24 23       	and	r18, r20
     f68:	35 23       	and	r19, r21
     f6a:	23 2b       	or	r18, r19
     f6c:	b9 f3       	breq	.-18     	; 0xf5c <tinudht_read+0x66>
     f6e:	5d c0       	rjmp	.+186    	; 0x102a <tinudht_read+0x134>
     f70:	21 50       	subi	r18, 0x01	; 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
     f72:	11 f4       	brne	.+4      	; 0xf78 <tinudht_read+0x82>
     f74:	52 c0       	rjmp	.+164    	; 0x101a <tinudht_read+0x124>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
     f76:	2f ef       	ldi	r18, 0xFF	; 255
     f78:	83 b1       	in	r24, 0x03	; 3
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	84 23       	and	r24, r20
     f7e:	95 23       	and	r25, r21
     f80:	89 2b       	or	r24, r25
     f82:	b1 f7       	brne	.-20     	; 0xf70 <tinudht_read+0x7a>
     f84:	88 e2       	ldi	r24, 0x28	; 40
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	a7 e0       	ldi	r26, 0x07	; 7
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <tinudht_read+0x9c>
     f8c:	91 50       	subi	r25, 0x01	; 1
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
     f8e:	31 f4       	brne	.+12     	; 0xf9c <tinudht_read+0xa6>
     f90:	46 c0       	rjmp	.+140    	; 0x101e <tinudht_read+0x128>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
     f98:	07 e0       	ldi	r16, 0x07	; 7
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
     f9a:	9b 2f       	mov	r25, r27
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
     f9c:	23 b1       	in	r18, 0x03	; 3
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	24 23       	and	r18, r20
     fa2:	35 23       	and	r19, r21
     fa4:	23 2b       	or	r18, r19
     fa6:	91 f3       	breq	.-28     	; 0xf8c <tinudht_read+0x96>
     fa8:	9b 2f       	mov	r25, r27
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <tinudht_read+0xc2>
     fac:	e3 e0       	ldi	r30, 0x03	; 3
     fae:	ea 95       	dec	r30
     fb0:	f1 f7       	brne	.-4      	; 0xfae <tinudht_read+0xb8>
     fb2:	00 00       	nop

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
     fb4:	9f 5f       	subi	r25, 0xFF	; 255
     fb6:	a9 f1       	breq	.+106    	; 0x1022 <tinudht_read+0x12c>
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
     fb8:	23 b1       	in	r18, 0x03	; 3
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	24 23       	and	r18, r20
     fbe:	35 23       	and	r19, r21
     fc0:	23 2b       	or	r18, r19
     fc2:	a1 f7       	brne	.-24     	; 0xfac <tinudht_read+0xb6>
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
     fc4:	92 30       	cpi	r25, 0x02	; 2
     fc6:	80 f0       	brcs	.+32     	; 0xfe8 <tinudht_read+0xf2>
     fc8:	e1 e0       	ldi	r30, 0x01	; 1
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ec 0f       	add	r30, r28
     fce:	fd 1f       	adc	r31, r29
     fd0:	e1 0f       	add	r30, r17
     fd2:	f1 1d       	adc	r31, r1
     fd4:	90 81       	ld	r25, Z
     fd6:	9b 01       	movw	r18, r22
     fd8:	0a 2e       	mov	r0, r26
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <tinudht_read+0xea>
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <tinudht_read+0xe6>
     fe4:	29 2b       	or	r18, r25
     fe6:	20 83       	st	Z, r18
		// delay =  9..29us, len = 2
		
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
     fe8:	a1 11       	cpse	r26, r1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <tinudht_read+0xfc>
		{
			bit_index = 7;	// restart at MSB
			byte_index++;	// next byte!
     fec:	1f 5f       	subi	r17, 0xFF	; 255
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
     fee:	a0 2f       	mov	r26, r16
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <tinudht_read+0xfe>
			byte_index++;	// next byte!
		}
		else bit_index--;
     ff2:	a1 50       	subi	r26, 0x01	; 1
     ff4:	81 50       	subi	r24, 0x01	; 1
			return TINUDHT_ERROR_TIMEOUT;

	uint8_t bit_index = 7;
	uint8_t byte_index = 0;
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
     ff6:	89 f6       	brne	.-94     	; 0xf9a <tinudht_read+0xa4>
	// DEBUGGING_STRING("DT:");
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
     ff8:	49 81       	ldd	r20, Y+1	; 0x01
     ffa:	2b 81       	ldd	r18, Y+3	; 0x03
     ffc:	92 2f       	mov	r25, r18
     ffe:	94 0f       	add	r25, r20
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    1000:	3d 81       	ldd	r19, Y+5	; 0x05
    1002:	39 13       	cpse	r19, r25
    1004:	10 c0       	rjmp	.+32     	; 0x1026 <tinudht_read+0x130>
	// DEBUGGING_NUMDECP(data[4]);
	// DEBUGGING_NUMDECP(checksum);
	// DEBUGGING_STRING("\n\r");

	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	f7 01       	movw	r30, r14
    100a:	51 83       	std	Z+1, r21	; 0x01
    100c:	40 83       	st	Z, r20
	ptinudht->temperature = data[2]; 
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	33 83       	std	Z+3, r19	; 0x03
    1012:	22 83       	std	Z+2, r18	; 0x02

	return TINUDHT_OK;
    1014:	17 c0       	rjmp	.+46     	; 0x1044 <tinudht_read+0x14e>

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
    1016:	8e ef       	ldi	r24, 0xFE	; 254
    1018:	15 c0       	rjmp	.+42     	; 0x1044 <tinudht_read+0x14e>
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
    101a:	8e ef       	ldi	r24, 0xFE	; 254
    101c:	13 c0       	rjmp	.+38     	; 0x1044 <tinudht_read+0x14e>
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;
    101e:	8e ef       	ldi	r24, 0xFE	; 254
    1020:	11 c0       	rjmp	.+34     	; 0x1044 <tinudht_read+0x14e>
		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
    1022:	8e ef       	ldi	r24, 0xFE	; 254
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <tinudht_read+0x14e>
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <tinudht_read+0x14e>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    102a:	83 b1       	in	r24, 0x03	; 3
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <tinudht_read+0x13e>
    1030:	95 95       	asr	r25
    1032:	87 95       	ror	r24
    1034:	6a 95       	dec	r22
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <tinudht_read+0x13a>
    1038:	80 fd       	sbrc	r24, 0
    103a:	9d cf       	rjmp	.-198    	; 0xf76 <tinudht_read+0x80>
    103c:	88 e2       	ldi	r24, 0x28	; 40
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	a7 e0       	ldi	r26, 0x07	; 7
    1042:	a7 cf       	rjmp	.-178    	; 0xf92 <tinudht_read+0x9c>
	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
	ptinudht->temperature = data[2]; 

	return TINUDHT_OK;
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	08 95       	ret

0000105c <makePDasOutput>:
//by calling makePDasInput(). (added by Insoo: Jul 12, 2017)
void makePDasOutput()
{
	// configure the microprocessor pins for the data lines
	// 4 data lines - output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
    105c:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
    105e:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
    1060:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
    1062:	54 9a       	sbi	0x0a, 4	; 10

	// LCD backlight cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
    1064:	20 9a       	sbi	0x04, 0	; 4

	// LCD VSS pin (Power Supply) - Output
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
    1066:	26 9a       	sbi	0x04, 6	; 4
	//turn on LCD power
	lcd_VDD_port |= _BV(lcd_VDD_bit);
    1068:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    106a:	83 ec       	ldi	r24, 0xC3	; 195
    106c:	99 e0       	ldi	r25, 0x09	; 9
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <makePDasOutput+0x12>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <makePDasOutput+0x18>
    1074:	00 00       	nop
	_delay_ms(10);

	// DS1307 Vcc pin (Power Supply) - output
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
    1076:	27 9a       	sbi	0x04, 7	; 4
	//turn on DS1307 power
	DS1307_VCC_port |= _BV(DS1307_VCC_bit);
    1078:	2f 9a       	sbi	0x05, 7	; 5
    107a:	83 ec       	ldi	r24, 0xC3	; 195
    107c:	99 e0       	ldi	r25, 0x09	; 9
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <makePDasOutput+0x22>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <makePDasOutput+0x28>
    1084:	00 00       	nop
	_delay_ms(10);

	// DHT11 (temp & humid sensor) VCC pin (Power Supply) - Output
	//added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
    1086:	22 98       	cbi	0x04, 2	; 4
	//turn on DHT11 chip power
	DHT_VCC_port |= _BV(DHT_VCC_bit);
    1088:	2a 9a       	sbi	0x05, 2	; 5
	//Tactile switch - Input
	//tactile_Switch_ddr |= _BV(tactile_Switch_bit);

	// configure the microprocessor pins for the control lines
	// E line - output
	lcd_E_ddr |= _BV(lcd_E_bit);
    108a:	53 9a       	sbi	0x0a, 3	; 10
	// RS line - output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
    108c:	52 9a       	sbi	0x0a, 2	; 10
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
    108e:	5a 98       	cbi	0x0b, 2	; 11
    1090:	08 95       	ret

00001092 <makePDasInput>:
void makePDasInput()
{

	// turn off four data lines 
	// following four lines added by Insoo on Jul 15, 2017
	lcd_D7_port &= ~_BV(lcd_D7_bit);
    1092:	5f 98       	cbi	0x0b, 7	; 11
	lcd_D6_port &= ~_BV(lcd_D6_bit);
    1094:	5e 98       	cbi	0x0b, 6	; 11
	lcd_D5_port &= ~_BV(lcd_D5_bit);
    1096:	5d 98       	cbi	0x0b, 5	; 11
	lcd_D4_port &= ~_BV(lcd_D4_bit);
    1098:	5c 98       	cbi	0x0b, 4	; 11

	// configure the microprocessor pins for the data lines
	// 4 data lines - output, but make it input
	lcd_D7_ddr &= ~_BV(lcd_D7_bit);
    109a:	57 98       	cbi	0x0a, 7	; 10
	lcd_D6_ddr &= ~_BV(lcd_D6_bit);
    109c:	56 98       	cbi	0x0a, 6	; 10
	lcd_D5_ddr &= ~_BV(lcd_D5_bit);
    109e:	55 98       	cbi	0x0a, 5	; 10
	lcd_D4_ddr &= ~_BV(lcd_D4_bit);
    10a0:	54 98       	cbi	0x0a, 4	; 10

	// turn off backlight cathode(GND)
	// following one line added by Insoo on Jul 15, 2017
	lcd_Backlight_port = _BV(lcd_Backlight_bit);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	85 b9       	out	0x05, r24	; 5
	// LCD backlight cathode pin (K) - output, but make it input
	lcd_Backlight_ddr &= ~_BV(lcd_Backlight_bit);
    10a6:	20 98       	cbi	0x04, 0	; 4

	// turn off DS1307
	DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
    10a8:	2f 98       	cbi	0x05, 7	; 5
	// then, DS1307 Vcc pin (Power Supply) - output, but make it input
	DS1307_VCC_ddr &= ~_BV(DS1307_VCC_bit);
    10aa:	27 98       	cbi	0x04, 7	; 4

	// DHT11 (temp & humid sensor) signal pin - Output/Input
	//turn off and
	PORTB &= ~_BV(TINUDHT_PIN);
    10ac:	29 98       	cbi	0x05, 1	; 5
	//make it input
	DDRB &= ~_BV(TINUDHT_PIN);
    10ae:	21 98       	cbi	0x04, 1	; 4
	PORTB &= ~_BV(TINUDHT_PIN);
    10b0:	29 98       	cbi	0x05, 1	; 5

	//turn off DHT11 chip power
	DHT_VCC_port &= ~_BV(DHT_VCC_bit);
    10b2:	2a 98       	cbi	0x05, 2	; 5
	//make DHT_VCC as input, added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
    10b4:	22 98       	cbi	0x04, 2	; 4
	//Tactile switch - Input
	//tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);

	// turn off Enable pin
	// following one line added by Insoo on Jul 15, 2017
	lcd_E_port &= ~_BV(lcd_E_bit);
    10b6:	5b 98       	cbi	0x0b, 3	; 11
	// configure the microprocessor pins for the control lines
	// E line - output, but make it input
	lcd_E_ddr &= ~_BV(lcd_E_bit);
    10b8:	53 98       	cbi	0x0a, 3	; 10
	
	// turn off RS 
	lcd_RS_port &= ~_BV(lcd_RS_bit);
    10ba:	5a 98       	cbi	0x0b, 2	; 11
	// RS line - output, but make it input
	lcd_RS_ddr &= ~_BV(lcd_RS_bit);
    10bc:	52 98       	cbi	0x0a, 2	; 10

	// turn off LCD power
	lcd_VDD_port &= ~_BV(lcd_VDD_bit);
    10be:	2e 98       	cbi	0x05, 6	; 5
	// then, LCD VSS pin (Power Supply) - output, but make it input
	lcd_VDD_ddr &= ~_BV(lcd_VDD_bit);
    10c0:	26 98       	cbi	0x04, 6	; 4
    10c2:	08 95       	ret

000010c4 <adjustHour>:

}//makePDasInput

void adjustHour()
{
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <adjustHour+0xa>
    10ce:	1f 92       	push	r1
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
    10d4:	00 e0       	ldi	r16, 0x00	; 0
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    char strHour[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
    10d8:	80 e8       	ldi	r24, 0x80	; 128
    10da:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10de:	84 e1       	ldi	r24, 0x14	; 20
    10e0:	8a 95       	dec	r24
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <adjustHour+0x1c>
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Hour: ");
    10e4:	8e e5       	ldi	r24, 0x5E	; 94
    10e6:	94 e0       	ldi	r25, 0x04	; 4
    10e8:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        itoa(hour, strHour, 10);
    10ec:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
    10f0:	4a e0       	ldi	r20, 0x0A	; 10
    10f2:	be 01       	movw	r22, r28
    10f4:	6f 5f       	subi	r22, 0xFF	; 255
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	08 2e       	mov	r0, r24
    10fa:	00 0c       	add	r0, r0
    10fc:	99 0b       	sbc	r25, r25
    10fe:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strHour);
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
    110a:	8a e0       	ldi	r24, 0x0A	; 10
    110c:	94 e0       	ldi	r25, 0x04	; 4
    110e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
    1112:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1114:	e7 ea       	ldi	r30, 0xA7	; 167
    1116:	f1 e6       	ldi	r31, 0x61	; 97
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <adjustHour+0x54>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <adjustHour+0x5a>
    111e:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
    1120:	84 fd       	sbrc	r24, 4
    1122:	0c c0       	rjmp	.+24     	; 0x113c <adjustHour+0x78>
        {
            hour++;
    1124:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
    1128:	8f 5f       	subi	r24, 0xFF	; 255
            if (hour > 23)
    112a:	88 31       	cpi	r24, 0x18	; 24
    112c:	24 f4       	brge	.+8      	; 0x1136 <adjustHour+0x72>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            hour++;
    112e:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <hour>
    1132:	01 2f       	mov	r16, r17
    1134:	03 c0       	rjmp	.+6      	; 0x113c <adjustHour+0x78>
            if (hour > 23)
                hour=0;
    1136:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <hour>
    113a:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
    113c:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
    113e:	81 2f       	mov	r24, r17
    1140:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
    1142:	89 30       	cpi	r24, 0x09	; 9
    1144:	38 f4       	brcc	.+14     	; 0x1154 <adjustHour+0x90>
    1146:	81 e1       	ldi	r24, 0x11	; 17
    1148:	9a e7       	ldi	r25, 0x7A	; 122
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <adjustHour+0x86>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <adjustHour+0x8c>
    1150:	00 00       	nop
    1152:	c2 cf       	rjmp	.-124    	; 0x10d8 <adjustHour+0x14>
    1154:	e1 e1       	ldi	r30, 0x11	; 17
    1156:	fa e7       	ldi	r31, 0x7A	; 122
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <adjustHour+0x94>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <adjustHour+0x9a>
    115e:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)
}//adjustHour
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	08 95       	ret

00001170 <adjustMin>:

void adjustMin()
{
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	00 d0       	rcall	.+0      	; 0x117a <adjustMin+0xa>
    117a:	1f 92       	push	r1
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
    1180:	00 e0       	ldi	r16, 0x00	; 0
    1182:	10 e0       	ldi	r17, 0x00	; 0
    char strMin[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
    1184:	80 e8       	ldi	r24, 0x80	; 128
    1186:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    118a:	84 e1       	ldi	r24, 0x14	; 20
    118c:	8a 95       	dec	r24
    118e:	f1 f7       	brne	.-4      	; 0x118c <adjustMin+0x1c>
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Min: ");
    1190:	85 e6       	ldi	r24, 0x65	; 101
    1192:	94 e0       	ldi	r25, 0x04	; 4
    1194:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        itoa(min, strMin, 10);
    1198:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <min>
    119c:	4a e0       	ldi	r20, 0x0A	; 10
    119e:	be 01       	movw	r22, r28
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	08 2e       	mov	r0, r24
    11a6:	00 0c       	add	r0, r0
    11a8:	99 0b       	sbc	r25, r25
    11aa:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strMin);
    11ae:	ce 01       	movw	r24, r28
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
    11b6:	8a e0       	ldi	r24, 0x0A	; 10
    11b8:	94 e0       	ldi	r25, 0x04	; 4
    11ba:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
    11be:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11c0:	e7 ea       	ldi	r30, 0xA7	; 167
    11c2:	f1 e6       	ldi	r31, 0x61	; 97
    11c4:	31 97       	sbiw	r30, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <adjustMin+0x54>
    11c8:	00 c0       	rjmp	.+0      	; 0x11ca <adjustMin+0x5a>
    11ca:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
    11cc:	84 fd       	sbrc	r24, 4
    11ce:	0c c0       	rjmp	.+24     	; 0x11e8 <adjustMin+0x78>
        {
            min++;
    11d0:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <min>
    11d4:	8f 5f       	subi	r24, 0xFF	; 255
            if (min > 59)
    11d6:	8c 33       	cpi	r24, 0x3C	; 60
    11d8:	24 f4       	brge	.+8      	; 0x11e2 <adjustMin+0x72>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            min++;
    11da:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <min>
    11de:	01 2f       	mov	r16, r17
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <adjustMin+0x78>
            if (min > 59)
                min=0;
    11e2:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <min>
    11e6:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
    11e8:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
    11ea:	81 2f       	mov	r24, r17
    11ec:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
    11ee:	89 30       	cpi	r24, 0x09	; 9
    11f0:	38 f4       	brcc	.+14     	; 0x1200 <adjustMin+0x90>
    11f2:	81 e1       	ldi	r24, 0x11	; 17
    11f4:	9a e7       	ldi	r25, 0x7A	; 122
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <adjustMin+0x86>
    11fa:	00 c0       	rjmp	.+0      	; 0x11fc <adjustMin+0x8c>
    11fc:	00 00       	nop
    11fe:	c2 cf       	rjmp	.-124    	; 0x1184 <adjustMin+0x14>
    1200:	e1 e1       	ldi	r30, 0x11	; 17
    1202:	fa e7       	ldi	r31, 0x7A	; 122
    1204:	31 97       	sbiw	r30, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <adjustMin+0x94>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <adjustMin+0x9a>
    120a:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustMin
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	08 95       	ret

0000121c <adjustSec>:

void adjustSec()
{
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	00 d0       	rcall	.+0      	; 0x1226 <adjustSec+0xa>
    1226:	1f 92       	push	r1
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
    122c:	00 e0       	ldi	r16, 0x00	; 0
    122e:	10 e0       	ldi	r17, 0x00	; 0
    char strSec[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1236:	84 e1       	ldi	r24, 0x14	; 20
    1238:	8a 95       	dec	r24
    123a:	f1 f7       	brne	.-4      	; 0x1238 <adjustSec+0x1c>
        _delay_us(DELAY_INST);                                  // 40 uS delay (sec)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"sec: ");
    123c:	8b e6       	ldi	r24, 0x6B	; 107
    123e:	94 e0       	ldi	r25, 0x04	; 4
    1240:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        itoa(sec, strSec, 10);
    1244:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
    1248:	4a e0       	ldi	r20, 0x0A	; 10
    124a:	be 01       	movw	r22, r28
    124c:	6f 5f       	subi	r22, 0xFF	; 255
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	08 2e       	mov	r0, r24
    1252:	00 0c       	add	r0, r0
    1254:	99 0b       	sbc	r25, r25
    1256:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strSec);
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
    1262:	8a e0       	ldi	r24, 0x0A	; 10
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
    126a:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    126c:	e7 ea       	ldi	r30, 0xA7	; 167
    126e:	f1 e6       	ldi	r31, 0x61	; 97
    1270:	31 97       	sbiw	r30, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <adjustSec+0x54>
    1274:	00 c0       	rjmp	.+0      	; 0x1276 <adjustSec+0x5a>
    1276:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
    1278:	84 fd       	sbrc	r24, 4
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <adjustSec+0x78>
        {
            sec++;
    127c:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
    1280:	8f 5f       	subi	r24, 0xFF	; 255
            if (sec > 59)
    1282:	8c 33       	cpi	r24, 0x3C	; 60
    1284:	24 f4       	brge	.+8      	; 0x128e <adjustSec+0x72>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            sec++;
    1286:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <sec>
    128a:	01 2f       	mov	r16, r17
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <adjustSec+0x78>
            if (sec > 59)
                sec=0;
    128e:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <sec>
    1292:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
    1294:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
    1296:	81 2f       	mov	r24, r17
    1298:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
    129a:	89 30       	cpi	r24, 0x09	; 9
    129c:	38 f4       	brcc	.+14     	; 0x12ac <adjustSec+0x90>
    129e:	81 e1       	ldi	r24, 0x11	; 17
    12a0:	9a e7       	ldi	r25, 0x7A	; 122
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <adjustSec+0x86>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <adjustSec+0x8c>
    12a8:	00 00       	nop
    12aa:	c2 cf       	rjmp	.-124    	; 0x1230 <adjustSec+0x14>
    12ac:	e1 e1       	ldi	r30, 0x11	; 17
    12ae:	fa e7       	ldi	r31, 0x7A	; 122
    12b0:	31 97       	sbiw	r30, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <adjustSec+0x94>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <adjustSec+0x9a>
    12b6:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustSec
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <countButton>:

    uint8_t val;
    uint8_t DONE=0;


    loopCnt=0;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    prevLoop=0;
    12ca:	30 e0       	ldi	r19, 0x00	; 0
}//sysClockTest

//-----------------------------------
void countButton()
{
    uint8_t menuCnt=0;
    12cc:	20 e0       	ldi	r18, 0x00	; 0
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	40 e0       	ldi	r20, 0x00	; 0
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    12d2:	52 e0       	ldi	r21, 0x02	; 2
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    {
        loopCnt++;
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
        curLoop = loopCnt;
        lapse = curLoop - prevLoop;
    12d6:	98 2f       	mov	r25, r24
    12d8:	93 1b       	sub	r25, r19

        //menuSelectInterval is
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
    12da:	93 30       	cpi	r25, 0x03	; 3
    12dc:	18 f0       	brcs	.+6      	; 0x12e4 <countButton+0x1c>
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
    12de:	21 11       	cpse	r18, r1
    12e0:	8b c0       	rjmp	.+278    	; 0x13f8 <countButton+0x130>
    12e2:	75 c0       	rjmp	.+234    	; 0x13ce <countButton+0x106>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    12e4:	95 30       	cpi	r25, 0x05	; 5
    12e6:	08 f4       	brcc	.+2      	; 0x12ea <countButton+0x22>
    12e8:	7c c0       	rjmp	.+248    	; 0x13e2 <countButton+0x11a>
    12ea:	22 23       	and	r18, r18
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <countButton+0x28>
    12ee:	6c c0       	rjmp	.+216    	; 0x13c8 <countButton+0x100>
    12f0:	78 c0       	rjmp	.+240    	; 0x13e2 <countButton+0x11a>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    12f2:	1c 99       	sbic	0x03, 4	; 3
    12f4:	10 c0       	rjmp	.+32     	; 0x1316 <countButton+0x4e>
    12f6:	94 2f       	mov	r25, r20
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <countButton+0x3c>
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    12fa:	95 2f       	mov	r25, r21
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <countButton+0x3c>

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    12fe:	94 2f       	mov	r25, r20
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <countButton+0x3c>
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    1302:	96 2f       	mov	r25, r22
    1304:	e3 e2       	ldi	r30, 0x23	; 35
    1306:	f4 ef       	ldi	r31, 0xF4	; 244
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <countButton+0x40>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <countButton+0x46>
    130e:	00 00       	nop
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
      {
        // for debounce
        _delay_ms(halfSec/2);
        menuCnt++;
    1310:	2f 5f       	subi	r18, 0xFF	; 255

        //Pressing the button, lap time calculation should be reset
        //to give 1 sec of time to choose menuCnt
        prevLoop = loopCnt;
    1312:	38 2f       	mov	r19, r24
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <countButton+0x50>
    1316:	94 2f       	mov	r25, r20
    1318:	e1 e1       	ldi	r30, 0x11	; 17
    131a:	fa e7       	ldi	r31, 0x7A	; 122
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <countButton+0x54>
    1320:	00 c0       	rjmp	.+0      	; 0x1322 <countButton+0x5a>
    1322:	00 00       	nop
    //Get menuCnt by counting the button press
    //If pressing the button within 1 second of interval between each press,
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    1324:	99 23       	and	r25, r25
    1326:	b1 f2       	breq	.-84     	; 0x12d4 <countButton+0xc>

    //menuCnt has been set within 3sec of a PCINT occurence
    //  then, play WDT count for a corresponding alarm period.
    if (DONE)
    {
        if (DONE == 2)
    1328:	92 30       	cpi	r25, 0x02	; 2
    132a:	11 f4       	brne	.+4      	; 0x1330 <countButton+0x68>
            menuCnt = prevMenuCnt;
    132c:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <prevMenuCnt>
        //visual cue to notifiy user selected menuCnt
        //blinkLED(menuCnt);
        //_delay_ms(halfSec);
        //turnOnLCDpower();
        //lcd_dispON();
        prevMenuCnt = menuCnt;
    1330:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <prevMenuCnt>
        switch (menuCnt)
    1334:	23 30       	cpi	r18, 0x03	; 3
    1336:	91 f0       	breq	.+36     	; 0x135c <countButton+0x94>
    1338:	28 f4       	brcc	.+10     	; 0x1344 <countButton+0x7c>
    133a:	21 30       	cpi	r18, 0x01	; 1
    133c:	49 f0       	breq	.+18     	; 0x1350 <countButton+0x88>
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	51 f0       	breq	.+20     	; 0x1356 <countButton+0x8e>
    1342:	2b c0       	rjmp	.+86     	; 0x139a <countButton+0xd2>
    1344:	25 30       	cpi	r18, 0x05	; 5
    1346:	19 f1       	breq	.+70     	; 0x138e <countButton+0xc6>
    1348:	c8 f0       	brcs	.+50     	; 0x137c <countButton+0xb4>
    134a:	26 30       	cpi	r18, 0x06	; 6
    134c:	19 f1       	breq	.+70     	; 0x1394 <countButton+0xcc>
    134e:	25 c0       	rjmp	.+74     	; 0x139a <countButton+0xd2>
        {
            case 1:
                //lcd_dispWords();
                //lcd_dispRealClock();
				LCD_TimeDateTempHumid();
    1350:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_TimeDateTempHumid>
				//LCD_TimeDate();
				//LCD_TimeDateTempHumid();
                //_delay_ms(2000);
				//getDHT();
                break;
    1354:	24 c0       	rjmp	.+72     	; 0x139e <countButton+0xd6>
            case 2:
				LCD_TimeDate();
    1356:	0e 94 04 06 	call	0xc08	; 0xc08 <LCD_TimeDate>
                //_delay_ms(2000);
				//getDHT();
                //lcd_showDHT11();
                break;
    135a:	21 c0       	rjmp	.+66     	; 0x139e <countButton+0xd6>
            case 3:
				makePDasOutput();
    135c:	0e 94 2e 08 	call	0x105c	; 0x105c <makePDasOutput>
                turnOnLCDBacklight();
    1360:	0e 94 2e 03 	call	0x65c	; 0x65c <turnOnLCDBacklight>
    1364:	ff e9       	ldi	r31, 0x9F	; 159
    1366:	26 e8       	ldi	r18, 0x86	; 134
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	f1 50       	subi	r31, 0x01	; 1
    136c:	20 40       	sbci	r18, 0x00	; 0
    136e:	80 40       	sbci	r24, 0x00	; 0
    1370:	e1 f7       	brne	.-8      	; 0x136a <countButton+0xa2>
    1372:	00 c0       	rjmp	.+0      	; 0x1374 <countButton+0xac>
    1374:	00 00       	nop
				//LCD_TimeDate();
				_delay_ms(500);
                turnOffLCDBacklight();
    1376:	0e 94 30 03 	call	0x660	; 0x660 <turnOffLCDBacklight>
                break;
    137a:	11 c0       	rjmp	.+34     	; 0x139e <countButton+0xd6>
            case 4:
                //adjustClock();
                adjustMin();
    137c:	0e 94 b8 08 	call	0x1170	; 0x1170 <adjustMin>
                adjustHour();
    1380:	0e 94 62 08 	call	0x10c4	; 0x10c4 <adjustHour>
                adjustSec();
    1384:	0e 94 0e 09 	call	0x121c	; 0x121c <adjustSec>
                lcd_dispRealClock();
    1388:	0e 94 32 03 	call	0x664	; 0x664 <lcd_dispRealClock>
                break;
    138c:	08 c0       	rjmp	.+16     	; 0x139e <countButton+0xd6>
            case 5:
                lcd_dispAccumulatedTime();
    138e:	0e 94 1f 04 	call	0x83e	; 0x83e <lcd_dispAccumulatedTime>
                break;
    1392:	05 c0       	rjmp	.+10     	; 0x139e <countButton+0xd6>
            case 6:
                lcd_dispProgInfo();
    1394:	0e 94 74 04 	call	0x8e8	; 0x8e8 <lcd_dispProgInfo>
                break;
    1398:	02 c0       	rjmp	.+4      	; 0x139e <countButton+0xd6>
            default:
                lcd_dispMenu();
    139a:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_dispMenu>
    139e:	9f e3       	ldi	r25, 0x3F	; 63
    13a0:	e2 e4       	ldi	r30, 0x42	; 66
    13a2:	ff e0       	ldi	r31, 0x0F	; 15
    13a4:	91 50       	subi	r25, 0x01	; 1
    13a6:	e0 40       	sbci	r30, 0x00	; 0
    13a8:	f0 40       	sbci	r31, 0x00	; 0
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <countButton+0xdc>
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <countButton+0xe6>
    13ae:	00 00       	nop
                //getDHT();
        }//switch (menuCnt)

        _delay_ms(5000); //show time of menu result

		makePDasInput(); //make LCD in deep power save mode
    13b0:	0e 94 49 08 	call	0x1092	; 0x1092 <makePDasInput>
		pwrOn = 0;
    13b4:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <pwrOn>
    13b8:	08 95       	ret
    13ba:	81 e1       	ldi	r24, 0x11	; 17
    13bc:	9a e7       	ldi	r25, 0x7A	; 122
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <countButton+0xf6>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <countButton+0xfc>
    13c4:	00 00       	nop
    13c6:	b2 cf       	rjmp	.-156    	; 0x132c <countButton+0x64>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    13c8:	1c 99       	sbic	0x03, 4	; 3
    13ca:	f7 cf       	rjmp	.-18     	; 0x13ba <countButton+0xf2>
    13cc:	96 cf       	rjmp	.-212    	; 0x12fa <countButton+0x32>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    13ce:	95 30       	cpi	r25, 0x05	; 5
    13d0:	d8 f7       	brcc	.-10     	; 0x13c8 <countButton+0x100>
    13d2:	8f cf       	rjmp	.-226    	; 0x12f2 <countButton+0x2a>
    13d4:	e1 e1       	ldi	r30, 0x11	; 17
    13d6:	fa e7       	ldi	r31, 0x7A	; 122
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <countButton+0x110>
    13dc:	00 c0       	rjmp	.+0      	; 0x13de <countButton+0x116>
    13de:	00 00       	nop
    13e0:	79 cf       	rjmp	.-270    	; 0x12d4 <countButton+0xc>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    13e2:	1c 99       	sbic	0x03, 4	; 3
    13e4:	f7 cf       	rjmp	.-18     	; 0x13d4 <countButton+0x10c>
    13e6:	8b cf       	rjmp	.-234    	; 0x12fe <countButton+0x36>
    13e8:	81 e1       	ldi	r24, 0x11	; 17
    13ea:	9a e7       	ldi	r25, 0x7A	; 122
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <countButton+0x124>
    13f0:	00 c0       	rjmp	.+0      	; 0x13f2 <countButton+0x12a>
    13f2:	00 00       	nop
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	98 cf       	rjmp	.-208    	; 0x1328 <countButton+0x60>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    13f8:	1c 99       	sbic	0x03, 4	; 3
    13fa:	f6 cf       	rjmp	.-20     	; 0x13e8 <countButton+0x120>
    13fc:	82 cf       	rjmp	.-252    	; 0x1302 <countButton+0x3a>

000013fe <__divmodqi4>:
    13fe:	87 fb       	bst	r24, 7
    1400:	08 2e       	mov	r0, r24
    1402:	06 26       	eor	r0, r22
    1404:	87 fd       	sbrc	r24, 7
    1406:	81 95       	neg	r24
    1408:	67 fd       	sbrc	r22, 7
    140a:	61 95       	neg	r22
    140c:	0e 94 36 0a 	call	0x146c	; 0x146c <__udivmodqi4>
    1410:	0e f4       	brtc	.+2      	; 0x1414 <__divmodqi4_1>
    1412:	91 95       	neg	r25

00001414 <__divmodqi4_1>:
    1414:	07 fc       	sbrc	r0, 7
    1416:	81 95       	neg	r24

00001418 <__divmodqi4_exit>:
    1418:	08 95       	ret

0000141a <__divmodhi4>:
    141a:	97 fb       	bst	r25, 7
    141c:	07 2e       	mov	r0, r23
    141e:	16 f4       	brtc	.+4      	; 0x1424 <__divmodhi4+0xa>
    1420:	00 94       	com	r0
    1422:	07 d0       	rcall	.+14     	; 0x1432 <__divmodhi4_neg1>
    1424:	77 fd       	sbrc	r23, 7
    1426:	09 d0       	rcall	.+18     	; 0x143a <__divmodhi4_neg2>
    1428:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    142c:	07 fc       	sbrc	r0, 7
    142e:	05 d0       	rcall	.+10     	; 0x143a <__divmodhi4_neg2>
    1430:	3e f4       	brtc	.+14     	; 0x1440 <__divmodhi4_exit>

00001432 <__divmodhi4_neg1>:
    1432:	90 95       	com	r25
    1434:	81 95       	neg	r24
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	08 95       	ret

0000143a <__divmodhi4_neg2>:
    143a:	70 95       	com	r23
    143c:	61 95       	neg	r22
    143e:	7f 4f       	sbci	r23, 0xFF	; 255

00001440 <__divmodhi4_exit>:
    1440:	08 95       	ret

00001442 <__tablejump2__>:
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	05 90       	lpm	r0, Z+
    1448:	f4 91       	lpm	r31, Z
    144a:	e0 2d       	mov	r30, r0
    144c:	09 94       	ijmp

0000144e <__umulhisi3>:
    144e:	a2 9f       	mul	r26, r18
    1450:	b0 01       	movw	r22, r0
    1452:	b3 9f       	mul	r27, r19
    1454:	c0 01       	movw	r24, r0
    1456:	a3 9f       	mul	r26, r19
    1458:	70 0d       	add	r23, r0
    145a:	81 1d       	adc	r24, r1
    145c:	11 24       	eor	r1, r1
    145e:	91 1d       	adc	r25, r1
    1460:	b2 9f       	mul	r27, r18
    1462:	70 0d       	add	r23, r0
    1464:	81 1d       	adc	r24, r1
    1466:	11 24       	eor	r1, r1
    1468:	91 1d       	adc	r25, r1
    146a:	08 95       	ret

0000146c <__udivmodqi4>:
    146c:	99 1b       	sub	r25, r25
    146e:	79 e0       	ldi	r23, 0x09	; 9
    1470:	04 c0       	rjmp	.+8      	; 0x147a <__udivmodqi4_ep>

00001472 <__udivmodqi4_loop>:
    1472:	99 1f       	adc	r25, r25
    1474:	96 17       	cp	r25, r22
    1476:	08 f0       	brcs	.+2      	; 0x147a <__udivmodqi4_ep>
    1478:	96 1b       	sub	r25, r22

0000147a <__udivmodqi4_ep>:
    147a:	88 1f       	adc	r24, r24
    147c:	7a 95       	dec	r23
    147e:	c9 f7       	brne	.-14     	; 0x1472 <__udivmodqi4_loop>
    1480:	80 95       	com	r24
    1482:	08 95       	ret

00001484 <__udivmodhi4>:
    1484:	aa 1b       	sub	r26, r26
    1486:	bb 1b       	sub	r27, r27
    1488:	51 e1       	ldi	r21, 0x11	; 17
    148a:	07 c0       	rjmp	.+14     	; 0x149a <__udivmodhi4_ep>

0000148c <__udivmodhi4_loop>:
    148c:	aa 1f       	adc	r26, r26
    148e:	bb 1f       	adc	r27, r27
    1490:	a6 17       	cp	r26, r22
    1492:	b7 07       	cpc	r27, r23
    1494:	10 f0       	brcs	.+4      	; 0x149a <__udivmodhi4_ep>
    1496:	a6 1b       	sub	r26, r22
    1498:	b7 0b       	sbc	r27, r23

0000149a <__udivmodhi4_ep>:
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	5a 95       	dec	r21
    14a0:	a9 f7       	brne	.-22     	; 0x148c <__udivmodhi4_loop>
    14a2:	80 95       	com	r24
    14a4:	90 95       	com	r25
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	08 95       	ret

000014ac <atoi>:
    14ac:	fc 01       	movw	r30, r24
    14ae:	88 27       	eor	r24, r24
    14b0:	99 27       	eor	r25, r25
    14b2:	e8 94       	clt
    14b4:	21 91       	ld	r18, Z+
    14b6:	20 32       	cpi	r18, 0x20	; 32
    14b8:	e9 f3       	breq	.-6      	; 0x14b4 <atoi+0x8>
    14ba:	29 30       	cpi	r18, 0x09	; 9
    14bc:	10 f0       	brcs	.+4      	; 0x14c2 <atoi+0x16>
    14be:	2e 30       	cpi	r18, 0x0E	; 14
    14c0:	c8 f3       	brcs	.-14     	; 0x14b4 <atoi+0x8>
    14c2:	2b 32       	cpi	r18, 0x2B	; 43
    14c4:	41 f0       	breq	.+16     	; 0x14d6 <atoi+0x2a>
    14c6:	2d 32       	cpi	r18, 0x2D	; 45
    14c8:	39 f4       	brne	.+14     	; 0x14d8 <atoi+0x2c>
    14ca:	68 94       	set
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <atoi+0x2a>
    14ce:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__mulhi_const_10>
    14d2:	82 0f       	add	r24, r18
    14d4:	91 1d       	adc	r25, r1
    14d6:	21 91       	ld	r18, Z+
    14d8:	20 53       	subi	r18, 0x30	; 48
    14da:	2a 30       	cpi	r18, 0x0A	; 10
    14dc:	c0 f3       	brcs	.-16     	; 0x14ce <atoi+0x22>
    14de:	1e f4       	brtc	.+6      	; 0x14e6 <atoi+0x3a>
    14e0:	90 95       	com	r25
    14e2:	81 95       	neg	r24
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	08 95       	ret

000014e8 <strtok>:
    14e8:	42 e7       	ldi	r20, 0x72	; 114
    14ea:	54 e0       	ldi	r21, 0x04	; 4
    14ec:	0e 94 89 0a 	call	0x1512	; 0x1512 <strtok_r>
    14f0:	08 95       	ret

000014f2 <strcmp>:
    14f2:	fb 01       	movw	r30, r22
    14f4:	dc 01       	movw	r26, r24
    14f6:	8d 91       	ld	r24, X+
    14f8:	01 90       	ld	r0, Z+
    14fa:	80 19       	sub	r24, r0
    14fc:	01 10       	cpse	r0, r1
    14fe:	d9 f3       	breq	.-10     	; 0x14f6 <strcmp+0x4>
    1500:	99 0b       	sbc	r25, r25
    1502:	08 95       	ret

00001504 <strcpy>:
    1504:	fb 01       	movw	r30, r22
    1506:	dc 01       	movw	r26, r24
    1508:	01 90       	ld	r0, Z+
    150a:	0d 92       	st	X+, r0
    150c:	00 20       	and	r0, r0
    150e:	e1 f7       	brne	.-8      	; 0x1508 <strcpy+0x4>
    1510:	08 95       	ret

00001512 <strtok_r>:
    1512:	fa 01       	movw	r30, r20
    1514:	a1 91       	ld	r26, Z+
    1516:	b0 81       	ld	r27, Z
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	19 f4       	brne	.+6      	; 0x1522 <strtok_r+0x10>
    151c:	10 97       	sbiw	r26, 0x00	; 0
    151e:	e1 f0       	breq	.+56     	; 0x1558 <strtok_r+0x46>
    1520:	cd 01       	movw	r24, r26
    1522:	dc 01       	movw	r26, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0d 90       	ld	r0, X+
    1528:	00 20       	and	r0, r0
    152a:	11 f4       	brne	.+4      	; 0x1530 <strtok_r+0x1e>
    152c:	c0 01       	movw	r24, r0
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <strtok_r+0x44>
    1530:	fb 01       	movw	r30, r22
    1532:	21 91       	ld	r18, Z+
    1534:	22 23       	and	r18, r18
    1536:	19 f0       	breq	.+6      	; 0x153e <strtok_r+0x2c>
    1538:	20 15       	cp	r18, r0
    153a:	d9 f7       	brne	.-10     	; 0x1532 <strtok_r+0x20>
    153c:	f3 cf       	rjmp	.-26     	; 0x1524 <strtok_r+0x12>
    153e:	fb 01       	movw	r30, r22
    1540:	21 91       	ld	r18, Z+
    1542:	20 15       	cp	r18, r0
    1544:	19 f4       	brne	.+6      	; 0x154c <strtok_r+0x3a>
    1546:	1e 92       	st	-X, r1
    1548:	11 96       	adiw	r26, 0x01	; 1
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <strtok_r+0x46>
    154c:	22 23       	and	r18, r18
    154e:	c1 f7       	brne	.-16     	; 0x1540 <strtok_r+0x2e>
    1550:	0d 90       	ld	r0, X+
    1552:	00 20       	and	r0, r0
    1554:	a1 f7       	brne	.-24     	; 0x153e <strtok_r+0x2c>
    1556:	d0 01       	movw	r26, r0
    1558:	fa 01       	movw	r30, r20
    155a:	a1 93       	st	Z+, r26
    155c:	b0 83       	st	Z, r27
    155e:	08 95       	ret

00001560 <__itoa_ncheck>:
    1560:	bb 27       	eor	r27, r27
    1562:	4a 30       	cpi	r20, 0x0A	; 10
    1564:	31 f4       	brne	.+12     	; 0x1572 <__itoa_ncheck+0x12>
    1566:	99 23       	and	r25, r25
    1568:	22 f4       	brpl	.+8      	; 0x1572 <__itoa_ncheck+0x12>
    156a:	bd e2       	ldi	r27, 0x2D	; 45
    156c:	90 95       	com	r25
    156e:	81 95       	neg	r24
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__utoa_common>

00001576 <__mulhi_const_10>:
    1576:	7a e0       	ldi	r23, 0x0A	; 10
    1578:	97 9f       	mul	r25, r23
    157a:	90 2d       	mov	r25, r0
    157c:	87 9f       	mul	r24, r23
    157e:	80 2d       	mov	r24, r0
    1580:	91 0d       	add	r25, r1
    1582:	11 24       	eor	r1, r1
    1584:	08 95       	ret

00001586 <__utoa_ncheck>:
    1586:	bb 27       	eor	r27, r27

00001588 <__utoa_common>:
    1588:	fb 01       	movw	r30, r22
    158a:	55 27       	eor	r21, r21
    158c:	aa 27       	eor	r26, r26
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	aa 1f       	adc	r26, r26
    1594:	a4 17       	cp	r26, r20
    1596:	10 f0       	brcs	.+4      	; 0x159c <__utoa_common+0x14>
    1598:	a4 1b       	sub	r26, r20
    159a:	83 95       	inc	r24
    159c:	50 51       	subi	r21, 0x10	; 16
    159e:	b9 f7       	brne	.-18     	; 0x158e <__utoa_common+0x6>
    15a0:	a0 5d       	subi	r26, 0xD0	; 208
    15a2:	aa 33       	cpi	r26, 0x3A	; 58
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <__utoa_common+0x20>
    15a6:	a9 5d       	subi	r26, 0xD9	; 217
    15a8:	a1 93       	st	Z+, r26
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	79 f7       	brne	.-34     	; 0x158c <__utoa_common+0x4>
    15ae:	b1 11       	cpse	r27, r1
    15b0:	b1 93       	st	Z+, r27
    15b2:	11 92       	st	Z+, r1
    15b4:	cb 01       	movw	r24, r22
    15b6:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <strrev>

000015ba <strrev>:
    15ba:	dc 01       	movw	r26, r24
    15bc:	fc 01       	movw	r30, r24
    15be:	67 2f       	mov	r22, r23
    15c0:	71 91       	ld	r23, Z+
    15c2:	77 23       	and	r23, r23
    15c4:	e1 f7       	brne	.-8      	; 0x15be <strrev+0x4>
    15c6:	32 97       	sbiw	r30, 0x02	; 2
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <strrev+0x18>
    15ca:	7c 91       	ld	r23, X
    15cc:	6d 93       	st	X+, r22
    15ce:	70 83       	st	Z, r23
    15d0:	62 91       	ld	r22, -Z
    15d2:	ae 17       	cp	r26, r30
    15d4:	bf 07       	cpc	r27, r31
    15d6:	c8 f3       	brcs	.-14     	; 0x15ca <strrev+0x10>
    15d8:	08 95       	ret

000015da <_exit>:
    15da:	f8 94       	cli

000015dc <__stop_program>:
    15dc:	ff cf       	rjmp	.-2      	; 0x15dc <__stop_program>
