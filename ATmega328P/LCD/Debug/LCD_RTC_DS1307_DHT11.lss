
LCD_RTC_DS1307_DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000372  00800100  00001586  0000161a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001586  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800472  00800472  0000198c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e7c  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001655  00000000  00000000  00006b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000217a  00000000  00000000  000081a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  0000a320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a31  00000000  00000000  0000aa40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c3c  00000000  00000000  0000b471  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000d0ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_3>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	d8 01       	movw	r26, r16
      6a:	dc 01       	movw	r26, r24
      6c:	d8 01       	movw	r26, r16
      6e:	e0 01       	movw	r28, r0
      70:	d8 01       	movw	r26, r16
      72:	e0 01       	movw	r28, r0
      74:	d8 01       	movw	r26, r16
      76:	d8 01       	movw	r26, r16
      78:	e0 01       	movw	r28, r0
      7a:	d8 01       	movw	r26, r16
      7c:	e0 01       	movw	r28, r0
      7e:	d8 01       	movw	r26, r16
      80:	a1 03       	fmuls	r18, r17
      82:	aa 03       	fmulsu	r18, r18
      84:	b3 03       	fmuls	r19, r19
      86:	bc 03       	fmulsu	r19, r20
      88:	c5 03       	fmuls	r20, r21
      8a:	ce 03       	fmulsu	r20, r22
      8c:	d7 03       	fmuls	r21, r23

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	14 e0       	ldi	r17, 0x04	; 4
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e6 e8       	ldi	r30, 0x86	; 134
      a2:	f5 e1       	ldi	r31, 0x15	; 21
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a2 37       	cpi	r26, 0x72	; 114
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	24 e0       	ldi	r18, 0x04	; 4
      b2:	a2 e7       	ldi	r26, 0x72	; 114
      b4:	b4 e0       	ldi	r27, 0x04	; 4
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a9 38       	cpi	r26, 0x89	; 137
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <main>
      c4:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <getDHT>:

char strTemp[3], strHumid[3];

//-------------------------------------------
void getDHT()
{
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	00 d0       	rcall	.+0      	; 0xd6 <getDHT+0xa>
      d6:	00 d0       	rcall	.+0      	; 0xd8 <getDHT+0xc>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
	uint16_t temp; 
	uint16_t humid; 
	TinuDHT tinudht;
	DHT_VCC_ddr |= _BV(DHT_VCC_bit);
      dc:	22 9a       	sbi	0x04, 2	; 4
	DHT_VCC_port |= _BV(DHT_VCC_bit);
      de:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e0:	2f e9       	ldi	r18, 0x9F	; 159
      e2:	86 e8       	ldi	r24, 0x86	; 134
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	21 50       	subi	r18, 0x01	; 1
      e8:	80 40       	sbci	r24, 0x00	; 0
      ea:	90 40       	sbci	r25, 0x00	; 0
      ec:	e1 f7       	brne	.-8      	; 0xe6 <getDHT+0x1a>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <getDHT+0x24>
      f0:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, TINUDHT_PIN);
      f2:	61 e0       	ldi	r22, 0x01	; 1
      f4:	ce 01       	movw	r24, r28
      f6:	01 96       	adiw	r24, 0x01	; 1
      f8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <tinudht_read>
      fc:	2f e9       	ldi	r18, 0x9F	; 159
      fe:	86 e8       	ldi	r24, 0x86	; 134
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	21 50       	subi	r18, 0x01	; 1
     104:	80 40       	sbci	r24, 0x00	; 0
     106:	90 40       	sbci	r25, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <getDHT+0x36>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <getDHT+0x40>
     10c:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, TINUDHT_PIN);
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	ce 01       	movw	r24, r28
     112:	01 96       	adiw	r24, 0x01	; 1
     114:	0e 94 4f 07 	call	0xe9e	; 0xe9e <tinudht_read>
	temp = tinudht.temperature;
	humid = tinudht.humidity;
     118:	09 81       	ldd	r16, Y+1	; 0x01
     11a:	1a 81       	ldd	r17, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     11c:	4a e0       	ldi	r20, 0x0A	; 10
     11e:	64 e8       	ldi	r22, 0x84	; 132
     120:	74 e0       	ldi	r23, 0x04	; 4
     122:	8b 81       	ldd	r24, Y+3	; 0x03
     124:	9c 81       	ldd	r25, Y+4	; 0x04
     126:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     12a:	4a e0       	ldi	r20, 0x0A	; 10
     12c:	61 e8       	ldi	r22, 0x81	; 129
     12e:	74 e0       	ldi	r23, 0x04	; 4
     130:	c8 01       	movw	r24, r16
     132:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	lcd_write_string_4d((uint8_t *)strHumid);
	*/

}//getDHT
     136:	0f 90       	pop	r0
     138:	0f 90       	pop	r0
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	08 95       	ret

00000148 <I2C_Init>:
 {
	 I2C_Start(busAddr); // send bus address
	 I2C_Write(deviceRegister); // first byte = device register address
	 I2C_Write(data); // second byte = data for device register
	 I2C_Stop();
 }
     148:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     14c:	8d ef       	ldi	r24, 0xFD	; 253
     14e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     152:	08 95       	ret

00000154 <I2C_Detect>:
     154:	94 ea       	ldi	r25, 0xA4	; 164
     156:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     15a:	ec eb       	ldi	r30, 0xBC	; 188
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	90 81       	ld	r25, Z
     160:	99 23       	and	r25, r25
     162:	ec f7       	brge	.-6      	; 0x15e <I2C_Detect+0xa>
     164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     168:	84 e8       	ldi	r24, 0x84	; 132
     16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     16e:	ec eb       	ldi	r30, 0xBC	; 188
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	88 23       	and	r24, r24
     176:	ec f7       	brge	.-6      	; 0x172 <I2C_Detect+0x1e>
     178:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     17c:	98 7f       	andi	r25, 0xF8	; 248
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	98 31       	cpi	r25, 0x18	; 24
     182:	09 f0       	breq	.+2      	; 0x186 <I2C_Detect+0x32>
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	08 95       	ret

00000188 <I2C_Write>:
     188:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     18c:	84 e8       	ldi	r24, 0x84	; 132
     18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     192:	ec eb       	ldi	r30, 0xBC	; 188
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	88 23       	and	r24, r24
     19a:	ec f7       	brge	.-6      	; 0x196 <I2C_Write+0xe>
     19c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1a0:	98 7f       	andi	r25, 0xF8	; 248
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	98 32       	cpi	r25, 0x28	; 40
     1a6:	09 f4       	brne	.+2      	; 0x1aa <I2C_Write+0x22>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	08 95       	ret

000001ac <I2C_ReadNACK>:
     1ac:	84 e8       	ldi	r24, 0x84	; 132
     1ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1b2:	ec eb       	ldi	r30, 0xBC	; 188
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	88 23       	and	r24, r24
     1ba:	ec f7       	brge	.-6      	; 0x1b6 <I2C_ReadNACK+0xa>
     1bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1c0:	08 95       	ret

000001c2 <I2C_ReadRegister>:
 byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
 {
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	c8 2f       	mov	r28, r24
     1c8:	d6 2f       	mov	r29, r22
	 }
	 return 0; // none detected, so return 0.
 }
 void I2C_Start (byte slaveAddr)
 {
	 I2C_Detect(slaveAddr);
     1ca:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Detect>
 }
 byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
 {
	 byte data = 0;
	 I2C_Start(busAddr); // send device address
	 I2C_Write(deviceRegister); // set register pointer
     1ce:	8d 2f       	mov	r24, r29
     1d0:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>
	 }
	 return 0; // none detected, so return 0.
 }
 void I2C_Start (byte slaveAddr)
 {
	 I2C_Detect(slaveAddr);
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	8c 0f       	add	r24, r28
     1d8:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Detect>
 {
	 byte data = 0;
	 I2C_Start(busAddr); // send device address
	 I2C_Write(deviceRegister); // set register pointer
	 I2C_Start(busAddr+READ); // restart as a read operation
	 data = I2C_ReadNACK(); // read the register data
     1dc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <I2C_ReadNACK>
	 I2C_Stop(); // stop
     1e0:	94 e9       	ldi	r25, 0x94	; 148
     1e2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	 return data;
 }
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <__vector_3>:
    EIMSK = 0x00;

    TIMSK0 = 0x02; //timer 0 interrupt sources

    PRR = 0x00; //power controller
    sei(); //re-enable interrupts
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	0f 92       	push	r0
     1f4:	11 24       	eor	r1, r1
     1f6:	2f 93       	push	r18
     1f8:	3f 93       	push	r19
     1fa:	4f 93       	push	r20
     1fc:	5f 93       	push	r21
     1fe:	6f 93       	push	r22
     200:	7f 93       	push	r23
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ef 93       	push	r30
     210:	ff 93       	push	r31
     212:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <btcnt>
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	98 0f       	add	r25, r24
     21a:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <btcnt>
     21e:	80 fd       	sbrc	r24, 0
     220:	2f c0       	rjmp	.+94     	; 0x280 <__vector_3+0x94>
     222:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <pwrOn>
     226:	81 11       	cpse	r24, r1
     228:	0d c0       	rjmp	.+26     	; 0x244 <__vector_3+0x58>
     22a:	0e 94 02 08 	call	0x1004	; 0x1004 <makePDasOutput>
     22e:	0e 94 91 02 	call	0x522	; 0x522 <lcd_init_4d>
     232:	83 ec       	ldi	r24, 0xC3	; 195
     234:	99 e0       	ldi	r25, 0x09	; 9
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <__vector_3+0x4a>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <__vector_3+0x50>
     23c:	00 00       	nop
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <pwrOn>
     244:	1c 9b       	sbis	0x03, 4	; 3
     246:	16 c0       	rjmp	.+44     	; 0x274 <__vector_3+0x88>
     248:	cb e6       	ldi	r28, 0x6B	; 107
     24a:	d0 e0       	ldi	r29, 0x00	; 0
     24c:	88 81       	ld	r24, Y
     24e:	8f 7e       	andi	r24, 0xEF	; 239
     250:	88 83       	st	Y, r24
     252:	81 ee       	ldi	r24, 0xE1	; 225
     254:	94 e0       	ldi	r25, 0x04	; 4
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <__vector_3+0x6a>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <__vector_3+0x70>
     25c:	00 00       	nop
     25e:	0e 94 38 09 	call	0x1270	; 0x1270 <countButton>
     262:	88 81       	ld	r24, Y
     264:	80 61       	ori	r24, 0x10	; 16
     266:	88 83       	st	Y, r24
     268:	81 ee       	ldi	r24, 0xE1	; 225
     26a:	94 e0       	ldi	r25, 0x04	; 4
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <__vector_3+0x80>
     270:	00 c0       	rjmp	.+0      	; 0x272 <__vector_3+0x86>
     272:	00 00       	nop
     274:	8f e4       	ldi	r24, 0x4F	; 79
     276:	93 ec       	ldi	r25, 0xC3	; 195
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <__vector_3+0x8c>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <__vector_3+0x92>
     27e:	00 00       	nop
     280:	ff 91       	pop	r31
     282:	ef 91       	pop	r30
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	bf 91       	pop	r27
     28a:	af 91       	pop	r26
     28c:	9f 91       	pop	r25
     28e:	8f 91       	pop	r24
     290:	7f 91       	pop	r23
     292:	6f 91       	pop	r22
     294:	5f 91       	pop	r21
     296:	4f 91       	pop	r20
     298:	3f 91       	pop	r19
     29a:	2f 91       	pop	r18
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <initINT>:
     2a6:	f8 94       	cli
     2a8:	e8 e6       	ldi	r30, 0x68	; 104
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	81 60       	ori	r24, 0x01	; 1
     2b0:	80 83       	st	Z, r24
     2b2:	eb e6       	ldi	r30, 0x6B	; 107
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 61       	ori	r24, 0x10	; 16
     2ba:	80 83       	st	Z, r24
     2bc:	78 94       	sei
     2be:	08 95       	ret

000002c0 <proceedClock>:
}

void proceedClock()
{
    //WDT interrupt occurs every 8 seconds
    sec += 8;
     2c0:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
     2c4:	88 5f       	subi	r24, 0xF8	; 248
     2c6:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <sec>
    accumulatedSec += 8;
     2ca:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <accumulatedSec>
     2ce:	28 5f       	subi	r18, 0xF8	; 248
     2d0:	20 93 74 04 	sts	0x0474, r18	; 0x800474 <accumulatedSec>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
     2d4:	8c 33       	cpi	r24, 0x3C	; 60
     2d6:	5c f0       	brlt	.+22     	; 0x2ee <proceedClock+0x2e>
    {
        sec%=60;
        min++;
     2d8:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <min>
     2dc:	9f 5f       	subi	r25, 0xFF	; 255
     2de:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <min>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
    {
        sec%=60;
     2e2:	6c e3       	ldi	r22, 0x3C	; 60
     2e4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__divmodqi4>
        min++;
        sec += 2;
     2e8:	9e 5f       	subi	r25, 0xFE	; 254
     2ea:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <sec>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
     2ee:	2c 33       	cpi	r18, 0x3C	; 60
     2f0:	64 f0       	brlt	.+24     	; 0x30a <proceedClock+0x4a>
    {
        accumulatedSec%=60;
        accumulatedMin++;
     2f2:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accumulatedMin>
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <accumulatedMin>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
    {
        accumulatedSec%=60;
     2fc:	82 2f       	mov	r24, r18
     2fe:	6c e3       	ldi	r22, 0x3C	; 60
     300:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__divmodqi4>
        accumulatedMin++;
        accumulatedSec += 2;
     304:	9e 5f       	subi	r25, 0xFE	; 254
     306:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <accumulatedSec>
    }

    //real-time fetched from compiled time constant __TIME__
    //calculate hours
    if (min >= 60)
     30a:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <min>
     30e:	8c 33       	cpi	r24, 0x3C	; 60
     310:	54 f0       	brlt	.+20     	; 0x326 <proceedClock+0x66>
    {
        min%=60;
     312:	6c e3       	ldi	r22, 0x3C	; 60
     314:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__divmodqi4>
     318:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <min>
        hour++;
     31c:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <hour>
    }
    //system run-time acculated time
    //calculate hours
    //if ((accumulatedMin == 60) && (hourlyAdjusted == 0))
    if (accumulatedMin == 60)
     326:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accumulatedMin>
     32a:	8c 33       	cpi	r24, 0x3C	; 60
     32c:	61 f4       	brne	.+24     	; 0x346 <proceedClock+0x86>
    {
        // adjust time by experiments
        //hourlyAdjusted = 1;
        sec -= 20;
     32e:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
     332:	84 51       	subi	r24, 0x14	; 20
     334:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <sec>
        accumulatedMin = 0;
     338:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <accumulatedMin>
        accumulatedHour++;
     33c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <accumulatedHour>
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <accumulatedHour>
    }
    /*
    if (accumulatedMin == 59)
        hourlyAdjusted = 0;
    */
    if (hour >= 24)
     346:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
     34a:	88 31       	cpi	r24, 0x18	; 24
     34c:	04 f1       	brlt	.+64     	; 0x38e <proceedClock+0xce>
    {
        hour=0;
     34e:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <hour>
        date++;
     352:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <date>
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <date>
        day++;
     35c:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <day>
     360:	8f 5f       	subi	r24, 0xFF	; 255
        if (day >= 7)
     362:	87 30       	cpi	r24, 0x07	; 7
     364:	1c f4       	brge	.+6      	; 0x36c <proceedClock+0xac>
    */
    if (hour >= 24)
    {
        hour=0;
        date++;
        day++;
     366:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <day>
     36a:	11 c0       	rjmp	.+34     	; 0x38e <proceedClock+0xce>
        if (day >= 7)
            day %= 7;
     36c:	93 e9       	ldi	r25, 0x93	; 147
     36e:	89 02       	muls	r24, r25
     370:	91 2d       	mov	r25, r1
     372:	11 24       	eor	r1, r1
     374:	98 0f       	add	r25, r24
     376:	95 95       	asr	r25
     378:	95 95       	asr	r25
     37a:	87 fd       	sbrc	r24, 7
     37c:	93 95       	inc	r25
     37e:	29 2f       	mov	r18, r25
     380:	22 0f       	add	r18, r18
     382:	22 0f       	add	r18, r18
     384:	22 0f       	add	r18, r18
     386:	29 1b       	sub	r18, r25
     388:	82 1b       	sub	r24, r18
     38a:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <day>
    }
    switch (month)
     38e:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <month>
     392:	82 2f       	mov	r24, r18
     394:	02 2e       	mov	r0, r18
     396:	00 0c       	add	r0, r0
     398:	99 0b       	sbc	r25, r25
     39a:	aa 0b       	sbc	r26, r26
     39c:	bb 0b       	sbc	r27, r27
     39e:	fc 01       	movw	r30, r24
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	ec 30       	cpi	r30, 0x0C	; 12
     3a4:	f1 05       	cpc	r31, r1
     3a6:	60 f4       	brcc	.+24     	; 0x3c0 <proceedClock+0x100>
     3a8:	ec 5c       	subi	r30, 0xCC	; 204
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__tablejump2__>
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            monthEndDate = 31;
     3b0:	8f e1       	ldi	r24, 0x1F	; 31
     3b2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <monthEndDate>
            break;
     3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <proceedClock+0x106>
        case 2:
            monthEndDate = 28;
     3b8:	8c e1       	ldi	r24, 0x1C	; 28
     3ba:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <monthEndDate>
            break;
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <proceedClock+0x106>
        default:
            monthEndDate = 30;
     3c0:	8e e1       	ldi	r24, 0x1E	; 30
     3c2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <monthEndDate>
    }//switch (month)

    if (date > monthEndDate)
     3c6:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <date>
     3ca:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <monthEndDate>
     3ce:	89 17       	cp	r24, r25
     3d0:	34 f4       	brge	.+12     	; 0x3de <proceedClock+0x11e>
    {
        date=1;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <date>
        month++;
     3d8:	2f 5f       	subi	r18, 0xFF	; 255
     3da:	20 93 79 04 	sts	0x0479, r18	; 0x800479 <month>
    }

    if (month > 12)
     3de:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <month>
     3e2:	8d 30       	cpi	r24, 0x0D	; 13
     3e4:	44 f0       	brlt	.+16     	; 0x3f6 <proceedClock+0x136>
    {
        month=1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
        year++;
     3ec:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <year>
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <year>
     3f6:	08 95       	ret

000003f8 <__vector_6>:
	}//if ((btcnt++ % 2) == 0)
}//ISR(PCINT0_vect)

//-----------------------------------
ISR(WDT_vect)
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
    //PORTB |= _BV(PB4);
    proceedClock();
     41a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <proceedClock>
    lcd_dispWords(wd%MAXWORDCNT);
     41e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <wd>
     422:	9d ec       	ldi	r25, 0xCD	; 205
     424:	89 9f       	mul	r24, r25
     426:	91 2d       	mov	r25, r1
     428:	11 24       	eor	r1, r1
     42a:	96 95       	lsr	r25
     42c:	96 95       	lsr	r25
     42e:	96 95       	lsr	r25
     430:	99 0f       	add	r25, r25
     432:	29 2f       	mov	r18, r25
     434:	22 0f       	add	r18, r18
     436:	22 0f       	add	r18, r18
     438:	92 0f       	add	r25, r18
     43a:	89 1b       	sub	r24, r25
     43c:	0e 94 97 04 	call	0x92e	; 0x92e <lcd_dispWords>
    wd++;
     440:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <wd>
     444:	8f 5f       	subi	r24, 0xFF	; 255
     446:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <wd>
    //lcd_dispRealClock();
    //PORTB &= ~_BV(PB4);
}//ISR(WDT_vect)
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	bf 91       	pop	r27
     450:	af 91       	pop	r26
     452:	9f 91       	pop	r25
     454:	8f 91       	pop	r24
     456:	7f 91       	pop	r23
     458:	6f 91       	pop	r22
     45a:	5f 91       	pop	r21
     45c:	4f 91       	pop	r20
     45e:	3f 91       	pop	r19
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~_BV(lcd_D7_bit);                        // assume that data is '0'
     46c:	5f 98       	cbi	0x0b, 7	; 11
    if (theByte & 1<<7) lcd_D7_port |= _BV(lcd_D7_bit);     // make data = '1' if necessary
     46e:	88 23       	and	r24, r24
     470:	0c f4       	brge	.+2      	; 0x474 <lcd_write_4+0x8>
     472:	5f 9a       	sbi	0x0b, 7	; 11

    lcd_D6_port &= ~_BV(lcd_D6_bit);                        // repeat for each data bit
     474:	5e 98       	cbi	0x0b, 6	; 11
    if (theByte & 1<<6) lcd_D6_port |= _BV(lcd_D6_bit);
     476:	86 fd       	sbrc	r24, 6
     478:	5e 9a       	sbi	0x0b, 6	; 11

    lcd_D5_port &= ~_BV(lcd_D5_bit);
     47a:	5d 98       	cbi	0x0b, 5	; 11
    if (theByte & 1<<5) lcd_D5_port |= _BV(lcd_D5_bit);
     47c:	85 fd       	sbrc	r24, 5
     47e:	5d 9a       	sbi	0x0b, 5	; 11

    lcd_D4_port &= ~_BV(lcd_D4_bit);
     480:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<4) lcd_D4_port |= _BV(lcd_D4_bit);
     482:	84 fd       	sbrc	r24, 4
     484:	5c 9a       	sbi	0x0b, 4	; 11

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= _BV(lcd_E_bit);                   // Enable pin high
     486:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     488:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~_BV(lcd_E_bit);                  // Enable pin low
     48a:	5b 98       	cbi	0x0b, 3	; 11
     48c:	00 00       	nop
     48e:	08 95       	ret

00000490 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     490:	cf 93       	push	r28
     492:	c8 2f       	mov	r28, r24
    lcd_RS_port |= _BV(lcd_RS_bit);                 // select the Data Register (RS high)
     494:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     496:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     498:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     49c:	8c 2f       	mov	r24, r28
     49e:	82 95       	swap	r24
     4a0:	80 7f       	andi	r24, 0xF0	; 240
     4a2:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
}
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <lcd_write_string_4d+0xa>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     4ba:	1a 82       	std	Y+2, r1	; 0x02
     4bc:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     4be:	e9 81       	ldd	r30, Y+1	; 0x01
     4c0:	fa 81       	ldd	r31, Y+2	; 0x02
     4c2:	e8 0f       	add	r30, r24
     4c4:	f9 1f       	adc	r31, r25
     4c6:	80 81       	ld	r24, Z
     4c8:	88 23       	and	r24, r24
     4ca:	b9 f0       	breq	.+46     	; 0x4fa <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     4cc:	e9 81       	ldd	r30, Y+1	; 0x01
     4ce:	fa 81       	ldd	r31, Y+2	; 0x02
     4d0:	e0 0f       	add	r30, r16
     4d2:	f1 1f       	adc	r31, r17
     4d4:	80 81       	ld	r24, Z
     4d6:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
        i++;
     4da:	29 81       	ldd	r18, Y+1	; 0x01
     4dc:	3a 81       	ldd	r19, Y+2	; 0x02
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	3a 83       	std	Y+2, r19	; 0x02
     4e4:	29 83       	std	Y+1, r18	; 0x01
     4e6:	84 e1       	ldi	r24, 0x14	; 20
     4e8:	8a 95       	dec	r24
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <lcd_write_string_4d+0x3e>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     4ec:	e9 81       	ldd	r30, Y+1	; 0x01
     4ee:	fa 81       	ldd	r31, Y+2	; 0x02
     4f0:	e0 0f       	add	r30, r16
     4f2:	f1 1f       	adc	r31, r17
     4f4:	80 81       	ld	r24, Z
     4f6:	81 11       	cpse	r24, r1
     4f8:	e9 cf       	rjmp	.-46     	; 0x4cc <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(DELAY_INST);                              // 40 uS delay (min)
    }
}
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     508:	cf 93       	push	r28
     50a:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     50c:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     50e:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     510:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     514:	8c 2f       	mov	r24, r28
     516:	82 95       	swap	r24
     518:	80 7f       	andi	r24, 0xF0	; 240
     51a:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
}
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	8f e0       	ldi	r24, 0x0F	; 15
     524:	97 e2       	ldi	r25, 0x27	; 39
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <lcd_init_4d+0x4>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <lcd_init_4d+0xa>
     52c:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     52e:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     530:	5b 98       	cbi	0x0b, 3	; 11

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     532:	80 e3       	ldi	r24, 0x30	; 48
     534:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
     538:	81 ee       	ldi	r24, 0xE1	; 225
     53a:	94 e0       	ldi	r25, 0x04	; 4
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <lcd_init_4d+0x1a>
     540:	00 c0       	rjmp	.+0      	; 0x542 <lcd_init_4d+0x20>
     542:	00 00       	nop
    //_delay_ms(10);                                  // 4.1 mS delay (min)
	_delay_ms(5); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     544:	80 e3       	ldi	r24, 0x30	; 48
     546:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
     54a:	8f e2       	ldi	r24, 0x2F	; 47
     54c:	95 e7       	ldi	r25, 0x75	; 117
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <lcd_init_4d+0x2c>
     552:	00 c0       	rjmp	.+0      	; 0x554 <lcd_init_4d+0x32>
     554:	00 00       	nop
    //_delay_us(200);                                 // 100uS delay (min)
	_delay_ms(120); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     556:	80 e3       	ldi	r24, 0x30	; 48
     558:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
     55c:	83 ec       	ldi	r24, 0xC3	; 195
     55e:	99 e0       	ldi	r25, 0x09	; 9
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <lcd_init_4d+0x3e>
     564:	00 c0       	rjmp	.+0      	; 0x566 <lcd_init_4d+0x44>
     566:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     568:	88 e2       	ldi	r24, 0x28	; 40
     56a:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56e:	94 e1       	ldi	r25, 0x14	; 20
     570:	9a 95       	dec	r25
     572:	f1 f7       	brne	.-4      	; 0x570 <lcd_init_4d+0x4e>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     574:	88 e2       	ldi	r24, 0x28	; 40
     576:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     57a:	84 e1       	ldi	r24, 0x14	; 20
     57c:	8a 95       	dec	r24
     57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init_4d+0x5a>
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     586:	94 e1       	ldi	r25, 0x14	; 20
     588:	9a 95       	dec	r25
     58a:	f1 f7       	brne	.-4      	; 0x588 <lcd_init_4d+0x66>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     592:	87 ee       	ldi	r24, 0xE7	; 231
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <lcd_init_4d+0x74>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <lcd_init_4d+0x7a>
     59c:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a4:	94 e1       	ldi	r25, 0x14	; 20
     5a6:	9a 95       	dec	r25
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <lcd_init_4d+0x84>

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     5aa:	8c e0       	ldi	r24, 0x0C	; 12
     5ac:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     5b0:	84 e1       	ldi	r24, 0x14	; 20
     5b2:	8a 95       	dec	r24
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <lcd_init_4d+0x90>
     5b6:	08 95       	ret

000005b8 <config>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b8:	57 9a       	sbi	0x0a, 7	; 10
     5ba:	56 9a       	sbi	0x0a, 6	; 10
     5bc:	55 9a       	sbi	0x0a, 5	; 10
     5be:	54 9a       	sbi	0x0a, 4	; 10
     5c0:	20 9a       	sbi	0x04, 0	; 4
     5c2:	28 9a       	sbi	0x05, 0	; 5
     5c4:	26 9a       	sbi	0x04, 6	; 4
     5c6:	2e 98       	cbi	0x05, 6	; 5
     5c8:	27 9a       	sbi	0x04, 7	; 4
     5ca:	2f 98       	cbi	0x05, 7	; 5
     5cc:	22 9a       	sbi	0x04, 2	; 4
     5ce:	2a 98       	cbi	0x05, 2	; 5
     5d0:	24 98       	cbi	0x04, 4	; 4
     5d2:	53 9a       	sbi	0x0a, 3	; 10
     5d4:	52 9a       	sbi	0x0a, 2	; 10
     5d6:	23 9a       	sbi	0x04, 3	; 4
     5d8:	2b 98       	cbi	0x05, 3	; 5
     5da:	08 95       	ret

000005dc <main>:
     5dc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <config>
     5e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <initINT>
     5e4:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_Init>
     5e8:	0e 94 17 06 	call	0xc2e	; 0xc2e <parseCompileTime>
     5ec:	83 b7       	in	r24, 0x33	; 51
     5ee:	81 7f       	andi	r24, 0xF1	; 241
     5f0:	84 60       	ori	r24, 0x04	; 4
     5f2:	83 bf       	out	0x33, r24	; 51
     5f4:	83 b7       	in	r24, 0x33	; 51
     5f6:	81 60       	ori	r24, 0x01	; 1
     5f8:	83 bf       	out	0x33, r24	; 51
     5fa:	88 95       	sleep
     5fc:	83 b7       	in	r24, 0x33	; 51
     5fe:	8e 7f       	andi	r24, 0xFE	; 254
     600:	83 bf       	out	0x33, r24	; 51
     602:	f8 cf       	rjmp	.-16     	; 0x5f4 <main+0x18>

00000604 <turnOnLCDBacklight>:
     604:	28 98       	cbi	0x05, 0	; 5
     606:	08 95       	ret

00000608 <turnOffLCDBacklight>:
     608:	28 9a       	sbi	0x05, 0	; 5
     60a:	08 95       	ret

0000060c <lcd_dispRealClock>:
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	6c 97       	sbiw	r28, 0x1c	; 28
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	80 e8       	ldi	r24, 0x80	; 128
     622:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     626:	84 e1       	ldi	r24, 0x14	; 20
     628:	8a 95       	dec	r24
     62a:	f1 f7       	brne	.-4      	; 0x628 <lcd_dispRealClock+0x1c>
     62c:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
     630:	4a e0       	ldi	r20, 0x0A	; 10
     632:	be 01       	movw	r22, r28
     634:	69 5f       	subi	r22, 0xF9	; 249
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	08 2e       	mov	r0, r24
     63a:	00 0c       	add	r0, r0
     63c:	99 0b       	sbc	r25, r25
     63e:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     642:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <min>
     646:	4a e0       	ldi	r20, 0x0A	; 10
     648:	be 01       	movw	r22, r28
     64a:	6c 5f       	subi	r22, 0xFC	; 252
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	08 2e       	mov	r0, r24
     650:	00 0c       	add	r0, r0
     652:	99 0b       	sbc	r25, r25
     654:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     658:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
     65c:	4a e0       	ldi	r20, 0x0A	; 10
     65e:	be 01       	movw	r22, r28
     660:	6f 5f       	subi	r22, 0xFF	; 255
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	08 2e       	mov	r0, r24
     666:	00 0c       	add	r0, r0
     668:	99 0b       	sbc	r25, r25
     66a:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     66e:	ce 01       	movw	r24, r28
     670:	07 96       	adiw	r24, 0x07	; 7
     672:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     676:	83 e2       	ldi	r24, 0x23	; 35
     678:	94 e0       	ldi	r25, 0x04	; 4
     67a:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     67e:	ce 01       	movw	r24, r28
     680:	04 96       	adiw	r24, 0x04	; 4
     682:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     686:	83 e2       	ldi	r24, 0x23	; 35
     688:	94 e0       	ldi	r25, 0x04	; 4
     68a:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     68e:	ce 01       	movw	r24, r28
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	94 e0       	ldi	r25, 0x04	; 4
     69a:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     69e:	84 e1       	ldi	r24, 0x14	; 20
     6a0:	8a 95       	dec	r24
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <lcd_dispRealClock+0x94>
     6a4:	80 ec       	ldi	r24, 0xC0	; 192
     6a6:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     6aa:	84 e1       	ldi	r24, 0x14	; 20
     6ac:	8a 95       	dec	r24
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <lcd_dispRealClock+0xa0>
     6b0:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <year>
     6b4:	4a e0       	ldi	r20, 0x0A	; 10
     6b6:	be 01       	movw	r22, r28
     6b8:	66 5f       	subi	r22, 0xF6	; 246
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	08 2e       	mov	r0, r24
     6be:	00 0c       	add	r0, r0
     6c0:	99 0b       	sbc	r25, r25
     6c2:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     6c6:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <month>
     6ca:	4a e0       	ldi	r20, 0x0A	; 10
     6cc:	be 01       	movw	r22, r28
     6ce:	63 5f       	subi	r22, 0xF3	; 243
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	08 2e       	mov	r0, r24
     6d4:	00 0c       	add	r0, r0
     6d6:	99 0b       	sbc	r25, r25
     6d8:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     6dc:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <date>
     6e0:	4a e0       	ldi	r20, 0x0A	; 10
     6e2:	be 01       	movw	r22, r28
     6e4:	60 5f       	subi	r22, 0xF0	; 240
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
     6e8:	08 2e       	mov	r0, r24
     6ea:	00 0c       	add	r0, r0
     6ec:	99 0b       	sbc	r25, r25
     6ee:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     6f2:	ce 01       	movw	r24, r28
     6f4:	0a 96       	adiw	r24, 0x0a	; 10
     6f6:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     6fa:	8c e0       	ldi	r24, 0x0C	; 12
     6fc:	94 e0       	ldi	r25, 0x04	; 4
     6fe:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     702:	ce 01       	movw	r24, r28
     704:	0d 96       	adiw	r24, 0x0d	; 13
     706:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     70a:	8c e0       	ldi	r24, 0x0C	; 12
     70c:	94 e0       	ldi	r25, 0x04	; 4
     70e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     712:	ce 01       	movw	r24, r28
     714:	40 96       	adiw	r24, 0x10	; 16
     716:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     71a:	8a e0       	ldi	r24, 0x0A	; 10
     71c:	94 e0       	ldi	r25, 0x04	; 4
     71e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     722:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <day>
     726:	8e 2f       	mov	r24, r30
     728:	ee 0f       	add	r30, r30
     72a:	99 0b       	sbc	r25, r25
     72c:	aa 0b       	sbc	r26, r26
     72e:	bb 0b       	sbc	r27, r27
     730:	87 30       	cpi	r24, 0x07	; 7
     732:	91 05       	cpc	r25, r1
     734:	08 f0       	brcs	.+2      	; 0x738 <lcd_dispRealClock+0x12c>
     736:	43 c0       	rjmp	.+134    	; 0x7be <lcd_dispRealClock+0x1b2>
     738:	fc 01       	movw	r30, r24
     73a:	e0 5c       	subi	r30, 0xC0	; 192
     73c:	ff 4f       	sbci	r31, 0xFF	; 255
     73e:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__tablejump2__>
     742:	83 e5       	ldi	r24, 0x53	; 83
     744:	95 e7       	ldi	r25, 0x75	; 117
     746:	ae e6       	ldi	r26, 0x6E	; 110
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	8b 8b       	std	Y+19, r24	; 0x13
     74c:	9c 8b       	std	Y+20, r25	; 0x14
     74e:	ad 8b       	std	Y+21, r26	; 0x15
     750:	be 8b       	std	Y+22, r27	; 0x16
     752:	35 c0       	rjmp	.+106    	; 0x7be <lcd_dispRealClock+0x1b2>
     754:	8d e4       	ldi	r24, 0x4D	; 77
     756:	9f e6       	ldi	r25, 0x6F	; 111
     758:	ae e6       	ldi	r26, 0x6E	; 110
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	8b 8b       	std	Y+19, r24	; 0x13
     75e:	9c 8b       	std	Y+20, r25	; 0x14
     760:	ad 8b       	std	Y+21, r26	; 0x15
     762:	be 8b       	std	Y+22, r27	; 0x16
     764:	2c c0       	rjmp	.+88     	; 0x7be <lcd_dispRealClock+0x1b2>
     766:	84 e5       	ldi	r24, 0x54	; 84
     768:	95 e7       	ldi	r25, 0x75	; 117
     76a:	a5 e6       	ldi	r26, 0x65	; 101
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	8b 8b       	std	Y+19, r24	; 0x13
     770:	9c 8b       	std	Y+20, r25	; 0x14
     772:	ad 8b       	std	Y+21, r26	; 0x15
     774:	be 8b       	std	Y+22, r27	; 0x16
     776:	23 c0       	rjmp	.+70     	; 0x7be <lcd_dispRealClock+0x1b2>
     778:	87 e5       	ldi	r24, 0x57	; 87
     77a:	95 e6       	ldi	r25, 0x65	; 101
     77c:	a4 e6       	ldi	r26, 0x64	; 100
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	8b 8b       	std	Y+19, r24	; 0x13
     782:	9c 8b       	std	Y+20, r25	; 0x14
     784:	ad 8b       	std	Y+21, r26	; 0x15
     786:	be 8b       	std	Y+22, r27	; 0x16
     788:	1a c0       	rjmp	.+52     	; 0x7be <lcd_dispRealClock+0x1b2>
     78a:	84 e5       	ldi	r24, 0x54	; 84
     78c:	98 e6       	ldi	r25, 0x68	; 104
     78e:	a5 e7       	ldi	r26, 0x75	; 117
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	8b 8b       	std	Y+19, r24	; 0x13
     794:	9c 8b       	std	Y+20, r25	; 0x14
     796:	ad 8b       	std	Y+21, r26	; 0x15
     798:	be 8b       	std	Y+22, r27	; 0x16
     79a:	11 c0       	rjmp	.+34     	; 0x7be <lcd_dispRealClock+0x1b2>
     79c:	86 e4       	ldi	r24, 0x46	; 70
     79e:	92 e7       	ldi	r25, 0x72	; 114
     7a0:	a9 e6       	ldi	r26, 0x69	; 105
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	8b 8b       	std	Y+19, r24	; 0x13
     7a6:	9c 8b       	std	Y+20, r25	; 0x14
     7a8:	ad 8b       	std	Y+21, r26	; 0x15
     7aa:	be 8b       	std	Y+22, r27	; 0x16
     7ac:	08 c0       	rjmp	.+16     	; 0x7be <lcd_dispRealClock+0x1b2>
     7ae:	83 e5       	ldi	r24, 0x53	; 83
     7b0:	91 e6       	ldi	r25, 0x61	; 97
     7b2:	a4 e7       	ldi	r26, 0x74	; 116
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	8b 8b       	std	Y+19, r24	; 0x13
     7b8:	9c 8b       	std	Y+20, r25	; 0x14
     7ba:	ad 8b       	std	Y+21, r26	; 0x15
     7bc:	be 8b       	std	Y+22, r27	; 0x16
     7be:	ce 01       	movw	r24, r28
     7c0:	43 96       	adiw	r24, 0x13	; 19
     7c2:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     7c6:	86 e0       	ldi	r24, 0x06	; 6
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     7ce:	84 e1       	ldi	r24, 0x14	; 20
     7d0:	8a 95       	dec	r24
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <lcd_dispRealClock+0x1c4>
     7d4:	6c 96       	adiw	r28, 0x1c	; 28
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <lcd_dispAccumulatedTime>:
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	29 97       	sbiw	r28, 0x09	; 9
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	80 ec       	ldi	r24, 0xC0	; 192
     7fc:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     800:	84 e1       	ldi	r24, 0x14	; 20
     802:	8a 95       	dec	r24
     804:	f1 f7       	brne	.-4      	; 0x802 <lcd_dispAccumulatedTime+0x1c>
     806:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <accumulatedHour>
     80a:	4a e0       	ldi	r20, 0x0A	; 10
     80c:	be 01       	movw	r22, r28
     80e:	69 5f       	subi	r22, 0xF9	; 249
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	08 2e       	mov	r0, r24
     814:	00 0c       	add	r0, r0
     816:	99 0b       	sbc	r25, r25
     818:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     81c:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accumulatedMin>
     820:	4a e0       	ldi	r20, 0x0A	; 10
     822:	be 01       	movw	r22, r28
     824:	6c 5f       	subi	r22, 0xFC	; 252
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	08 2e       	mov	r0, r24
     82a:	00 0c       	add	r0, r0
     82c:	99 0b       	sbc	r25, r25
     82e:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     832:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <accumulatedSec>
     836:	4a e0       	ldi	r20, 0x0A	; 10
     838:	be 01       	movw	r22, r28
     83a:	6f 5f       	subi	r22, 0xFF	; 255
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	08 2e       	mov	r0, r24
     840:	00 0c       	add	r0, r0
     842:	99 0b       	sbc	r25, r25
     844:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
     848:	ce 01       	movw	r24, r28
     84a:	07 96       	adiw	r24, 0x07	; 7
     84c:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     850:	83 e2       	ldi	r24, 0x23	; 35
     852:	94 e0       	ldi	r25, 0x04	; 4
     854:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     858:	ce 01       	movw	r24, r28
     85a:	04 96       	adiw	r24, 0x04	; 4
     85c:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     860:	83 e2       	ldi	r24, 0x23	; 35
     862:	94 e0       	ldi	r25, 0x04	; 4
     864:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     870:	84 e0       	ldi	r24, 0x04	; 4
     872:	94 e0       	ldi	r25, 0x04	; 4
     874:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     878:	84 e1       	ldi	r24, 0x14	; 20
     87a:	8a 95       	dec	r24
     87c:	f1 f7       	brne	.-4      	; 0x87a <lcd_dispAccumulatedTime+0x94>
     87e:	29 96       	adiw	r28, 0x09	; 9
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <lcd_dispProgInfo>:
     890:	80 e8       	ldi	r24, 0x80	; 128
     892:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     896:	24 e1       	ldi	r18, 0x14	; 20
     898:	2a 95       	dec	r18
     89a:	f1 f7       	brne	.-4      	; 0x898 <lcd_dispProgInfo+0x8>
     89c:	8f e3       	ldi	r24, 0x3F	; 63
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8a4:	80 ec       	ldi	r24, 0xC0	; 192
     8a6:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     8aa:	84 e1       	ldi	r24, 0x14	; 20
     8ac:	8a 95       	dec	r24
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <lcd_dispProgInfo+0x1c>
     8b0:	80 e3       	ldi	r24, 0x30	; 48
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8b8:	9f e3       	ldi	r25, 0x3F	; 63
     8ba:	2d e0       	ldi	r18, 0x0D	; 13
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	91 50       	subi	r25, 0x01	; 1
     8c0:	20 40       	sbci	r18, 0x00	; 0
     8c2:	80 40       	sbci	r24, 0x00	; 0
     8c4:	e1 f7       	brne	.-8      	; 0x8be <lcd_dispProgInfo+0x2e>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <lcd_dispProgInfo+0x38>
     8c8:	00 00       	nop
     8ca:	80 ec       	ldi	r24, 0xC0	; 192
     8cc:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     8d0:	94 e1       	ldi	r25, 0x14	; 20
     8d2:	9a 95       	dec	r25
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <lcd_dispProgInfo+0x42>
     8d6:	81 e2       	ldi	r24, 0x21	; 33
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     8de:	2f e7       	ldi	r18, 0x7F	; 127
     8e0:	8a e1       	ldi	r24, 0x1A	; 26
     8e2:	96 e0       	ldi	r25, 0x06	; 6
     8e4:	21 50       	subi	r18, 0x01	; 1
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <lcd_dispProgInfo+0x54>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <lcd_dispProgInfo+0x5e>
     8ee:	00 00       	nop
     8f0:	08 95       	ret

000008f2 <lcd_dispMenu>:
     8f2:	80 e8       	ldi	r24, 0x80	; 128
     8f4:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     8f8:	24 e1       	ldi	r18, 0x14	; 20
     8fa:	2a 95       	dec	r18
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <lcd_dispMenu+0x8>
     8fe:	80 e1       	ldi	r24, 0x10	; 16
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     906:	80 ec       	ldi	r24, 0xC0	; 192
     908:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     90c:	84 e1       	ldi	r24, 0x14	; 20
     90e:	8a 95       	dec	r24
     910:	f1 f7       	brne	.-4      	; 0x90e <__stack+0xf>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     91a:	9f eb       	ldi	r25, 0xBF	; 191
     91c:	27 e2       	ldi	r18, 0x27	; 39
     91e:	89 e0       	ldi	r24, 0x09	; 9
     920:	91 50       	subi	r25, 0x01	; 1
     922:	20 40       	sbci	r18, 0x00	; 0
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	e1 f7       	brne	.-8      	; 0x920 <__stack+0x21>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0x2b>
     92a:	00 00       	nop
     92c:	08 95       	ret

0000092e <lcd_dispWords>:
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	e8 2e       	mov	r14, r24
     93c:	80 e8       	ldi	r24, 0x80	; 128
     93e:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     942:	24 e1       	ldi	r18, 0x14	; 20
     944:	2a 95       	dec	r18
     946:	f1 f7       	brne	.-4      	; 0x944 <lcd_dispWords+0x16>
     948:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <min>
     94c:	93 78       	andi	r25, 0x83	; 131
     94e:	1c f4       	brge	.+6      	; 0x956 <lcd_dispWords+0x28>
     950:	91 50       	subi	r25, 0x01	; 1
     952:	9c 6f       	ori	r25, 0xFC	; 252
     954:	9f 5f       	subi	r25, 0xFF	; 255
     956:	99 23       	and	r25, r25
     958:	ec f0       	brlt	.+58     	; 0x994 <lcd_dispWords+0x66>
     95a:	92 30       	cpi	r25, 0x02	; 2
     95c:	1c f0       	brlt	.+6      	; 0x964 <lcd_dispWords+0x36>
     95e:	94 30       	cpi	r25, 0x04	; 4
     960:	6c f0       	brlt	.+26     	; 0x97c <lcd_dispWords+0x4e>
     962:	18 c0       	rjmp	.+48     	; 0x994 <lcd_dispWords+0x66>
     964:	30 e2       	ldi	r19, 0x20	; 32
     966:	e3 9e       	mul	r14, r19
     968:	c0 01       	movw	r24, r0
     96a:	11 24       	eor	r1, r1
     96c:	ec 01       	movw	r28, r24
     96e:	c2 57       	subi	r28, 0x72	; 114
     970:	dd 4f       	sbci	r29, 0xFD	; 253
     972:	9c 01       	movw	r18, r24
     974:	22 56       	subi	r18, 0x62	; 98
     976:	3d 4f       	sbci	r19, 0xFD	; 253
     978:	79 01       	movw	r14, r18
     97a:	10 c0       	rjmp	.+32     	; 0x99c <lcd_dispWords+0x6e>
     97c:	30 e2       	ldi	r19, 0x20	; 32
     97e:	e3 9e       	mul	r14, r19
     980:	c0 01       	movw	r24, r0
     982:	11 24       	eor	r1, r1
     984:	ec 01       	movw	r28, r24
     986:	c2 5b       	subi	r28, 0xB2	; 178
     988:	de 4f       	sbci	r29, 0xFE	; 254
     98a:	9c 01       	movw	r18, r24
     98c:	22 5a       	subi	r18, 0xA2	; 162
     98e:	3e 4f       	sbci	r19, 0xFE	; 254
     990:	79 01       	movw	r14, r18
     992:	04 c0       	rjmp	.+8      	; 0x99c <lcd_dispWords+0x6e>
     994:	e1 2c       	mov	r14, r1
     996:	f1 2c       	mov	r15, r1
     998:	c0 e0       	ldi	r28, 0x00	; 0
     99a:	d0 e0       	ldi	r29, 0x00	; 0
     99c:	ce 01       	movw	r24, r28
     99e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     9a2:	fe 01       	movw	r30, r28
     9a4:	01 90       	ld	r0, Z+
     9a6:	00 20       	and	r0, r0
     9a8:	e9 f7       	brne	.-6      	; 0x9a4 <lcd_dispWords+0x76>
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	ec 1b       	sub	r30, r28
     9ae:	fd 0b       	sbc	r31, r29
     9b0:	00 e1       	ldi	r16, 0x10	; 16
     9b2:	10 e0       	ldi	r17, 0x00	; 0
     9b4:	0e 1b       	sub	r16, r30
     9b6:	11 09       	sbc	r17, r1
     9b8:	10 16       	cp	r1, r16
     9ba:	11 06       	cpc	r1, r17
     9bc:	54 f4       	brge	.+20     	; 0x9d2 <lcd_dispWords+0xa4>
     9be:	c0 e0       	ldi	r28, 0x00	; 0
     9c0:	80 e2       	ldi	r24, 0x20	; 32
     9c2:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     9c6:	cf 5f       	subi	r28, 0xFF	; 255
     9c8:	2c 2f       	mov	r18, r28
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	20 17       	cp	r18, r16
     9ce:	31 07       	cpc	r19, r17
     9d0:	bc f3       	brlt	.-18     	; 0x9c0 <lcd_dispWords+0x92>
     9d2:	80 ec       	ldi	r24, 0xC0	; 192
     9d4:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     9d8:	34 e1       	ldi	r19, 0x14	; 20
     9da:	3a 95       	dec	r19
     9dc:	f1 f7       	brne	.-4      	; 0x9da <lcd_dispWords+0xac>
     9de:	c7 01       	movw	r24, r14
     9e0:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
     9e4:	f7 01       	movw	r30, r14
     9e6:	01 90       	ld	r0, Z+
     9e8:	00 20       	and	r0, r0
     9ea:	e9 f7       	brne	.-6      	; 0x9e6 <lcd_dispWords+0xb8>
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	ee 19       	sub	r30, r14
     9f0:	ff 09       	sbc	r31, r15
     9f2:	00 e1       	ldi	r16, 0x10	; 16
     9f4:	10 e0       	ldi	r17, 0x00	; 0
     9f6:	0e 1b       	sub	r16, r30
     9f8:	11 09       	sbc	r17, r1
     9fa:	10 16       	cp	r1, r16
     9fc:	11 06       	cpc	r1, r17
     9fe:	54 f4       	brge	.+20     	; 0xa14 <lcd_dispWords+0xe6>
     a00:	c0 e0       	ldi	r28, 0x00	; 0
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     a08:	cf 5f       	subi	r28, 0xFF	; 255
     a0a:	8c 2f       	mov	r24, r28
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	80 17       	cp	r24, r16
     a10:	91 07       	cpc	r25, r17
     a12:	bc f3       	brlt	.-18     	; 0xa02 <lcd_dispWords+0xd4>
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <DS1307_GetTime>:
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	ec 01       	movw	r28, r24
     a30:	7b 01       	movw	r14, r22
     a32:	8a 01       	movw	r16, r20
     a34:	62 e0       	ldi	r22, 0x02	; 2
     a36:	80 ed       	ldi	r24, 0xD0	; 208
     a38:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     a3c:	88 83       	st	Y, r24
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	80 ed       	ldi	r24, 0xD0	; 208
     a42:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     a46:	f7 01       	movw	r30, r14
     a48:	80 83       	st	Z, r24
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	80 ed       	ldi	r24, 0xD0	; 208
     a4e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     a52:	f8 01       	movw	r30, r16
     a54:	80 83       	st	Z, r24
     a56:	98 81       	ld	r25, Y
     a58:	96 ff       	sbrs	r25, 6
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <DS1307_GetTime+0x40>
     a5c:	9f 71       	andi	r25, 0x1F	; 31
     a5e:	98 83       	st	Y, r25
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <DS1307_GetTime+0x44>
     a62:	9f 73       	andi	r25, 0x3F	; 63
     a64:	98 83       	st	Y, r25
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	08 95       	ret

00000a74 <DS1307_GetDate>:
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	7c 01       	movw	r14, r24
     a82:	8b 01       	movw	r16, r22
     a84:	ea 01       	movw	r28, r20
     a86:	65 e0       	ldi	r22, 0x05	; 5
     a88:	80 ed       	ldi	r24, 0xD0	; 208
     a8a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     a8e:	f7 01       	movw	r30, r14
     a90:	80 83       	st	Z, r24
     a92:	64 e0       	ldi	r22, 0x04	; 4
     a94:	80 ed       	ldi	r24, 0xD0	; 208
     a96:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     a9a:	f8 01       	movw	r30, r16
     a9c:	80 83       	st	Z, r24
     a9e:	66 e0       	ldi	r22, 0x06	; 6
     aa0:	80 ed       	ldi	r24, 0xD0	; 208
     aa2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     aa6:	88 83       	st	Y, r24
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	08 95       	ret

00000ab6 <DS1307_GetWkDay>:
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	ec 01       	movw	r28, r24
     abc:	63 e0       	ldi	r22, 0x03	; 3
     abe:	80 ed       	ldi	r24, 0xD0	; 208
     ac0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadRegister>
     ac4:	88 83       	st	Y, r24
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <LCD_BCDDigits>:
     acc:	cf 93       	push	r28
     ace:	c8 2f       	mov	r28, r24
     ad0:	82 95       	swap	r24
     ad2:	8f 70       	andi	r24, 0x0F	; 15
     ad4:	80 5d       	subi	r24, 0xD0	; 208
     ad6:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     ada:	8c 2f       	mov	r24, r28
     adc:	8f 70       	andi	r24, 0x0F	; 15
     ade:	80 5d       	subi	r24, 0xD0	; 208
     ae0:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <WriteDate>:
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	00 d0       	rcall	.+0      	; 0xaee <WriteDate+0x6>
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <WriteDate+0x8>
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	ae 01       	movw	r20, r28
     af6:	4d 5f       	subi	r20, 0xFD	; 253
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	be 01       	movw	r22, r28
     afc:	6e 5f       	subi	r22, 0xFE	; 254
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 3a 05 	call	0xa74	; 0xa74 <DS1307_GetDate>
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_BCDDigits>
     b0e:	8f e2       	ldi	r24, 0x2F	; 47
     b10:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b14:	8a 81       	ldd	r24, Y+2	; 0x02
     b16:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_BCDDigits>
     b1a:	8f e2       	ldi	r24, 0x2F	; 47
     b1c:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_BCDDigits>
     b26:	80 e2       	ldi	r24, 0x20	; 32
     b28:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b2c:	ce 01       	movw	r24, r28
     b2e:	04 96       	adiw	r24, 0x04	; 4
     b30:	0e 94 5b 05 	call	0xab6	; 0xab6 <DS1307_GetWkDay>
     b34:	8c 81       	ldd	r24, Y+4	; 0x04
     b36:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_BCDDigits>
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <WriteTime>:
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <WriteTime+0x6>
     b4e:	1f 92       	push	r1
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	ae 01       	movw	r20, r28
     b56:	4d 5f       	subi	r20, 0xFD	; 253
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	be 01       	movw	r22, r28
     b5c:	6e 5f       	subi	r22, 0xFE	; 254
     b5e:	7f 4f       	sbci	r23, 0xFF	; 255
     b60:	ce 01       	movw	r24, r28
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	0e 94 11 05 	call	0xa22	; 0xa22 <DS1307_GetTime>
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_BCDDigits>
     b6e:	8a e3       	ldi	r24, 0x3A	; 58
     b70:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_BCDDigits>
     b7a:	8a e3       	ldi	r24, 0x3A	; 58
     b7c:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_BCDDigits>
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <LCD_blankChar>:
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	88 23       	and	r24, r24
     b98:	41 f0       	breq	.+16     	; 0xbaa <LCD_blankChar+0x18>
     b9a:	d8 2f       	mov	r29, r24
     b9c:	c0 e0       	ldi	r28, 0x00	; 0
     b9e:	80 e2       	ldi	r24, 0x20	; 32
     ba0:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     ba4:	cf 5f       	subi	r28, 0xFF	; 255
     ba6:	cd 13       	cpse	r28, r29
     ba8:	fa cf       	rjmp	.-12     	; 0xb9e <LCD_blankChar+0xc>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <LCD_TimeDate>:
     bb0:	80 e8       	ldi	r24, 0x80	; 128
     bb2:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     bb6:	0e 94 a4 05 	call	0xb48	; 0xb48 <WriteTime>
     bba:	88 e0       	ldi	r24, 0x08	; 8
     bbc:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_blankChar>
     bc0:	80 ec       	ldi	r24, 0xC0	; 192
     bc2:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
     bc6:	0e 94 74 05 	call	0xae8	; 0xae8 <WriteDate>
     bca:	88 e0       	ldi	r24, 0x08	; 8
     bcc:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_blankChar>
     bd0:	08 95       	ret

00000bd2 <LCD_TimeDateTempHumid>:
}//LCD_TimeDate

void LCD_TimeDateTempHumid()
{
	//LCD_Line(0);
	getDHT();
     bd2:	0e 94 66 00 	call	0xcc	; 0xcc <getDHT>
	//_delay_ms(1000);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     bd6:	80 e8       	ldi	r24, 0x80	; 128
     bd8:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	WriteTime();
     bdc:	0e 94 a4 05 	call	0xb48	; 0xb48 <WriteTime>
	LCD_blankChar(1);
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strTemp);
     be6:	84 e8       	ldi	r24, 0x84	; 132
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
	//LCD_blankChar(1);
	lcd_write_character_4d('C');
     bee:	83 e4       	ldi	r24, 0x43	; 67
     bf0:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>

	//LCD_Line(1);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     bf4:	80 ec       	ldi	r24, 0xC0	; 192
     bf6:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	WriteDate();
     bfa:	0e 94 74 05 	call	0xae8	; 0xae8 <WriteDate>
	LCD_blankChar(2);
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	0e 94 c9 05 	call	0xb92	; 0xb92 <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strHumid);
     c04:	81 e8       	ldi	r24, 0x81	; 129
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
	//LCD_blankChar(1);
	//lcd_write_character_4d('%');
	lcd_write_character_4d(37);
     c0c:	85 e2       	ldi	r24, 0x25	; 37
     c0e:	0e 94 48 02 	call	0x490	; 0x490 <lcd_write_character_4d>
     c12:	08 95       	ret

00000c14 <calcDay>:
    calcDay();
}//parseCompileTime

void calcDay()
{
    day = (date - 17)%7;
     c14:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <date>
     c18:	08 2e       	mov	r0, r24
     c1a:	00 0c       	add	r0, r0
     c1c:	99 0b       	sbc	r25, r25
     c1e:	41 97       	sbiw	r24, 0x11	; 17
     c20:	67 e0       	ldi	r22, 0x07	; 7
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__divmodhi4>
     c28:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <day>
     c2c:	08 95       	ret

00000c2e <parseCompileTime>:
extern uint8_t year, month, date;
extern uint8_t monthEndDate, day;
*/

void parseCompileTime()
{
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	e4 97       	sbiw	r28, 0x34	; 52
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
    char sTime[4][3];
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
     c44:	63 e2       	ldi	r22, 0x23	; 35
     c46:	74 e0       	ldi	r23, 0x04	; 4
     c48:	85 e2       	ldi	r24, 0x25	; 37
     c4a:	94 e0       	ldi	r25, 0x04	; 4
     c4c:	0e 94 48 0a 	call	0x1490	; 0x1490 <strtok>
     c50:	bc 01       	movw	r22, r24
    while (*p)
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	e9 f0       	breq	.+58     	; 0xc94 <parseCompileTime+0x66>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sTime[n++], p);
     c5c:	11 e0       	ldi	r17, 0x01	; 1
     c5e:	12 0f       	add	r17, r18
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	c9 01       	movw	r24, r18
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	82 0f       	add	r24, r18
     c6a:	93 1f       	adc	r25, r19
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	2c 0f       	add	r18, r28
     c72:	3d 1f       	adc	r19, r29
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcpy>
        p=strtok(NULL, ":");
     c7c:	63 e2       	ldi	r22, 0x23	; 35
     c7e:	74 e0       	ldi	r23, 0x04	; 4
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 48 0a 	call	0x1490	; 0x1490 <strtok>
     c88:	bc 01       	movw	r22, r24
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
    {
        strcpy((char *)&sTime[n++], p);
     c8a:	21 2f       	mov	r18, r17
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
     c8c:	fc 01       	movw	r30, r24
     c8e:	80 81       	ld	r24, Z
     c90:	81 11       	cpse	r24, r1
     c92:	e4 cf       	rjmp	.-56     	; 0xc5c <parseCompileTime+0x2e>
    {
        strcpy((char *)&sTime[n++], p);
        p=strtok(NULL, ":");
    }
    hour=atoi(sTime[0]);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	0e 94 2a 0a 	call	0x1454	; 0x1454 <atoi>
     c9c:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <hour>
    min=atoi(sTime[1]);
     ca0:	ce 01       	movw	r24, r28
     ca2:	04 96       	adiw	r24, 0x04	; 4
     ca4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <atoi>
     ca8:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <min>
    //give some delay (8 seconds), to compile & upload by human click
    //sec=atoi(sTime[2]) + 8;

    //if you change power source to battery,
    //  you'd better put more time allowance
    sec=atoi(sTime[2]) + 15;
     cac:	ce 01       	movw	r24, r28
     cae:	07 96       	adiw	r24, 0x07	; 7
     cb0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <atoi>
     cb4:	81 5f       	subi	r24, 0xF1	; 241
     cb6:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <sec>
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
     cba:	6a e0       	ldi	r22, 0x0A	; 10
     cbc:	74 e0       	ldi	r23, 0x04	; 4
     cbe:	84 ef       	ldi	r24, 0xF4	; 244
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	0e 94 48 0a 	call	0x1490	; 0x1490 <strtok>
     cc6:	bc 01       	movw	r22, r24
    while (*p)
     cc8:	fc 01       	movw	r30, r24
     cca:	80 81       	ld	r24, Z
     ccc:	88 23       	and	r24, r24
     cce:	19 f1       	breq	.+70     	; 0xd16 <parseCompileTime+0xe8>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sDate[n++], p);
     cd2:	11 e0       	ldi	r17, 0x01	; 1
     cd4:	12 0f       	add	r17, r18
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	c9 01       	movw	r24, r18
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	2d e0       	ldi	r18, 0x0D	; 13
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	2c 0f       	add	r18, r28
     cf4:	3d 1f       	adc	r19, r29
     cf6:	82 0f       	add	r24, r18
     cf8:	93 1f       	adc	r25, r19
     cfa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <strcpy>
        p=strtok(NULL, " ");
     cfe:	6a e0       	ldi	r22, 0x0A	; 10
     d00:	74 e0       	ldi	r23, 0x04	; 4
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 48 0a 	call	0x1490	; 0x1490 <strtok>
     d0a:	bc 01       	movw	r22, r24

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    {
        strcpy((char *)&sDate[n++], p);
     d0c:	21 2f       	mov	r18, r17
    sec=atoi(sTime[2]) + 15;
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
     d0e:	fc 01       	movw	r30, r24
     d10:	80 81       	ld	r24, Z
     d12:	81 11       	cpse	r24, r1
     d14:	de cf       	rjmp	.-68     	; 0xcd2 <parseCompileTime+0xa4>
    {
        strcpy((char *)&sDate[n++], p);
        p=strtok(NULL, " ");
    }

    if ( strcmp(sDate[0], "Jan") == 0 )
     d16:	6e e2       	ldi	r22, 0x2E	; 46
     d18:	74 e0       	ldi	r23, 0x04	; 4
     d1a:	ce 01       	movw	r24, r28
     d1c:	0d 96       	adiw	r24, 0x0d	; 13
     d1e:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     d22:	89 2b       	or	r24, r25
     d24:	21 f4       	brne	.+8      	; 0xd2e <parseCompileTime+0x100>
        month = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     d2c:	83 c0       	rjmp	.+262    	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Feb") == 0 )
     d2e:	62 e3       	ldi	r22, 0x32	; 50
     d30:	74 e0       	ldi	r23, 0x04	; 4
     d32:	ce 01       	movw	r24, r28
     d34:	0d 96       	adiw	r24, 0x0d	; 13
     d36:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     d3a:	89 2b       	or	r24, r25
     d3c:	21 f4       	brne	.+8      	; 0xd46 <parseCompileTime+0x118>
        month = 2;
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     d44:	77 c0       	rjmp	.+238    	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Mar") == 0 )
     d46:	66 e3       	ldi	r22, 0x36	; 54
     d48:	74 e0       	ldi	r23, 0x04	; 4
     d4a:	ce 01       	movw	r24, r28
     d4c:	0d 96       	adiw	r24, 0x0d	; 13
     d4e:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     d52:	89 2b       	or	r24, r25
     d54:	21 f4       	brne	.+8      	; 0xd5e <parseCompileTime+0x130>
        month = 3;
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     d5c:	6b c0       	rjmp	.+214    	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Apr") == 0 )
     d5e:	6a e3       	ldi	r22, 0x3A	; 58
     d60:	74 e0       	ldi	r23, 0x04	; 4
     d62:	ce 01       	movw	r24, r28
     d64:	0d 96       	adiw	r24, 0x0d	; 13
     d66:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     d6a:	89 2b       	or	r24, r25
     d6c:	21 f4       	brne	.+8      	; 0xd76 <parseCompileTime+0x148>
        month = 4;
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "May") == 0 )
     d76:	6e e3       	ldi	r22, 0x3E	; 62
     d78:	74 e0       	ldi	r23, 0x04	; 4
     d7a:	ce 01       	movw	r24, r28
     d7c:	0d 96       	adiw	r24, 0x0d	; 13
     d7e:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     d82:	89 2b       	or	r24, r25
     d84:	21 f4       	brne	.+8      	; 0xd8e <parseCompileTime+0x160>
        month = 5;
     d86:	85 e0       	ldi	r24, 0x05	; 5
     d88:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     d8c:	53 c0       	rjmp	.+166    	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jun") == 0 )
     d8e:	62 e4       	ldi	r22, 0x42	; 66
     d90:	74 e0       	ldi	r23, 0x04	; 4
     d92:	ce 01       	movw	r24, r28
     d94:	0d 96       	adiw	r24, 0x0d	; 13
     d96:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     d9a:	89 2b       	or	r24, r25
     d9c:	21 f4       	brne	.+8      	; 0xda6 <parseCompileTime+0x178>
        month = 6;
     d9e:	86 e0       	ldi	r24, 0x06	; 6
     da0:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     da4:	47 c0       	rjmp	.+142    	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jul") == 0 )
     da6:	66 e4       	ldi	r22, 0x46	; 70
     da8:	74 e0       	ldi	r23, 0x04	; 4
     daa:	ce 01       	movw	r24, r28
     dac:	0d 96       	adiw	r24, 0x0d	; 13
     dae:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     db2:	89 2b       	or	r24, r25
     db4:	21 f4       	brne	.+8      	; 0xdbe <parseCompileTime+0x190>
        month = 7;
     db6:	87 e0       	ldi	r24, 0x07	; 7
     db8:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     dbc:	3b c0       	rjmp	.+118    	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Aug") == 0 )
     dbe:	6a e4       	ldi	r22, 0x4A	; 74
     dc0:	74 e0       	ldi	r23, 0x04	; 4
     dc2:	ce 01       	movw	r24, r28
     dc4:	0d 96       	adiw	r24, 0x0d	; 13
     dc6:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     dca:	89 2b       	or	r24, r25
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <parseCompileTime+0x1a8>
        month = 8;
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     dd4:	2f c0       	rjmp	.+94     	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Sep") == 0 )
     dd6:	6e e4       	ldi	r22, 0x4E	; 78
     dd8:	74 e0       	ldi	r23, 0x04	; 4
     dda:	ce 01       	movw	r24, r28
     ddc:	0d 96       	adiw	r24, 0x0d	; 13
     dde:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     de2:	89 2b       	or	r24, r25
     de4:	21 f4       	brne	.+8      	; 0xdee <parseCompileTime+0x1c0>
        month = 9;
     de6:	89 e0       	ldi	r24, 0x09	; 9
     de8:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     dec:	23 c0       	rjmp	.+70     	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Oct") == 0 )
     dee:	62 e5       	ldi	r22, 0x52	; 82
     df0:	74 e0       	ldi	r23, 0x04	; 4
     df2:	ce 01       	movw	r24, r28
     df4:	0d 96       	adiw	r24, 0x0d	; 13
     df6:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     dfa:	89 2b       	or	r24, r25
     dfc:	21 f4       	brne	.+8      	; 0xe06 <parseCompileTime+0x1d8>
        month = 10;
     dfe:	8a e0       	ldi	r24, 0x0A	; 10
     e00:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     e04:	17 c0       	rjmp	.+46     	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Nov") == 0 )
     e06:	66 e5       	ldi	r22, 0x56	; 86
     e08:	74 e0       	ldi	r23, 0x04	; 4
     e0a:	ce 01       	movw	r24, r28
     e0c:	0d 96       	adiw	r24, 0x0d	; 13
     e0e:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     e12:	89 2b       	or	r24, r25
     e14:	21 f4       	brne	.+8      	; 0xe1e <parseCompileTime+0x1f0>
        month = 11;
     e16:	8b e0       	ldi	r24, 0x0B	; 11
     e18:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>
     e1c:	0b c0       	rjmp	.+22     	; 0xe34 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Dec") == 0 )
     e1e:	6a e5       	ldi	r22, 0x5A	; 90
     e20:	74 e0       	ldi	r23, 0x04	; 4
     e22:	ce 01       	movw	r24, r28
     e24:	0d 96       	adiw	r24, 0x0d	; 13
     e26:	0e 94 4d 0a 	call	0x149a	; 0x149a <strcmp>
     e2a:	89 2b       	or	r24, r25
     e2c:	19 f4       	brne	.+6      	; 0xe34 <parseCompileTime+0x206>
        month = 12;
     e2e:	8c e0       	ldi	r24, 0x0C	; 12
     e30:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <month>

    date=atoi(sDate[1]);
     e34:	ce 01       	movw	r24, r28
     e36:	47 96       	adiw	r24, 0x17	; 23
     e38:	0e 94 2a 0a 	call	0x1454	; 0x1454 <atoi>
     e3c:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <date>
    yearLong=atoi(sDate[2]);
     e40:	ce 01       	movw	r24, r28
     e42:	81 96       	adiw	r24, 0x21	; 33
     e44:	0e 94 2a 0a 	call	0x1454	; 0x1454 <atoi>
     e48:	ac 01       	movw	r20, r24
    year=yearLong%1000;
     e4a:	9c 01       	movw	r18, r24
     e4c:	36 95       	lsr	r19
     e4e:	27 95       	ror	r18
     e50:	36 95       	lsr	r19
     e52:	27 95       	ror	r18
     e54:	36 95       	lsr	r19
     e56:	27 95       	ror	r18
     e58:	a5 ec       	ldi	r26, 0xC5	; 197
     e5a:	b0 e2       	ldi	r27, 0x20	; 32
     e5c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__umulhisi3>
     e60:	92 95       	swap	r25
     e62:	82 95       	swap	r24
     e64:	8f 70       	andi	r24, 0x0F	; 15
     e66:	89 27       	eor	r24, r25
     e68:	9f 70       	andi	r25, 0x0F	; 15
     e6a:	89 27       	eor	r24, r25
     e6c:	68 ee       	ldi	r22, 0xE8	; 232
     e6e:	73 e0       	ldi	r23, 0x03	; 3
     e70:	86 9f       	mul	r24, r22
     e72:	90 01       	movw	r18, r0
     e74:	87 9f       	mul	r24, r23
     e76:	30 0d       	add	r19, r0
     e78:	96 9f       	mul	r25, r22
     e7a:	30 0d       	add	r19, r0
     e7c:	11 24       	eor	r1, r1
     e7e:	42 1b       	sub	r20, r18
     e80:	53 0b       	sbc	r21, r19
     e82:	40 93 7a 04 	sts	0x047A, r20	; 0x80047a <year>

    calcDay();
     e86:	0e 94 0a 06 	call	0xc14	; 0xc14 <calcDay>
}//parseCompileTime
     e8a:	e4 96       	adiw	r28, 0x34	; 52
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	08 95       	ret

00000e9e <tinudht_read>:
#define TINUDHT_RCV_DELAY 10
#define TINUDHT_RCV_LENGTH 2

// ----------------------------------------------------------------------------

uint8_t tinudht_read(TinuDHT *ptinudht, uint8_t dht_pin) {
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	00 d0       	rcall	.+0      	; 0xeac <tinudht_read+0xe>
     eac:	00 d0       	rcall	.+0      	; 0xeae <tinudht_read+0x10>
     eae:	1f 92       	push	r1
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	7c 01       	movw	r14, r24
	
	// Buffer to received data
	uint8_t data[5];
	// Empty the buffer
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     eb6:	1d 82       	std	Y+5, r1	; 0x05
     eb8:	1c 82       	std	Y+4, r1	; 0x04
     eba:	1b 82       	std	Y+3, r1	; 0x03
     ebc:	1a 82       	std	Y+2, r1	; 0x02
     ebe:	19 82       	std	Y+1, r1	; 0x01
//	for (uint8_t i=0; i< 5; i++) data[i] = 0;	// Another way to empty the data buffer.

	// Send request
	DDRB |= (1 << dht_pin);	// Set port as output
     ec0:	84 b1       	in	r24, 0x04	; 4
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	06 2e       	mov	r0, r22
     ec8:	02 c0       	rjmp	.+4      	; 0xece <tinudht_read+0x30>
     eca:	44 0f       	add	r20, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <tinudht_read+0x2c>
     ed2:	84 2b       	or	r24, r20
     ed4:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << dht_pin);	// Set to 0
     ed6:	95 b1       	in	r25, 0x05	; 5
     ed8:	24 2f       	mov	r18, r20
     eda:	20 95       	com	r18
     edc:	92 23       	and	r25, r18
     ede:	95 b9       	out	0x05, r25	; 5
     ee0:	83 e9       	ldi	r24, 0x93	; 147
     ee2:	91 e1       	ldi	r25, 0x11	; 17
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <tinudht_read+0x46>
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <tinudht_read+0x4c>
     eea:	00 00       	nop
	_delay_ms(18);	// Wait 18 ms
	PORTB |= (1 << dht_pin);	// Set to 1
     eec:	95 b1       	in	r25, 0x05	; 5
     eee:	94 2b       	or	r25, r20
     ef0:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ef2:	9d e0       	ldi	r25, 0x0D	; 13
     ef4:	9a 95       	dec	r25
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <tinudht_read+0x56>
     ef8:	00 00       	nop
	_delay_us(40);	// Wait 40 us

	// Receive response
	DDRB &= ~(1 << dht_pin);	// Set port as input
     efa:	84 b1       	in	r24, 0x04	; 4
     efc:	82 23       	and	r24, r18
     efe:	84 b9       	out	0x04, r24	; 4

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <tinudht_read+0x6c>
     f04:	81 50       	subi	r24, 0x01	; 1
		if (timeout-- == 0)
     f06:	09 f4       	brne	.+2      	; 0xf0a <tinudht_read+0x6c>
     f08:	5a c0       	rjmp	.+180    	; 0xfbe <tinudht_read+0x120>

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
     f0a:	23 b1       	in	r18, 0x03	; 3
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	24 23       	and	r18, r20
     f10:	35 23       	and	r19, r21
     f12:	23 2b       	or	r18, r19
     f14:	b9 f3       	breq	.-18     	; 0xf04 <tinudht_read+0x66>
     f16:	5d c0       	rjmp	.+186    	; 0xfd2 <tinudht_read+0x134>
     f18:	21 50       	subi	r18, 0x01	; 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
     f1a:	11 f4       	brne	.+4      	; 0xf20 <tinudht_read+0x82>
     f1c:	52 c0       	rjmp	.+164    	; 0xfc2 <tinudht_read+0x124>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
     f1e:	2f ef       	ldi	r18, 0xFF	; 255
     f20:	83 b1       	in	r24, 0x03	; 3
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	84 23       	and	r24, r20
     f26:	95 23       	and	r25, r21
     f28:	89 2b       	or	r24, r25
     f2a:	b1 f7       	brne	.-20     	; 0xf18 <tinudht_read+0x7a>
     f2c:	88 e2       	ldi	r24, 0x28	; 40
     f2e:	10 e0       	ldi	r17, 0x00	; 0
     f30:	a7 e0       	ldi	r26, 0x07	; 7
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <tinudht_read+0x9c>
     f34:	91 50       	subi	r25, 0x01	; 1
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
     f36:	31 f4       	brne	.+12     	; 0xf44 <tinudht_read+0xa6>
     f38:	46 c0       	rjmp	.+140    	; 0xfc6 <tinudht_read+0x128>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	70 e0       	ldi	r23, 0x00	; 0
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
     f40:	07 e0       	ldi	r16, 0x07	; 7
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
     f42:	9b 2f       	mov	r25, r27
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
     f44:	23 b1       	in	r18, 0x03	; 3
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	24 23       	and	r18, r20
     f4a:	35 23       	and	r19, r21
     f4c:	23 2b       	or	r18, r19
     f4e:	91 f3       	breq	.-28     	; 0xf34 <tinudht_read+0x96>
     f50:	9b 2f       	mov	r25, r27
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <tinudht_read+0xc2>
     f54:	e3 e0       	ldi	r30, 0x03	; 3
     f56:	ea 95       	dec	r30
     f58:	f1 f7       	brne	.-4      	; 0xf56 <tinudht_read+0xb8>
     f5a:	00 00       	nop

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
     f5c:	9f 5f       	subi	r25, 0xFF	; 255
     f5e:	a9 f1       	breq	.+106    	; 0xfca <tinudht_read+0x12c>
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
     f60:	23 b1       	in	r18, 0x03	; 3
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	24 23       	and	r18, r20
     f66:	35 23       	and	r19, r21
     f68:	23 2b       	or	r18, r19
     f6a:	a1 f7       	brne	.-24     	; 0xf54 <tinudht_read+0xb6>
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
     f6c:	92 30       	cpi	r25, 0x02	; 2
     f6e:	80 f0       	brcs	.+32     	; 0xf90 <tinudht_read+0xf2>
     f70:	e1 e0       	ldi	r30, 0x01	; 1
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	ec 0f       	add	r30, r28
     f76:	fd 1f       	adc	r31, r29
     f78:	e1 0f       	add	r30, r17
     f7a:	f1 1d       	adc	r31, r1
     f7c:	90 81       	ld	r25, Z
     f7e:	9b 01       	movw	r18, r22
     f80:	0a 2e       	mov	r0, r26
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <tinudht_read+0xea>
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <tinudht_read+0xe6>
     f8c:	29 2b       	or	r18, r25
     f8e:	20 83       	st	Z, r18
		// delay =  9..29us, len = 2
		
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
     f90:	a1 11       	cpse	r26, r1
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <tinudht_read+0xfc>
		{
			bit_index = 7;	// restart at MSB
			byte_index++;	// next byte!
     f94:	1f 5f       	subi	r17, 0xFF	; 255
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
     f96:	a0 2f       	mov	r26, r16
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <tinudht_read+0xfe>
			byte_index++;	// next byte!
		}
		else bit_index--;
     f9a:	a1 50       	subi	r26, 0x01	; 1
     f9c:	81 50       	subi	r24, 0x01	; 1
			return TINUDHT_ERROR_TIMEOUT;

	uint8_t bit_index = 7;
	uint8_t byte_index = 0;
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
     f9e:	89 f6       	brne	.-94     	; 0xf42 <tinudht_read+0xa4>
	// DEBUGGING_STRING("DT:");
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
     fa0:	49 81       	ldd	r20, Y+1	; 0x01
     fa2:	2b 81       	ldd	r18, Y+3	; 0x03
     fa4:	92 2f       	mov	r25, r18
     fa6:	94 0f       	add	r25, r20
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
     fa8:	3d 81       	ldd	r19, Y+5	; 0x05
     faa:	39 13       	cpse	r19, r25
     fac:	10 c0       	rjmp	.+32     	; 0xfce <tinudht_read+0x130>
	// DEBUGGING_NUMDECP(data[4]);
	// DEBUGGING_NUMDECP(checksum);
	// DEBUGGING_STRING("\n\r");

	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	f7 01       	movw	r30, r14
     fb2:	51 83       	std	Z+1, r21	; 0x01
     fb4:	40 83       	st	Z, r20
	ptinudht->temperature = data[2]; 
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	33 83       	std	Z+3, r19	; 0x03
     fba:	22 83       	std	Z+2, r18	; 0x02

	return TINUDHT_OK;
     fbc:	17 c0       	rjmp	.+46     	; 0xfec <tinudht_read+0x14e>

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
     fbe:	8e ef       	ldi	r24, 0xFE	; 254
     fc0:	15 c0       	rjmp	.+42     	; 0xfec <tinudht_read+0x14e>
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
     fc2:	8e ef       	ldi	r24, 0xFE	; 254
     fc4:	13 c0       	rjmp	.+38     	; 0xfec <tinudht_read+0x14e>
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;
     fc6:	8e ef       	ldi	r24, 0xFE	; 254
     fc8:	11 c0       	rjmp	.+34     	; 0xfec <tinudht_read+0x14e>
		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
     fca:	8e ef       	ldi	r24, 0xFE	; 254
     fcc:	0f c0       	rjmp	.+30     	; 0xfec <tinudht_read+0x14e>
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	0d c0       	rjmp	.+26     	; 0xfec <tinudht_read+0x14e>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
     fd2:	83 b1       	in	r24, 0x03	; 3
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <tinudht_read+0x13e>
     fd8:	95 95       	asr	r25
     fda:	87 95       	ror	r24
     fdc:	6a 95       	dec	r22
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <tinudht_read+0x13a>
     fe0:	80 fd       	sbrc	r24, 0
     fe2:	9d cf       	rjmp	.-198    	; 0xf1e <tinudht_read+0x80>
     fe4:	88 e2       	ldi	r24, 0x28	; 40
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	a7 e0       	ldi	r26, 0x07	; 7
     fea:	a7 cf       	rjmp	.-178    	; 0xf3a <tinudht_read+0x9c>
	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
	ptinudht->temperature = data[2]; 

	return TINUDHT_OK;
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	08 95       	ret

00001004 <makePDasOutput>:
//by calling makePDasInput(). (added by Insoo: Jul 12, 2017)
void makePDasOutput()
{
	// configure the microprocessor pins for the data lines
	// 4 data lines - output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
    1004:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
    1006:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
    1008:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
    100a:	54 9a       	sbi	0x0a, 4	; 10

	// LCD backlight cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
    100c:	20 9a       	sbi	0x04, 0	; 4

	// LCD VSS pin (Power Supply) - Output
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
    100e:	26 9a       	sbi	0x04, 6	; 4
	//turn on LCD power
	lcd_VDD_port |= _BV(lcd_VDD_bit);
    1010:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1012:	83 ec       	ldi	r24, 0xC3	; 195
    1014:	99 e0       	ldi	r25, 0x09	; 9
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <makePDasOutput+0x12>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <makePDasOutput+0x18>
    101c:	00 00       	nop
	_delay_ms(10);

	// DS1307 Vcc pin (Power Supply) - output
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
    101e:	27 9a       	sbi	0x04, 7	; 4
	//turn on DS1307 power
	DS1307_VCC_port |= _BV(DS1307_VCC_bit);
    1020:	2f 9a       	sbi	0x05, 7	; 5
    1022:	83 ec       	ldi	r24, 0xC3	; 195
    1024:	99 e0       	ldi	r25, 0x09	; 9
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <makePDasOutput+0x22>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <makePDasOutput+0x28>
    102c:	00 00       	nop
	_delay_ms(10);

	// DHT11 (temp & humid sensor) VCC pin (Power Supply) - Output
	//added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
    102e:	22 98       	cbi	0x04, 2	; 4
	//turn on DHT11 chip power
	DHT_VCC_port |= _BV(DHT_VCC_bit);
    1030:	2a 9a       	sbi	0x05, 2	; 5
	//Tactile switch - Input
	//tactile_Switch_ddr |= _BV(tactile_Switch_bit);

	// configure the microprocessor pins for the control lines
	// E line - output
	lcd_E_ddr |= _BV(lcd_E_bit);
    1032:	53 9a       	sbi	0x0a, 3	; 10
	// RS line - output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
    1034:	52 9a       	sbi	0x0a, 2	; 10
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
    1036:	5a 98       	cbi	0x0b, 2	; 11
    1038:	08 95       	ret

0000103a <makePDasInput>:
// Deep Power Save method in circuit
void makePDasInput()
{

	// turn off four data lines
	lcd_D7_port &= ~_BV(lcd_D7_bit);
    103a:	5f 98       	cbi	0x0b, 7	; 11
	lcd_D6_port &= ~_BV(lcd_D6_bit);
    103c:	5e 98       	cbi	0x0b, 6	; 11
	lcd_D5_port &= ~_BV(lcd_D5_bit);
    103e:	5d 98       	cbi	0x0b, 5	; 11
	lcd_D4_port &= ~_BV(lcd_D4_bit);
    1040:	5c 98       	cbi	0x0b, 4	; 11
	// configure the microprocessor pins for the data lines
	// 4 data lines - output, but make it input
	lcd_D7_ddr &= ~_BV(lcd_D7_bit);
    1042:	57 98       	cbi	0x0a, 7	; 10
	lcd_D6_ddr &= ~_BV(lcd_D6_bit);
    1044:	56 98       	cbi	0x0a, 6	; 10
	lcd_D5_ddr &= ~_BV(lcd_D5_bit);
    1046:	55 98       	cbi	0x0a, 5	; 10
	lcd_D4_ddr &= ~_BV(lcd_D4_bit);
    1048:	54 98       	cbi	0x0a, 4	; 10

	// turn off backlight cathode(GND)
	lcd_Backlight_port = _BV(lcd_Backlight_bit);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	85 b9       	out	0x05, r24	; 5
	// LCD backlight cathode pin (K) - output, but make it input
	lcd_Backlight_ddr &= ~_BV(lcd_Backlight_bit);
    104e:	20 98       	cbi	0x04, 0	; 4

	// turn off DS1307
	DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
    1050:	2f 98       	cbi	0x05, 7	; 5
	// then, DS1307 Vcc pin (Power Supply) - output, but make it input
	DS1307_VCC_ddr &= ~_BV(DS1307_VCC_bit);
    1052:	27 98       	cbi	0x04, 7	; 4

	// DHT11 (temp & humid sensor) signal pin - Output/Input
	//turn off and
	PORTB &= ~_BV(TINUDHT_PIN);
    1054:	29 98       	cbi	0x05, 1	; 5
	//make it input
	DDRB &= ~_BV(TINUDHT_PIN);
    1056:	21 98       	cbi	0x04, 1	; 4
	PORTB &= ~_BV(TINUDHT_PIN);
    1058:	29 98       	cbi	0x05, 1	; 5

	//turn off DHT11 chip power
	DHT_VCC_port &= ~_BV(DHT_VCC_bit);
    105a:	2a 98       	cbi	0x05, 2	; 5
	//make DHT_VCC as input, added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
    105c:	22 98       	cbi	0x04, 2	; 4

	//Tactile switch - Input
	//tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);

	// turn off Enable pin
	lcd_E_port &= ~_BV(lcd_E_bit);
    105e:	5b 98       	cbi	0x0b, 3	; 11
	// configure the microprocessor pins for the control lines
	// E line - output, but make it input
	lcd_E_ddr &= ~_BV(lcd_E_bit);
    1060:	53 98       	cbi	0x0a, 3	; 10
	
	// turn off RS 
	lcd_RS_port &= ~_BV(lcd_RS_bit);
    1062:	5a 98       	cbi	0x0b, 2	; 11
	// RS line - output, but make it input
	lcd_RS_ddr &= ~_BV(lcd_RS_bit);
    1064:	52 98       	cbi	0x0a, 2	; 10

	// turn off LCD power
	lcd_VDD_port &= ~_BV(lcd_VDD_bit);
    1066:	2e 98       	cbi	0x05, 6	; 5
	// then, LCD VSS pin (Power Supply) - output, but make it input
	lcd_VDD_ddr &= ~_BV(lcd_VDD_bit);
    1068:	26 98       	cbi	0x04, 6	; 4
    106a:	08 95       	ret

0000106c <adjustHour>:

}//makePDasInput

void adjustHour()
{
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 d0       	rcall	.+0      	; 0x1076 <adjustHour+0xa>
    1076:	1f 92       	push	r1
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
    107c:	00 e0       	ldi	r16, 0x00	; 0
    107e:	10 e0       	ldi	r17, 0x00	; 0
    char strHour[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
    1080:	80 e8       	ldi	r24, 0x80	; 128
    1082:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1086:	84 e1       	ldi	r24, 0x14	; 20
    1088:	8a 95       	dec	r24
    108a:	f1 f7       	brne	.-4      	; 0x1088 <adjustHour+0x1c>
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Hour: ");
    108c:	8e e5       	ldi	r24, 0x5E	; 94
    108e:	94 e0       	ldi	r25, 0x04	; 4
    1090:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        itoa(hour, strHour, 10);
    1094:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
    1098:	4a e0       	ldi	r20, 0x0A	; 10
    109a:	be 01       	movw	r22, r28
    109c:	6f 5f       	subi	r22, 0xFF	; 255
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	08 2e       	mov	r0, r24
    10a2:	00 0c       	add	r0, r0
    10a4:	99 0b       	sbc	r25, r25
    10a6:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strHour);
    10aa:	ce 01       	movw	r24, r28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
    10b2:	8a e0       	ldi	r24, 0x0A	; 10
    10b4:	94 e0       	ldi	r25, 0x04	; 4
    10b6:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
    10ba:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10bc:	e7 ea       	ldi	r30, 0xA7	; 167
    10be:	f1 e6       	ldi	r31, 0x61	; 97
    10c0:	31 97       	sbiw	r30, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <adjustHour+0x54>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <adjustHour+0x5a>
    10c6:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
    10c8:	84 fd       	sbrc	r24, 4
    10ca:	0c c0       	rjmp	.+24     	; 0x10e4 <adjustHour+0x78>
        {
            hour++;
    10cc:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <hour>
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
            if (hour > 23)
    10d2:	88 31       	cpi	r24, 0x18	; 24
    10d4:	24 f4       	brge	.+8      	; 0x10de <adjustHour+0x72>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            hour++;
    10d6:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <hour>
    10da:	01 2f       	mov	r16, r17
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <adjustHour+0x78>
            if (hour > 23)
                hour=0;
    10de:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <hour>
    10e2:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
    10e4:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
    10e6:	81 2f       	mov	r24, r17
    10e8:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
    10ea:	89 30       	cpi	r24, 0x09	; 9
    10ec:	38 f4       	brcc	.+14     	; 0x10fc <adjustHour+0x90>
    10ee:	81 e1       	ldi	r24, 0x11	; 17
    10f0:	9a e7       	ldi	r25, 0x7A	; 122
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <adjustHour+0x86>
    10f6:	00 c0       	rjmp	.+0      	; 0x10f8 <adjustHour+0x8c>
    10f8:	00 00       	nop
    10fa:	c2 cf       	rjmp	.-124    	; 0x1080 <adjustHour+0x14>
    10fc:	e1 e1       	ldi	r30, 0x11	; 17
    10fe:	fa e7       	ldi	r31, 0x7A	; 122
    1100:	31 97       	sbiw	r30, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <adjustHour+0x94>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <adjustHour+0x9a>
    1106:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)
}//adjustHour
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <adjustMin>:

void adjustMin()
{
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	00 d0       	rcall	.+0      	; 0x1122 <adjustMin+0xa>
    1122:	1f 92       	push	r1
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
    1128:	00 e0       	ldi	r16, 0x00	; 0
    112a:	10 e0       	ldi	r17, 0x00	; 0
    char strMin[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
    112c:	80 e8       	ldi	r24, 0x80	; 128
    112e:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1132:	84 e1       	ldi	r24, 0x14	; 20
    1134:	8a 95       	dec	r24
    1136:	f1 f7       	brne	.-4      	; 0x1134 <adjustMin+0x1c>
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Min: ");
    1138:	85 e6       	ldi	r24, 0x65	; 101
    113a:	94 e0       	ldi	r25, 0x04	; 4
    113c:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        itoa(min, strMin, 10);
    1140:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <min>
    1144:	4a e0       	ldi	r20, 0x0A	; 10
    1146:	be 01       	movw	r22, r28
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	08 2e       	mov	r0, r24
    114e:	00 0c       	add	r0, r0
    1150:	99 0b       	sbc	r25, r25
    1152:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strMin);
    1156:	ce 01       	movw	r24, r28
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
    115e:	8a e0       	ldi	r24, 0x0A	; 10
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
    1166:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1168:	e7 ea       	ldi	r30, 0xA7	; 167
    116a:	f1 e6       	ldi	r31, 0x61	; 97
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <adjustMin+0x54>
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <adjustMin+0x5a>
    1172:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
    1174:	84 fd       	sbrc	r24, 4
    1176:	0c c0       	rjmp	.+24     	; 0x1190 <adjustMin+0x78>
        {
            min++;
    1178:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <min>
    117c:	8f 5f       	subi	r24, 0xFF	; 255
            if (min > 59)
    117e:	8c 33       	cpi	r24, 0x3C	; 60
    1180:	24 f4       	brge	.+8      	; 0x118a <adjustMin+0x72>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            min++;
    1182:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <min>
    1186:	01 2f       	mov	r16, r17
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <adjustMin+0x78>
            if (min > 59)
                min=0;
    118a:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <min>
    118e:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
    1190:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
    1192:	81 2f       	mov	r24, r17
    1194:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
    1196:	89 30       	cpi	r24, 0x09	; 9
    1198:	38 f4       	brcc	.+14     	; 0x11a8 <adjustMin+0x90>
    119a:	81 e1       	ldi	r24, 0x11	; 17
    119c:	9a e7       	ldi	r25, 0x7A	; 122
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <adjustMin+0x86>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <adjustMin+0x8c>
    11a4:	00 00       	nop
    11a6:	c2 cf       	rjmp	.-124    	; 0x112c <adjustMin+0x14>
    11a8:	e1 e1       	ldi	r30, 0x11	; 17
    11aa:	fa e7       	ldi	r31, 0x7A	; 122
    11ac:	31 97       	sbiw	r30, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <adjustMin+0x94>
    11b0:	00 c0       	rjmp	.+0      	; 0x11b2 <adjustMin+0x9a>
    11b2:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustMin
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <adjustSec>:

void adjustSec()
{
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <adjustSec+0xa>
    11ce:	1f 92       	push	r1
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
    11d4:	00 e0       	ldi	r16, 0x00	; 0
    11d6:	10 e0       	ldi	r17, 0x00	; 0
    char strSec[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
    11d8:	80 e8       	ldi	r24, 0x80	; 128
    11da:	0e 94 84 02 	call	0x508	; 0x508 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11de:	84 e1       	ldi	r24, 0x14	; 20
    11e0:	8a 95       	dec	r24
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <adjustSec+0x1c>
        _delay_us(DELAY_INST);                                  // 40 uS delay (sec)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"sec: ");
    11e4:	8b e6       	ldi	r24, 0x6B	; 107
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        itoa(sec, strSec, 10);
    11ec:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
    11f0:	4a e0       	ldi	r20, 0x0A	; 10
    11f2:	be 01       	movw	r22, r28
    11f4:	6f 5f       	subi	r22, 0xFF	; 255
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	08 2e       	mov	r0, r24
    11fa:	00 0c       	add	r0, r0
    11fc:	99 0b       	sbc	r25, r25
    11fe:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strSec);
    1202:	ce 01       	movw	r24, r28
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
    120a:	8a e0       	ldi	r24, 0x0A	; 10
    120c:	94 e0       	ldi	r25, 0x04	; 4
    120e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
    1212:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1214:	e7 ea       	ldi	r30, 0xA7	; 167
    1216:	f1 e6       	ldi	r31, 0x61	; 97
    1218:	31 97       	sbiw	r30, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <adjustSec+0x54>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <adjustSec+0x5a>
    121e:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
    1220:	84 fd       	sbrc	r24, 4
    1222:	0c c0       	rjmp	.+24     	; 0x123c <adjustSec+0x78>
        {
            sec++;
    1224:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sec>
    1228:	8f 5f       	subi	r24, 0xFF	; 255
            if (sec > 59)
    122a:	8c 33       	cpi	r24, 0x3C	; 60
    122c:	24 f4       	brge	.+8      	; 0x1236 <adjustSec+0x72>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            sec++;
    122e:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <sec>
    1232:	01 2f       	mov	r16, r17
    1234:	03 c0       	rjmp	.+6      	; 0x123c <adjustSec+0x78>
            if (sec > 59)
                sec=0;
    1236:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <sec>
    123a:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
    123c:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
    123e:	81 2f       	mov	r24, r17
    1240:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
    1242:	89 30       	cpi	r24, 0x09	; 9
    1244:	38 f4       	brcc	.+14     	; 0x1254 <adjustSec+0x90>
    1246:	81 e1       	ldi	r24, 0x11	; 17
    1248:	9a e7       	ldi	r25, 0x7A	; 122
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <adjustSec+0x86>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <adjustSec+0x8c>
    1250:	00 00       	nop
    1252:	c2 cf       	rjmp	.-124    	; 0x11d8 <adjustSec+0x14>
    1254:	e1 e1       	ldi	r30, 0x11	; 17
    1256:	fa e7       	ldi	r31, 0x7A	; 122
    1258:	31 97       	sbiw	r30, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <adjustSec+0x94>
    125c:	00 c0       	rjmp	.+0      	; 0x125e <adjustSec+0x9a>
    125e:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustSec
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <countButton>:

    uint8_t val;
    uint8_t DONE=0;


    loopCnt=0;
    1270:	80 e0       	ldi	r24, 0x00	; 0
    prevLoop=0;
    1272:	30 e0       	ldi	r19, 0x00	; 0
}//sysClockTest

//-----------------------------------
void countButton()
{
    uint8_t menuCnt=0;
    1274:	20 e0       	ldi	r18, 0x00	; 0
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	40 e0       	ldi	r20, 0x00	; 0
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    127a:	52 e0       	ldi	r21, 0x02	; 2
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    {
        loopCnt++;
    127c:	8f 5f       	subi	r24, 0xFF	; 255
        curLoop = loopCnt;
        lapse = curLoop - prevLoop;
    127e:	98 2f       	mov	r25, r24
    1280:	93 1b       	sub	r25, r19

        //menuSelectInterval is
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
    1282:	93 30       	cpi	r25, 0x03	; 3
    1284:	18 f0       	brcs	.+6      	; 0x128c <countButton+0x1c>
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
    1286:	21 11       	cpse	r18, r1
    1288:	8b c0       	rjmp	.+278    	; 0x13a0 <countButton+0x130>
    128a:	75 c0       	rjmp	.+234    	; 0x1376 <countButton+0x106>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    128c:	95 30       	cpi	r25, 0x05	; 5
    128e:	08 f4       	brcc	.+2      	; 0x1292 <countButton+0x22>
    1290:	7c c0       	rjmp	.+248    	; 0x138a <countButton+0x11a>
    1292:	22 23       	and	r18, r18
    1294:	09 f4       	brne	.+2      	; 0x1298 <countButton+0x28>
    1296:	6c c0       	rjmp	.+216    	; 0x1370 <countButton+0x100>
    1298:	78 c0       	rjmp	.+240    	; 0x138a <countButton+0x11a>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    129a:	1c 99       	sbic	0x03, 4	; 3
    129c:	10 c0       	rjmp	.+32     	; 0x12be <countButton+0x4e>
    129e:	94 2f       	mov	r25, r20
    12a0:	05 c0       	rjmp	.+10     	; 0x12ac <countButton+0x3c>
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    12a2:	95 2f       	mov	r25, r21
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <countButton+0x3c>

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    12a6:	94 2f       	mov	r25, r20
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <countButton+0x3c>
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    12aa:	96 2f       	mov	r25, r22
    12ac:	e3 e2       	ldi	r30, 0x23	; 35
    12ae:	f4 ef       	ldi	r31, 0xF4	; 244
    12b0:	31 97       	sbiw	r30, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <countButton+0x40>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <countButton+0x46>
    12b6:	00 00       	nop
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
      {
        // for debounce
        _delay_ms(halfSec/2);
        menuCnt++;
    12b8:	2f 5f       	subi	r18, 0xFF	; 255

        //Pressing the button, lap time calculation should be reset
        //to give 1 sec of time to choose menuCnt
        prevLoop = loopCnt;
    12ba:	38 2f       	mov	r19, r24
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <countButton+0x50>
    12be:	94 2f       	mov	r25, r20
    12c0:	e1 e1       	ldi	r30, 0x11	; 17
    12c2:	fa e7       	ldi	r31, 0x7A	; 122
    12c4:	31 97       	sbiw	r30, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <countButton+0x54>
    12c8:	00 c0       	rjmp	.+0      	; 0x12ca <countButton+0x5a>
    12ca:	00 00       	nop
    //Get menuCnt by counting the button press
    //If pressing the button within 1 second of interval between each press,
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    12cc:	99 23       	and	r25, r25
    12ce:	b1 f2       	breq	.-84     	; 0x127c <countButton+0xc>

    //menuCnt has been set within 3sec of a PCINT occurence
    //  then, play WDT count for a corresponding alarm period.
    if (DONE)
    {
        if (DONE == 2)
    12d0:	92 30       	cpi	r25, 0x02	; 2
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <countButton+0x68>
            menuCnt = prevMenuCnt;
    12d4:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <prevMenuCnt>
        //visual cue to notifiy user selected menuCnt
        //blinkLED(menuCnt);
        //_delay_ms(halfSec);
        //turnOnLCDpower();
        //lcd_dispON();
        prevMenuCnt = menuCnt;
    12d8:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <prevMenuCnt>
        switch (menuCnt)
    12dc:	23 30       	cpi	r18, 0x03	; 3
    12de:	91 f0       	breq	.+36     	; 0x1304 <countButton+0x94>
    12e0:	28 f4       	brcc	.+10     	; 0x12ec <countButton+0x7c>
    12e2:	21 30       	cpi	r18, 0x01	; 1
    12e4:	49 f0       	breq	.+18     	; 0x12f8 <countButton+0x88>
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	51 f0       	breq	.+20     	; 0x12fe <countButton+0x8e>
    12ea:	2b c0       	rjmp	.+86     	; 0x1342 <countButton+0xd2>
    12ec:	25 30       	cpi	r18, 0x05	; 5
    12ee:	19 f1       	breq	.+70     	; 0x1336 <countButton+0xc6>
    12f0:	c8 f0       	brcs	.+50     	; 0x1324 <countButton+0xb4>
    12f2:	26 30       	cpi	r18, 0x06	; 6
    12f4:	19 f1       	breq	.+70     	; 0x133c <countButton+0xcc>
    12f6:	25 c0       	rjmp	.+74     	; 0x1342 <countButton+0xd2>
        {
            case 1:
                //lcd_dispWords();
                //lcd_dispRealClock();
				LCD_TimeDateTempHumid();
    12f8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <LCD_TimeDateTempHumid>
				//LCD_TimeDate();
				//LCD_TimeDateTempHumid();
                //_delay_ms(2000);
				//getDHT();
                break;
    12fc:	24 c0       	rjmp	.+72     	; 0x1346 <countButton+0xd6>
            case 2:
				LCD_TimeDate();
    12fe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <LCD_TimeDate>
                //_delay_ms(2000);
				//getDHT();
                //lcd_showDHT11();
                break;
    1302:	21 c0       	rjmp	.+66     	; 0x1346 <countButton+0xd6>
            case 3:
				makePDasOutput();
    1304:	0e 94 02 08 	call	0x1004	; 0x1004 <makePDasOutput>
                turnOnLCDBacklight();
    1308:	0e 94 02 03 	call	0x604	; 0x604 <turnOnLCDBacklight>
    130c:	ff e9       	ldi	r31, 0x9F	; 159
    130e:	26 e8       	ldi	r18, 0x86	; 134
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	f1 50       	subi	r31, 0x01	; 1
    1314:	20 40       	sbci	r18, 0x00	; 0
    1316:	80 40       	sbci	r24, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <countButton+0xa2>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <countButton+0xac>
    131c:	00 00       	nop
				//LCD_TimeDate();
				_delay_ms(500);
                turnOffLCDBacklight();
    131e:	0e 94 04 03 	call	0x608	; 0x608 <turnOffLCDBacklight>
                break;
    1322:	11 c0       	rjmp	.+34     	; 0x1346 <countButton+0xd6>
            case 4:
                //adjustClock();
                adjustMin();
    1324:	0e 94 8c 08 	call	0x1118	; 0x1118 <adjustMin>
                adjustHour();
    1328:	0e 94 36 08 	call	0x106c	; 0x106c <adjustHour>
                adjustSec();
    132c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <adjustSec>
                lcd_dispRealClock();
    1330:	0e 94 06 03 	call	0x60c	; 0x60c <lcd_dispRealClock>
                break;
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <countButton+0xd6>
            case 5:
                lcd_dispAccumulatedTime();
    1336:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <lcd_dispAccumulatedTime>
                break;
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <countButton+0xd6>
            case 6:
                lcd_dispProgInfo();
    133c:	0e 94 48 04 	call	0x890	; 0x890 <lcd_dispProgInfo>
                break;
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <countButton+0xd6>
            default:
                lcd_dispMenu();
    1342:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_dispMenu>
    1346:	9f e3       	ldi	r25, 0x3F	; 63
    1348:	e2 e4       	ldi	r30, 0x42	; 66
    134a:	ff e0       	ldi	r31, 0x0F	; 15
    134c:	91 50       	subi	r25, 0x01	; 1
    134e:	e0 40       	sbci	r30, 0x00	; 0
    1350:	f0 40       	sbci	r31, 0x00	; 0
    1352:	e1 f7       	brne	.-8      	; 0x134c <countButton+0xdc>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <countButton+0xe6>
    1356:	00 00       	nop
                //getDHT();
        }//switch (menuCnt)

        _delay_ms(5000); //show time of menu result

		makePDasInput(); //make LCD in deep power save mode
    1358:	0e 94 1d 08 	call	0x103a	; 0x103a <makePDasInput>
		pwrOn = 0;
    135c:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <pwrOn>
    1360:	08 95       	ret
    1362:	81 e1       	ldi	r24, 0x11	; 17
    1364:	9a e7       	ldi	r25, 0x7A	; 122
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <countButton+0xf6>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <countButton+0xfc>
    136c:	00 00       	nop
    136e:	b2 cf       	rjmp	.-156    	; 0x12d4 <countButton+0x64>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1370:	1c 99       	sbic	0x03, 4	; 3
    1372:	f7 cf       	rjmp	.-18     	; 0x1362 <countButton+0xf2>
    1374:	96 cf       	rjmp	.-212    	; 0x12a2 <countButton+0x32>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    1376:	95 30       	cpi	r25, 0x05	; 5
    1378:	d8 f7       	brcc	.-10     	; 0x1370 <countButton+0x100>
    137a:	8f cf       	rjmp	.-226    	; 0x129a <countButton+0x2a>
    137c:	e1 e1       	ldi	r30, 0x11	; 17
    137e:	fa e7       	ldi	r31, 0x7A	; 122
    1380:	31 97       	sbiw	r30, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <countButton+0x110>
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <countButton+0x116>
    1386:	00 00       	nop
    1388:	79 cf       	rjmp	.-270    	; 0x127c <countButton+0xc>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    138a:	1c 99       	sbic	0x03, 4	; 3
    138c:	f7 cf       	rjmp	.-18     	; 0x137c <countButton+0x10c>
    138e:	8b cf       	rjmp	.-234    	; 0x12a6 <countButton+0x36>
    1390:	81 e1       	ldi	r24, 0x11	; 17
    1392:	9a e7       	ldi	r25, 0x7A	; 122
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <countButton+0x124>
    1398:	00 c0       	rjmp	.+0      	; 0x139a <countButton+0x12a>
    139a:	00 00       	nop
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	98 cf       	rjmp	.-208    	; 0x12d0 <countButton+0x60>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    13a0:	1c 99       	sbic	0x03, 4	; 3
    13a2:	f6 cf       	rjmp	.-20     	; 0x1390 <countButton+0x120>
    13a4:	82 cf       	rjmp	.-252    	; 0x12aa <countButton+0x3a>

000013a6 <__divmodqi4>:
    13a6:	87 fb       	bst	r24, 7
    13a8:	08 2e       	mov	r0, r24
    13aa:	06 26       	eor	r0, r22
    13ac:	87 fd       	sbrc	r24, 7
    13ae:	81 95       	neg	r24
    13b0:	67 fd       	sbrc	r22, 7
    13b2:	61 95       	neg	r22
    13b4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__udivmodqi4>
    13b8:	0e f4       	brtc	.+2      	; 0x13bc <__divmodqi4_1>
    13ba:	91 95       	neg	r25

000013bc <__divmodqi4_1>:
    13bc:	07 fc       	sbrc	r0, 7
    13be:	81 95       	neg	r24

000013c0 <__divmodqi4_exit>:
    13c0:	08 95       	ret

000013c2 <__divmodhi4>:
    13c2:	97 fb       	bst	r25, 7
    13c4:	07 2e       	mov	r0, r23
    13c6:	16 f4       	brtc	.+4      	; 0x13cc <__divmodhi4+0xa>
    13c8:	00 94       	com	r0
    13ca:	07 d0       	rcall	.+14     	; 0x13da <__divmodhi4_neg1>
    13cc:	77 fd       	sbrc	r23, 7
    13ce:	09 d0       	rcall	.+18     	; 0x13e2 <__divmodhi4_neg2>
    13d0:	0e 94 16 0a 	call	0x142c	; 0x142c <__udivmodhi4>
    13d4:	07 fc       	sbrc	r0, 7
    13d6:	05 d0       	rcall	.+10     	; 0x13e2 <__divmodhi4_neg2>
    13d8:	3e f4       	brtc	.+14     	; 0x13e8 <__divmodhi4_exit>

000013da <__divmodhi4_neg1>:
    13da:	90 95       	com	r25
    13dc:	81 95       	neg	r24
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	08 95       	ret

000013e2 <__divmodhi4_neg2>:
    13e2:	70 95       	com	r23
    13e4:	61 95       	neg	r22
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255

000013e8 <__divmodhi4_exit>:
    13e8:	08 95       	ret

000013ea <__tablejump2__>:
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	05 90       	lpm	r0, Z+
    13f0:	f4 91       	lpm	r31, Z
    13f2:	e0 2d       	mov	r30, r0
    13f4:	09 94       	ijmp

000013f6 <__umulhisi3>:
    13f6:	a2 9f       	mul	r26, r18
    13f8:	b0 01       	movw	r22, r0
    13fa:	b3 9f       	mul	r27, r19
    13fc:	c0 01       	movw	r24, r0
    13fe:	a3 9f       	mul	r26, r19
    1400:	70 0d       	add	r23, r0
    1402:	81 1d       	adc	r24, r1
    1404:	11 24       	eor	r1, r1
    1406:	91 1d       	adc	r25, r1
    1408:	b2 9f       	mul	r27, r18
    140a:	70 0d       	add	r23, r0
    140c:	81 1d       	adc	r24, r1
    140e:	11 24       	eor	r1, r1
    1410:	91 1d       	adc	r25, r1
    1412:	08 95       	ret

00001414 <__udivmodqi4>:
    1414:	99 1b       	sub	r25, r25
    1416:	79 e0       	ldi	r23, 0x09	; 9
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <__udivmodqi4_ep>

0000141a <__udivmodqi4_loop>:
    141a:	99 1f       	adc	r25, r25
    141c:	96 17       	cp	r25, r22
    141e:	08 f0       	brcs	.+2      	; 0x1422 <__udivmodqi4_ep>
    1420:	96 1b       	sub	r25, r22

00001422 <__udivmodqi4_ep>:
    1422:	88 1f       	adc	r24, r24
    1424:	7a 95       	dec	r23
    1426:	c9 f7       	brne	.-14     	; 0x141a <__udivmodqi4_loop>
    1428:	80 95       	com	r24
    142a:	08 95       	ret

0000142c <__udivmodhi4>:
    142c:	aa 1b       	sub	r26, r26
    142e:	bb 1b       	sub	r27, r27
    1430:	51 e1       	ldi	r21, 0x11	; 17
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <__udivmodhi4_ep>

00001434 <__udivmodhi4_loop>:
    1434:	aa 1f       	adc	r26, r26
    1436:	bb 1f       	adc	r27, r27
    1438:	a6 17       	cp	r26, r22
    143a:	b7 07       	cpc	r27, r23
    143c:	10 f0       	brcs	.+4      	; 0x1442 <__udivmodhi4_ep>
    143e:	a6 1b       	sub	r26, r22
    1440:	b7 0b       	sbc	r27, r23

00001442 <__udivmodhi4_ep>:
    1442:	88 1f       	adc	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	5a 95       	dec	r21
    1448:	a9 f7       	brne	.-22     	; 0x1434 <__udivmodhi4_loop>
    144a:	80 95       	com	r24
    144c:	90 95       	com	r25
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	08 95       	ret

00001454 <atoi>:
    1454:	fc 01       	movw	r30, r24
    1456:	88 27       	eor	r24, r24
    1458:	99 27       	eor	r25, r25
    145a:	e8 94       	clt
    145c:	21 91       	ld	r18, Z+
    145e:	20 32       	cpi	r18, 0x20	; 32
    1460:	e9 f3       	breq	.-6      	; 0x145c <atoi+0x8>
    1462:	29 30       	cpi	r18, 0x09	; 9
    1464:	10 f0       	brcs	.+4      	; 0x146a <atoi+0x16>
    1466:	2e 30       	cpi	r18, 0x0E	; 14
    1468:	c8 f3       	brcs	.-14     	; 0x145c <atoi+0x8>
    146a:	2b 32       	cpi	r18, 0x2B	; 43
    146c:	41 f0       	breq	.+16     	; 0x147e <atoi+0x2a>
    146e:	2d 32       	cpi	r18, 0x2D	; 45
    1470:	39 f4       	brne	.+14     	; 0x1480 <atoi+0x2c>
    1472:	68 94       	set
    1474:	04 c0       	rjmp	.+8      	; 0x147e <atoi+0x2a>
    1476:	0e 94 8f 0a 	call	0x151e	; 0x151e <__mulhi_const_10>
    147a:	82 0f       	add	r24, r18
    147c:	91 1d       	adc	r25, r1
    147e:	21 91       	ld	r18, Z+
    1480:	20 53       	subi	r18, 0x30	; 48
    1482:	2a 30       	cpi	r18, 0x0A	; 10
    1484:	c0 f3       	brcs	.-16     	; 0x1476 <atoi+0x22>
    1486:	1e f4       	brtc	.+6      	; 0x148e <atoi+0x3a>
    1488:	90 95       	com	r25
    148a:	81 95       	neg	r24
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	08 95       	ret

00001490 <strtok>:
    1490:	42 e7       	ldi	r20, 0x72	; 114
    1492:	54 e0       	ldi	r21, 0x04	; 4
    1494:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <strtok_r>
    1498:	08 95       	ret

0000149a <strcmp>:
    149a:	fb 01       	movw	r30, r22
    149c:	dc 01       	movw	r26, r24
    149e:	8d 91       	ld	r24, X+
    14a0:	01 90       	ld	r0, Z+
    14a2:	80 19       	sub	r24, r0
    14a4:	01 10       	cpse	r0, r1
    14a6:	d9 f3       	breq	.-10     	; 0x149e <strcmp+0x4>
    14a8:	99 0b       	sbc	r25, r25
    14aa:	08 95       	ret

000014ac <strcpy>:
    14ac:	fb 01       	movw	r30, r22
    14ae:	dc 01       	movw	r26, r24
    14b0:	01 90       	ld	r0, Z+
    14b2:	0d 92       	st	X+, r0
    14b4:	00 20       	and	r0, r0
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <strcpy+0x4>
    14b8:	08 95       	ret

000014ba <strtok_r>:
    14ba:	fa 01       	movw	r30, r20
    14bc:	a1 91       	ld	r26, Z+
    14be:	b0 81       	ld	r27, Z
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	19 f4       	brne	.+6      	; 0x14ca <strtok_r+0x10>
    14c4:	10 97       	sbiw	r26, 0x00	; 0
    14c6:	e1 f0       	breq	.+56     	; 0x1500 <strtok_r+0x46>
    14c8:	cd 01       	movw	r24, r26
    14ca:	dc 01       	movw	r26, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0d 90       	ld	r0, X+
    14d0:	00 20       	and	r0, r0
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <strtok_r+0x1e>
    14d4:	c0 01       	movw	r24, r0
    14d6:	13 c0       	rjmp	.+38     	; 0x14fe <strtok_r+0x44>
    14d8:	fb 01       	movw	r30, r22
    14da:	21 91       	ld	r18, Z+
    14dc:	22 23       	and	r18, r18
    14de:	19 f0       	breq	.+6      	; 0x14e6 <strtok_r+0x2c>
    14e0:	20 15       	cp	r18, r0
    14e2:	d9 f7       	brne	.-10     	; 0x14da <strtok_r+0x20>
    14e4:	f3 cf       	rjmp	.-26     	; 0x14cc <strtok_r+0x12>
    14e6:	fb 01       	movw	r30, r22
    14e8:	21 91       	ld	r18, Z+
    14ea:	20 15       	cp	r18, r0
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <strtok_r+0x3a>
    14ee:	1e 92       	st	-X, r1
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <strtok_r+0x46>
    14f4:	22 23       	and	r18, r18
    14f6:	c1 f7       	brne	.-16     	; 0x14e8 <strtok_r+0x2e>
    14f8:	0d 90       	ld	r0, X+
    14fa:	00 20       	and	r0, r0
    14fc:	a1 f7       	brne	.-24     	; 0x14e6 <strtok_r+0x2c>
    14fe:	d0 01       	movw	r26, r0
    1500:	fa 01       	movw	r30, r20
    1502:	a1 93       	st	Z+, r26
    1504:	b0 83       	st	Z, r27
    1506:	08 95       	ret

00001508 <__itoa_ncheck>:
    1508:	bb 27       	eor	r27, r27
    150a:	4a 30       	cpi	r20, 0x0A	; 10
    150c:	31 f4       	brne	.+12     	; 0x151a <__itoa_ncheck+0x12>
    150e:	99 23       	and	r25, r25
    1510:	22 f4       	brpl	.+8      	; 0x151a <__itoa_ncheck+0x12>
    1512:	bd e2       	ldi	r27, 0x2D	; 45
    1514:	90 95       	com	r25
    1516:	81 95       	neg	r24
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__utoa_common>

0000151e <__mulhi_const_10>:
    151e:	7a e0       	ldi	r23, 0x0A	; 10
    1520:	97 9f       	mul	r25, r23
    1522:	90 2d       	mov	r25, r0
    1524:	87 9f       	mul	r24, r23
    1526:	80 2d       	mov	r24, r0
    1528:	91 0d       	add	r25, r1
    152a:	11 24       	eor	r1, r1
    152c:	08 95       	ret

0000152e <__utoa_ncheck>:
    152e:	bb 27       	eor	r27, r27

00001530 <__utoa_common>:
    1530:	fb 01       	movw	r30, r22
    1532:	55 27       	eor	r21, r21
    1534:	aa 27       	eor	r26, r26
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	aa 1f       	adc	r26, r26
    153c:	a4 17       	cp	r26, r20
    153e:	10 f0       	brcs	.+4      	; 0x1544 <__utoa_common+0x14>
    1540:	a4 1b       	sub	r26, r20
    1542:	83 95       	inc	r24
    1544:	50 51       	subi	r21, 0x10	; 16
    1546:	b9 f7       	brne	.-18     	; 0x1536 <__utoa_common+0x6>
    1548:	a0 5d       	subi	r26, 0xD0	; 208
    154a:	aa 33       	cpi	r26, 0x3A	; 58
    154c:	08 f0       	brcs	.+2      	; 0x1550 <__utoa_common+0x20>
    154e:	a9 5d       	subi	r26, 0xD9	; 217
    1550:	a1 93       	st	Z+, r26
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	79 f7       	brne	.-34     	; 0x1534 <__utoa_common+0x4>
    1556:	b1 11       	cpse	r27, r1
    1558:	b1 93       	st	Z+, r27
    155a:	11 92       	st	Z+, r1
    155c:	cb 01       	movw	r24, r22
    155e:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <strrev>

00001562 <strrev>:
    1562:	dc 01       	movw	r26, r24
    1564:	fc 01       	movw	r30, r24
    1566:	67 2f       	mov	r22, r23
    1568:	71 91       	ld	r23, Z+
    156a:	77 23       	and	r23, r23
    156c:	e1 f7       	brne	.-8      	; 0x1566 <strrev+0x4>
    156e:	32 97       	sbiw	r30, 0x02	; 2
    1570:	04 c0       	rjmp	.+8      	; 0x157a <strrev+0x18>
    1572:	7c 91       	ld	r23, X
    1574:	6d 93       	st	X+, r22
    1576:	70 83       	st	Z, r23
    1578:	62 91       	ld	r22, -Z
    157a:	ae 17       	cp	r26, r30
    157c:	bf 07       	cpc	r27, r31
    157e:	c8 f3       	brcs	.-14     	; 0x1572 <strrev+0x10>
    1580:	08 95       	ret

00001582 <_exit>:
    1582:	f8 94       	cli

00001584 <__stop_program>:
    1584:	ff cf       	rjmp	.-2      	; 0x1584 <__stop_program>
