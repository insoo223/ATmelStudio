
LCD_RTC_DS1307_DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  000016aa  0000173e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080046a  0080046a  00001aa8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ad8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005be7  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d4d  00000000  00000000  00007af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000296a  00000000  00000000  00009844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000089c  00000000  00000000  0000c1b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b72  00000000  00000000  0000ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc3  00000000  00000000  0000d5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000f581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_3>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	35 04       	cpc	r3, r5
      6a:	39 04       	cpc	r3, r9
      6c:	35 04       	cpc	r3, r5
      6e:	3d 04       	cpc	r3, r13
      70:	35 04       	cpc	r3, r5
      72:	3d 04       	cpc	r3, r13
      74:	35 04       	cpc	r3, r5
      76:	35 04       	cpc	r3, r5
      78:	3d 04       	cpc	r3, r13
      7a:	35 04       	cpc	r3, r5
      7c:	3d 04       	cpc	r3, r13
      7e:	35 04       	cpc	r3, r5
      80:	f5 05       	cpc	r31, r5
      82:	fe 05       	cpc	r31, r14
      84:	07 06       	cpc	r0, r23
      86:	10 06       	cpc	r1, r16
      88:	19 06       	cpc	r1, r25
      8a:	22 06       	cpc	r2, r18
      8c:	2b 06       	cpc	r2, r27

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	14 e0       	ldi	r17, 0x04	; 4
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	ea ea       	ldi	r30, 0xAA	; 170
      a2:	f6 e1       	ldi	r31, 0x16	; 22
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	aa 36       	cpi	r26, 0x6A	; 106
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	24 e0       	ldi	r18, 0x04	; 4
      b2:	aa e6       	ldi	r26, 0x6A	; 106
      b4:	b4 e0       	ldi	r27, 0x04	; 4
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a3 38       	cpi	r26, 0x83	; 131
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 65 07 	call	0xeca	; 0xeca <main>
      c4:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <LCDconfig>:
PORTD for LCD
----------------*/
void LCDconfig()
{
// Data lines of nibble - Output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
      cc:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
      ce:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
      d0:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
      d2:	54 9a       	sbi	0x0a, 4	; 10

// E pin (Enable) - Output
	lcd_E_ddr |= _BV(lcd_E_bit);
      d4:	53 9a       	sbi	0x0a, 3	; 10
	//turn off lcd_E
	lcd_E_port &= ~_BV(lcd_E_bit);
      d6:	5b 98       	cbi	0x0b, 3	; 11


// RS pin (Register Select) - Output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
      d8:	52 9a       	sbi	0x0a, 2	; 10
	//turn off lcd_RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
      da:	5a 98       	cbi	0x0b, 2	; 11

// Back light cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
      dc:	20 9a       	sbi	0x04, 0	; 4
	// Turn off back light
	// for it is GND or cathode pin, HIGH make it off
	lcd_Backlight_port |= _BV(lcd_Backlight_bit);
      de:	28 9a       	sbi	0x05, 0	; 5

// VDD pin (Power Supply) - Output
	// added by Insoo (Jul 11, 2017) to control LCD power consumption while sleep
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
      e0:	26 9a       	sbi	0x04, 6	; 4
      e2:	08 95       	ret

000000e4 <SwitchConfig>:
PORTB for the button/tactile switch
----------------*/
void SwitchConfig()
{
	//Tactile switch - Input
	tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);
      e4:	24 98       	cbi	0x04, 4	; 4
      e6:	08 95       	ret

000000e8 <RTC_DS1307config>:
----------------*/
void RTC_DS1307config()
{
	// DS1307 VCC pin (Power Supply) - Output
	//added by Insoo (Jul 11, 2017)
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
      e8:	27 9a       	sbi	0x04, 7	; 4
	//turn off DS1307 RTC chip power
	//DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
	//turn on DS1307 RTC chip power to save coin cell battery
	DS1307_VCC_port |= _BV(DS1307_VCC_bit);
      ea:	2f 9a       	sbi	0x05, 7	; 5
      ec:	08 95       	ret

000000ee <DHT11config>:
----------------*/
void DHT11config()
{
	// DHT11 (temp & humid sensor) VCC pin (Power Supply) - Output
	//added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr |= _BV(DHT_VCC_bit);
      ee:	22 9a       	sbi	0x04, 2	; 4
	//turn off DS1307 RTC chip power
	DHT_VCC_port &= ~_BV(DHT_VCC_bit);
      f0:	2a 98       	cbi	0x05, 2	; 5
      f2:	08 95       	ret

000000f4 <debugPinConfig>:
PORTB for the debug pin 
----------------*/
void debugPinConfig()
{
	// debug pin - Output
	debug_PIN_ddr |= _BV(debug_PIN_bit);
      f4:	23 9a       	sbi	0x04, 3	; 4
	//turn off debug_PIN_bit
	debug_PIN_port &= ~_BV(debug_PIN_bit);
      f6:	2b 98       	cbi	0x05, 3	; 5
      f8:	08 95       	ret

000000fa <config>:
#include <util/delay.h>

//------------------------------------
void config()
{
	LCDconfig();
      fa:	0e 94 66 00 	call	0xcc	; 0xcc <LCDconfig>
	SwitchConfig();
      fe:	0e 94 72 00 	call	0xe4	; 0xe4 <SwitchConfig>
	RTC_DS1307config();
     102:	0e 94 74 00 	call	0xe8	; 0xe8 <RTC_DS1307config>
	DHT11config();
     106:	0e 94 77 00 	call	0xee	; 0xee <DHT11config>
	debugPinConfig();
     10a:	0e 94 7a 00 	call	0xf4	; 0xf4 <debugPinConfig>
     10e:	08 95       	ret

00000110 <getDHT>:
char strTemp[3], strHumid[3];

//-------------------------------------------
//void getDHT(uint16_t *temp, uint16_t *humid)
void getDHT()
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	00 d0       	rcall	.+0      	; 0x116 <getDHT+0x6>
     116:	00 d0       	rcall	.+0      	; 0x118 <getDHT+0x8>
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
	TinuDHT tinudht;

	DHT_VCC_ddr |= _BV(DHT_VCC_bit);
     11c:	22 9a       	sbi	0x04, 2	; 4
	DHT_VCC_port |= _BV(DHT_VCC_bit);
     11e:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     120:	2f e9       	ldi	r18, 0x9F	; 159
     122:	86 e8       	ldi	r24, 0x86	; 134
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	21 50       	subi	r18, 0x01	; 1
     128:	80 40       	sbci	r24, 0x00	; 0
     12a:	90 40       	sbci	r25, 0x00	; 0
     12c:	e1 f7       	brne	.-8      	; 0x126 <getDHT+0x16>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <getDHT+0x20>
     130:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, DHT_SIG_bit);
     132:	61 e0       	ldi	r22, 0x01	; 1
     134:	ce 01       	movw	r24, r28
     136:	01 96       	adiw	r24, 0x01	; 1
     138:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <tinudht_read>
     13c:	2f e9       	ldi	r18, 0x9F	; 159
     13e:	86 e8       	ldi	r24, 0x86	; 134
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	21 50       	subi	r18, 0x01	; 1
     144:	80 40       	sbci	r24, 0x00	; 0
     146:	90 40       	sbci	r25, 0x00	; 0
     148:	e1 f7       	brne	.-8      	; 0x142 <getDHT+0x32>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <getDHT+0x3c>
     14c:	00 00       	nop
	_delay_ms(500);
	tinudht_read(&tinudht, DHT_SIG_bit);
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	ce 01       	movw	r24, r28
     152:	01 96       	adiw	r24, 0x01	; 1
     154:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <tinudht_read>
	temp = tinudht.temperature;
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <temp>
	humid = tinudht.humidity;
     15e:	99 81       	ldd	r25, Y+1	; 0x01
     160:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <humid>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     164:	4a e0       	ldi	r20, 0x0A	; 10
     166:	6d e7       	ldi	r22, 0x7D	; 125
     168:	74 e0       	ldi	r23, 0x04	; 4
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>

	// display the first line of information
	itoa(temp, strTemp, 10);
	itoa(humid, strHumid, 10);
     170:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <humid>
     174:	4a e0       	ldi	r20, 0x0A	; 10
     176:	69 e7       	ldi	r22, 0x79	; 121
     178:	74 e0       	ldi	r23, 0x04	; 4
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>

     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	0f 90       	pop	r0
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <DS1307_GetTime>:
	SetTimeDate(wkDay, month, day, year,  ampm,  h,  m,  s);
	_delay_ms(1000);
	
	LCD_WriteTimeDate();
	_delay_ms(3000);
}//setTime2DS1307
     18e:	ef 92       	push	r14
     190:	ff 92       	push	r15
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	ec 01       	movw	r28, r24
     19c:	7b 01       	movw	r14, r22
     19e:	8a 01       	movw	r16, r20
     1a0:	62 e0       	ldi	r22, 0x02	; 2
     1a2:	80 ed       	ldi	r24, 0xD0	; 208
     1a4:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_ReadRegister>
     1a8:	88 83       	st	Y, r24
     1aa:	61 e0       	ldi	r22, 0x01	; 1
     1ac:	80 ed       	ldi	r24, 0xD0	; 208
     1ae:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_ReadRegister>
     1b2:	f7 01       	movw	r30, r14
     1b4:	80 83       	st	Z, r24
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	80 ed       	ldi	r24, 0xD0	; 208
     1ba:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_ReadRegister>
     1be:	f8 01       	movw	r30, r16
     1c0:	80 83       	st	Z, r24
     1c2:	98 81       	ld	r25, Y
     1c4:	96 ff       	sbrs	r25, 6
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <DS1307_GetTime+0x40>
     1c8:	9f 71       	andi	r25, 0x1F	; 31
     1ca:	98 83       	st	Y, r25
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DS1307_GetTime+0x44>
     1ce:	9f 73       	andi	r25, 0x3F	; 63
     1d0:	98 83       	st	Y, r25
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	08 95       	ret

000001e0 <DS1307_GetDate>:
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	7c 01       	movw	r14, r24
     1ee:	8b 01       	movw	r16, r22
     1f0:	ea 01       	movw	r28, r20
     1f2:	65 e0       	ldi	r22, 0x05	; 5
     1f4:	80 ed       	ldi	r24, 0xD0	; 208
     1f6:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_ReadRegister>
     1fa:	f7 01       	movw	r30, r14
     1fc:	80 83       	st	Z, r24
     1fe:	64 e0       	ldi	r22, 0x04	; 4
     200:	80 ed       	ldi	r24, 0xD0	; 208
     202:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_ReadRegister>
     206:	f8 01       	movw	r30, r16
     208:	80 83       	st	Z, r24
     20a:	66 e0       	ldi	r22, 0x06	; 6
     20c:	80 ed       	ldi	r24, 0xD0	; 208
     20e:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_ReadRegister>
     212:	88 83       	st	Y, r24
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	08 95       	ret

00000222 <DS1307_GetWkDay>:
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ec 01       	movw	r28, r24
     228:	63 e0       	ldi	r22, 0x03	; 3
     22a:	80 ed       	ldi	r24, 0xD0	; 208
     22c:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2C_ReadRegister>
     230:	88 83       	st	Y, r24
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <adjustHour>:
	_delay_ms(10);
}//SetTimeDate

//-----------------------------------
void adjustHour()
{
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	00 d0       	rcall	.+0      	; 0x242 <adjustHour+0xa>
     242:	1f 92       	push	r1
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	10 e0       	ldi	r17, 0x00	; 0
	char strHour[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     252:	84 e1       	ldi	r24, 0x14	; 20
     254:	8a 95       	dec	r24
     256:	f1 f7       	brne	.-4      	; 0x254 <adjustHour+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (min)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"Hour: ");
     258:	8e ec       	ldi	r24, 0xCE	; 206
     25a:	93 e0       	ldi	r25, 0x03	; 3
     25c:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		itoa(hour, strHour, 10);
     260:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     264:	4a e0       	ldi	r20, 0x0A	; 10
     266:	be 01       	movw	r22, r28
     268:	6f 5f       	subi	r22, 0xFF	; 255
     26a:	7f 4f       	sbci	r23, 0xFF	; 255
     26c:	08 2e       	mov	r0, r24
     26e:	00 0c       	add	r0, r0
     270:	99 0b       	sbc	r25, r25
     272:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strHour);
     276:	ce 01       	movw	r24, r28
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	94 e0       	ldi	r25, 0x04	; 4
     282:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     286:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     288:	e7 ea       	ldi	r30, 0xA7	; 167
     28a:	f1 e6       	ldi	r31, 0x61	; 97
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <adjustHour+0x54>
     290:	00 c0       	rjmp	.+0      	; 0x292 <adjustHour+0x5a>
     292:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     294:	84 fd       	sbrc	r24, 4
     296:	0c c0       	rjmp	.+24     	; 0x2b0 <adjustHour+0x78>
		{
			hour++;
     298:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     29c:	8f 5f       	subi	r24, 0xFF	; 255
			if (hour > 23)
     29e:	88 31       	cpi	r24, 0x18	; 24
     2a0:	24 f4       	brge	.+8      	; 0x2aa <adjustHour+0x72>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			hour++;
     2a2:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <hour>
     2a6:	01 2f       	mov	r16, r17
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <adjustHour+0x78>
			if (hour > 23)
			hour=0;
     2aa:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <hour>
     2ae:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     2b0:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     2b2:	81 2f       	mov	r24, r17
     2b4:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     2b6:	89 30       	cpi	r24, 0x09	; 9
     2b8:	38 f4       	brcc	.+14     	; 0x2c8 <adjustHour+0x90>
     2ba:	81 e1       	ldi	r24, 0x11	; 17
     2bc:	9a e7       	ldi	r25, 0x7A	; 122
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <adjustHour+0x86>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <adjustHour+0x8c>
     2c4:	00 00       	nop
     2c6:	c2 cf       	rjmp	.-124    	; 0x24c <adjustHour+0x14>
     2c8:	e1 e1       	ldi	r30, 0x11	; 17
     2ca:	fa e7       	ldi	r31, 0x7A	; 122
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <adjustHour+0x94>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <adjustHour+0x9a>
     2d2:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)
}//adjustHour
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	08 95       	ret

000002e4 <adjustMin>:

//-----------------------------------
void adjustMin()
{
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <adjustMin+0xa>
     2ee:	1f 92       	push	r1
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	10 e0       	ldi	r17, 0x00	; 0
	char strMin[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     2f8:	80 e8       	ldi	r24, 0x80	; 128
     2fa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fe:	84 e1       	ldi	r24, 0x14	; 20
     300:	8a 95       	dec	r24
     302:	f1 f7       	brne	.-4      	; 0x300 <adjustMin+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (min)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"Min: ");
     304:	85 ed       	ldi	r24, 0xD5	; 213
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		itoa(min, strMin, 10);
     30c:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <min>
     310:	4a e0       	ldi	r20, 0x0A	; 10
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	08 2e       	mov	r0, r24
     31a:	00 0c       	add	r0, r0
     31c:	99 0b       	sbc	r25, r25
     31e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strMin);
     322:	ce 01       	movw	r24, r28
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	94 e0       	ldi	r25, 0x04	; 4
     32e:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     332:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     334:	e7 ea       	ldi	r30, 0xA7	; 167
     336:	f1 e6       	ldi	r31, 0x61	; 97
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <adjustMin+0x54>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <adjustMin+0x5a>
     33e:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     340:	84 fd       	sbrc	r24, 4
     342:	0c c0       	rjmp	.+24     	; 0x35c <adjustMin+0x78>
		{
			min++;
     344:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <min>
     348:	8f 5f       	subi	r24, 0xFF	; 255
			if (min > 59)
     34a:	8c 33       	cpi	r24, 0x3C	; 60
     34c:	24 f4       	brge	.+8      	; 0x356 <adjustMin+0x72>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			min++;
     34e:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <min>
     352:	01 2f       	mov	r16, r17
     354:	03 c0       	rjmp	.+6      	; 0x35c <adjustMin+0x78>
			if (min > 59)
			min=0;
     356:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <min>
     35a:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     35c:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     35e:	81 2f       	mov	r24, r17
     360:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     362:	89 30       	cpi	r24, 0x09	; 9
     364:	38 f4       	brcc	.+14     	; 0x374 <adjustMin+0x90>
     366:	81 e1       	ldi	r24, 0x11	; 17
     368:	9a e7       	ldi	r25, 0x7A	; 122
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <adjustMin+0x86>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <adjustMin+0x8c>
     370:	00 00       	nop
     372:	c2 cf       	rjmp	.-124    	; 0x2f8 <adjustMin+0x14>
     374:	e1 e1       	ldi	r30, 0x11	; 17
     376:	fa e7       	ldi	r31, 0x7A	; 122
     378:	31 97       	sbiw	r30, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <adjustMin+0x94>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <adjustMin+0x9a>
     37e:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)

}//adjustMin
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <adjustSec>:

//-----------------------------------
void adjustSec()
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	00 d0       	rcall	.+0      	; 0x39a <adjustSec+0xa>
     39a:	1f 92       	push	r1
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
	uint8_t DONE=0, val;
	uint8_t curLoop=0, preLoop=0, lapse=0;
     3a0:	00 e0       	ldi	r16, 0x00	; 0
     3a2:	10 e0       	ldi	r17, 0x00	; 0
	char strSec[3];

	while (!DONE)
	{
		// set cursor to start of first line
		lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3aa:	84 e1       	ldi	r24, 0x14	; 20
     3ac:	8a 95       	dec	r24
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <adjustSec+0x1c>
		_delay_us(DELAY_INST);                                  // 40 uS delay (sec)
		// display the first line of information
		lcd_write_string_4d((uint8_t *)"sec: ");
     3b0:	8b ed       	ldi	r24, 0xDB	; 219
     3b2:	93 e0       	ldi	r25, 0x03	; 3
     3b4:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		itoa(sec, strSec, 10);
     3b8:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     3bc:	4a e0       	ldi	r20, 0x0A	; 10
     3be:	be 01       	movw	r22, r28
     3c0:	6f 5f       	subi	r22, 0xFF	; 255
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	08 2e       	mov	r0, r24
     3c6:	00 0c       	add	r0, r0
     3c8:	99 0b       	sbc	r25, r25
     3ca:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
		lcd_write_string_4d((uint8_t *)strSec);
     3ce:	ce 01       	movw	r24, r28
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		lcd_write_string_4d((uint8_t *)" ");
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
     3de:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e0:	e7 ea       	ldi	r30, 0xA7	; 167
     3e2:	f1 e6       	ldi	r31, 0x61	; 97
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <adjustSec+0x54>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <adjustSec+0x5a>
     3ea:	00 00       	nop
		_delay_ms(100);
		if (val == 0)
     3ec:	84 fd       	sbrc	r24, 4
     3ee:	0c c0       	rjmp	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			sec++;
     3f0:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
			if (sec > 59)
     3f6:	8c 33       	cpi	r24, 0x3C	; 60
     3f8:	24 f4       	brge	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		lcd_write_string_4d((uint8_t *)" ");
		val = tactile_Switch_port & _BV(tactile_Switch_bit);
		_delay_ms(100);
		if (val == 0)
		{
			sec++;
     3fa:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sec>
     3fe:	01 2f       	mov	r16, r17
     400:	03 c0       	rjmp	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			if (sec > 59)
			sec=0;
     402:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <sec>
     406:	01 2f       	mov	r16, r17
			preLoop = curLoop;
		}
		curLoop++;
     408:	1f 5f       	subi	r17, 0xFF	; 255
		lapse = curLoop - preLoop;
     40a:	81 2f       	mov	r24, r17
     40c:	80 1b       	sub	r24, r16
		if (lapse > adjustTimeInterval)
     40e:	89 30       	cpi	r24, 0x09	; 9
     410:	38 f4       	brcc	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     412:	81 e1       	ldi	r24, 0x11	; 17
     414:	9a e7       	ldi	r25, 0x7A	; 122
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41c:	00 00       	nop
     41e:	c2 cf       	rjmp	.-124    	; 0x3a4 <adjustSec+0x14>
     420:	e1 e1       	ldi	r30, 0x11	; 17
     422:	fa e7       	ldi	r31, 0x7A	; 122
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
		DONE = 1;
		_delay_ms(halfSec/4);
	}//while (!DONE)

}//adjustSec
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <ER_Byte_LCD>:
	//EW_Time();

	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	ER_Byte_LCD(0);
	ER_Byte_LCD(1);
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	00 d0       	rcall	.+0      	; 0x446 <ER_Byte_LCD+0xa>
     446:	1f 92       	push	r1
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	c8 01       	movw	r24, r16
     452:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     456:	4a e0       	ldi	r20, 0x0A	; 10
     458:	be 01       	movw	r22, r28
     45a:	6f 5f       	subi	r22, 0xFF	; 255
     45c:	7f 4f       	sbci	r23, 0xFF	; 255
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     46c:	2f e3       	ldi	r18, 0x3F	; 63
     46e:	8d e0       	ldi	r24, 0x0D	; 13
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	21 50       	subi	r18, 0x01	; 1
     474:	80 40       	sbci	r24, 0x00	; 0
     476:	90 40       	sbci	r25, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <ER_Byte_LCD+0x36>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <ER_Byte_LCD+0x40>
     47c:	00 00       	nop
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_blankChar>
     484:	0f 5f       	subi	r16, 0xFF	; 255
     486:	1f 4f       	sbci	r17, 0xFF	; 255
     488:	03 30       	cpi	r16, 0x03	; 3
     48a:	11 05       	cpc	r17, r1
     48c:	09 f7       	brne	.-62     	; 0x450 <ER_Byte_LCD+0x14>
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	08 95       	ret

0000049e <EW_Time>:
}//EWR_dht11

//-----------------------------------
void EW_Time()
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <EW_Time+0x6>
     4a4:	1f 92       	push	r1
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
	byte hours , minutes , seconds = 0;
     4aa:	1b 82       	std	Y+3, r1	; 0x03

	DS1307_GetTime(&hours, &minutes, &seconds);
     4ac:	ae 01       	movw	r20, r28
     4ae:	4d 5f       	subi	r20, 0xFD	; 253
     4b0:	5f 4f       	sbci	r21, 0xFF	; 255
     4b2:	be 01       	movw	r22, r28
     4b4:	6e 5f       	subi	r22, 0xFE	; 254
     4b6:	7f 4f       	sbci	r23, 0xFF	; 255
     4b8:	ce 01       	movw	r24, r28
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	0e 94 c7 00 	call	0x18e	; 0x18e <DS1307_GetTime>

	//eeprom_update_byte((uint8_t*)(addr++), i);

	eeprom_update_byte((uint8_t*)0, hours);
     4c0:	69 81       	ldd	r22, Y+1	; 0x01
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_update_byte>
     4ca:	87 ea       	ldi	r24, 0xA7	; 167
     4cc:	91 e6       	ldi	r25, 0x61	; 97
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <EW_Time+0x30>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <EW_Time+0x36>
     4d4:	00 00       	nop
	_delay_ms(100);
	eeprom_update_byte((uint8_t*)1, minutes);
     4d6:	6a 81       	ldd	r22, Y+2	; 0x02
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_update_byte>
     4e0:	87 ea       	ldi	r24, 0xA7	; 167
     4e2:	91 e6       	ldi	r25, 0x61	; 97
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <EW_Time+0x46>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <EW_Time+0x4c>
     4ea:	00 00       	nop
	_delay_ms(100);
	eeprom_update_byte((uint8_t*)2, seconds);
     4ec:	6b 81       	ldd	r22, Y+3	; 0x03
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_update_byte>
     4f6:	87 ea       	ldi	r24, 0xA7	; 167
     4f8:	91 e6       	ldi	r25, 0x61	; 97
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <EW_Time+0x5c>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <EW_Time+0x62>
     500:	00 00       	nop
	_delay_ms(100);
}//EW_Time
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <EWR_ds1307>:

//----------------------
void EWR_ds1307()
{
	prepareWakeUpandLCDHome();
     50e:	0e 94 96 07 	call	0xf2c	; 0xf2c <prepareWakeUpandLCDHome>
	EW_Time();
     512:	0e 94 4f 02 	call	0x49e	; 0x49e <EW_Time>

	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     51c:	84 e1       	ldi	r24, 0x14	; 20
     51e:	8a 95       	dec	r24
     520:	f1 f7       	brne	.-4      	; 0x51e <EWR_ds1307+0x10>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	ER_Byte_LCD(0);
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 1e 02 	call	0x43c	; 0x43c <ER_Byte_LCD>
     528:	08 95       	ret

0000052a <LCD_WriteDate>:
}//ShowDevices


//----------------------------------
void LCD_WriteDate()
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	00 d0       	rcall	.+0      	; 0x530 <LCD_WriteDate+0x6>
     530:	00 d0       	rcall	.+0      	; 0x532 <LCD_WriteDate+0x8>
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
	byte months, days, years;
	byte wkDays;

	DS1307_GetDate(&months,&days,&years);
     536:	ae 01       	movw	r20, r28
     538:	4d 5f       	subi	r20, 0xFD	; 253
     53a:	5f 4f       	sbci	r21, 0xFF	; 255
     53c:	be 01       	movw	r22, r28
     53e:	6e 5f       	subi	r22, 0xFE	; 254
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DS1307_GetDate>
	LCD_BCDDigits(months);
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_BCDDigits>
	//LCD_Char('/');
	lcd_write_character_4d('/');
     550:	8f e2       	ldi	r24, 0x2F	; 47
     552:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
	LCD_BCDDigits(days);
     556:	8a 81       	ldd	r24, Y+2	; 0x02
     558:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_BCDDigits>
	//LCD_Char('/');
	lcd_write_character_4d('/');
     55c:	8f e2       	ldi	r24, 0x2F	; 47
     55e:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
	LCD_BCDDigits(years);
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_BCDDigits>

	lcd_write_character_4d(' ');
     568:	80 e2       	ldi	r24, 0x20	; 32
     56a:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
	DS1307_GetWkDay(&wkDays);
     56e:	ce 01       	movw	r24, r28
     570:	04 96       	adiw	r24, 0x04	; 4
     572:	0e 94 11 01 	call	0x222	; 0x222 <DS1307_GetWkDay>
	LCD_BCDDigits(wkDays);
     576:	8c 81       	ldd	r24, Y+4	; 0x04
     578:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_BCDDigits>

}//LCD_WriteDate
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <LCD_WriteTime>:

//----------------------------------
void LCD_WriteTime()
{
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	00 d0       	rcall	.+0      	; 0x590 <LCD_WriteTime+0x6>
     590:	1f 92       	push	r1
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
	byte hours, minutes, seconds;
	DS1307_GetTime(&hours,&minutes,&seconds);
     596:	ae 01       	movw	r20, r28
     598:	4d 5f       	subi	r20, 0xFD	; 253
     59a:	5f 4f       	sbci	r21, 0xFF	; 255
     59c:	be 01       	movw	r22, r28
     59e:	6e 5f       	subi	r22, 0xFE	; 254
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	ce 01       	movw	r24, r28
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	0e 94 c7 00 	call	0x18e	; 0x18e <DS1307_GetTime>
	LCD_BCDDigits(hours);
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_BCDDigits>
	//LCD_Char(':');
	lcd_write_character_4d(':');
     5b0:	8a e3       	ldi	r24, 0x3A	; 58
     5b2:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>

	LCD_BCDDigits(minutes);
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_BCDDigits>
	//LCD_Char(':');
	lcd_write_character_4d(':');
     5bc:	8a e3       	ldi	r24, 0x3A	; 58
     5be:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>

	LCD_BCDDigits(seconds);
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_BCDDigits>
}//LCD_WriteTime
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <LCD_WriteTimeDate>:

//----------------------------------
void LCD_WriteTimeDate()
{
	//LCD_Line(0);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     5d4:	80 e8       	ldi	r24, 0x80	; 128
     5d6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	LCD_WriteTime();
     5da:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_WriteTime>
	LCD_blankChar(8);
     5de:	88 e0       	ldi	r24, 0x08	; 8
     5e0:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_blankChar>

	//LCD_Line(1);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     5e4:	80 ec       	ldi	r24, 0xC0	; 192
     5e6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	

	LCD_blankChar(8);
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_blankChar>
     5f0:	08 95       	ret

000005f2 <LCD_WriteTimeDateTempHumid>:

//----------------------------------
void LCD_WriteTimeDateTempHumid()
{
	//LCD_Line(0);
	getDHT();
     5f2:	0e 94 88 00 	call	0x110	; 0x110 <getDHT>
	//_delay_ms(1000);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     5f6:	80 e8       	ldi	r24, 0x80	; 128
     5f8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	LCD_WriteTime();
     5fc:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_WriteTime>
	LCD_blankChar(5);
     600:	85 e0       	ldi	r24, 0x05	; 5
     602:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strTemp);
     606:	8d e7       	ldi	r24, 0x7D	; 125
     608:	94 e0       	ldi	r25, 0x04	; 4
     60a:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
	//LCD_blankChar(1);
	lcd_write_character_4d('C');
     60e:	83 e4       	ldi	r24, 0x43	; 67
     610:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>

	//LCD_Line(1);
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     614:	80 ec       	ldi	r24, 0xC0	; 192
     616:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	LCD_WriteDate();
     61a:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_WriteDate>
	LCD_blankChar(2);
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_blankChar>
	lcd_write_string_4d((uint8_t *)strHumid);
     624:	89 e7       	ldi	r24, 0x79	; 121
     626:	94 e0       	ldi	r25, 0x04	; 4
     628:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
	//LCD_blankChar(1);
	//lcd_write_character_4d('%');
	lcd_write_character_4d(37);
     62c:	85 e2       	ldi	r24, 0x25	; 37
     62e:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
     632:	08 95       	ret

00000634 <I2C_Init>:
{
	I2C_Start(busAddr); // send bus address
	I2C_Write(deviceRegister); // first byte = device register address
	I2C_Write(data); // second byte = data for device register
	I2C_Stop();
}//I2C_WriteRegister
     634:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     638:	8d ef       	ldi	r24, 0xFD	; 253
     63a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     63e:	08 95       	ret

00000640 <I2C_Detect>:
     640:	94 ea       	ldi	r25, 0xA4	; 164
     642:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     646:	ec eb       	ldi	r30, 0xBC	; 188
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	90 81       	ld	r25, Z
     64c:	99 23       	and	r25, r25
     64e:	ec f7       	brge	.-6      	; 0x64a <I2C_Detect+0xa>
     650:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     654:	84 e8       	ldi	r24, 0x84	; 132
     656:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     65a:	ec eb       	ldi	r30, 0xBC	; 188
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	88 23       	and	r24, r24
     662:	ec f7       	brge	.-6      	; 0x65e <I2C_Detect+0x1e>
     664:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     668:	98 7f       	andi	r25, 0xF8	; 248
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	98 31       	cpi	r25, 0x18	; 24
     66e:	09 f0       	breq	.+2      	; 0x672 <I2C_Detect+0x32>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret

00000674 <I2C_Write>:
     674:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     678:	84 e8       	ldi	r24, 0x84	; 132
     67a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     67e:	ec eb       	ldi	r30, 0xBC	; 188
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	88 23       	and	r24, r24
     686:	ec f7       	brge	.-6      	; 0x682 <I2C_Write+0xe>
     688:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     68c:	98 7f       	andi	r25, 0xF8	; 248
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	98 32       	cpi	r25, 0x28	; 40
     692:	09 f4       	brne	.+2      	; 0x696 <I2C_Write+0x22>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	08 95       	ret

00000698 <I2C_ReadNACK>:
     698:	84 e8       	ldi	r24, 0x84	; 132
     69a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     69e:	ec eb       	ldi	r30, 0xBC	; 188
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	88 23       	and	r24, r24
     6a6:	ec f7       	brge	.-6      	; 0x6a2 <I2C_ReadNACK+0xa>
     6a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6ac:	08 95       	ret

000006ae <I2C_ReadRegister>:

//----------------------------------
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	c8 2f       	mov	r28, r24
     6b4:	d6 2f       	mov	r29, r22
}//I2C_FindDevice

//----------------------------------
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
     6b6:	0e 94 20 03 	call	0x640	; 0x640 <I2C_Detect>
//----------------------------------
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
     6ba:	8d 2f       	mov	r24, r29
     6bc:	0e 94 3a 03 	call	0x674	; 0x674 <I2C_Write>
}//I2C_FindDevice

//----------------------------------
void I2C_Start (byte slaveAddr)
{
	I2C_Detect(slaveAddr);
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	8c 0f       	add	r24, r28
     6c4:	0e 94 20 03 	call	0x640	; 0x640 <I2C_Detect>
{
	byte data = 0;
	I2C_Start(busAddr); // send device address
	I2C_Write(deviceRegister); // set register pointer
	I2C_Start(busAddr+READ); // restart as a read operation
	data = I2C_ReadNACK(); // read the register data
     6c8:	0e 94 4c 03 	call	0x698	; 0x698 <I2C_ReadNACK>
	I2C_Stop(); // stop
     6cc:	94 e9       	ldi	r25, 0x94	; 148
     6ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	return data;
}//I2C_ReadRegister
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <__vector_3>:
    EIMSK = 0x00;

    TIMSK0 = 0x02; //timer 0 interrupt sources

    PRR = 0x00; //power controller
    sei(); //re-enable interrupts
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
     6fa:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <btcnt>
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	98 0f       	add	r25, r24
     702:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <btcnt>
     706:	80 fd       	sbrc	r24, 0
     708:	1a c0       	rjmp	.+52     	; 0x73e <__vector_3+0x66>
     70a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <pwrOn>
     70e:	81 11       	cpse	r24, r1
     710:	0d c0       	rjmp	.+26     	; 0x72c <__vector_3+0x54>
     712:	0e 94 7b 07 	call	0xef6	; 0xef6 <makePDasOutput>
     716:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lcd_init_4d>
     71a:	83 ec       	ldi	r24, 0xC3	; 195
     71c:	99 e0       	ldi	r25, 0x09	; 9
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <__vector_3+0x46>
     722:	00 c0       	rjmp	.+0      	; 0x724 <__vector_3+0x4c>
     724:	00 00       	nop
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <pwrOn>
     72c:	1c 99       	sbic	0x03, 4	; 3
     72e:	0e 94 ac 09 	call	0x1358	; 0x1358 <countButton>
     732:	8f e4       	ldi	r24, 0x4F	; 79
     734:	93 ec       	ldi	r25, 0xC3	; 195
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <__vector_3+0x5e>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <__vector_3+0x64>
     73c:	00 00       	nop
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	bf 91       	pop	r27
     744:	af 91       	pop	r26
     746:	9f 91       	pop	r25
     748:	8f 91       	pop	r24
     74a:	7f 91       	pop	r23
     74c:	6f 91       	pop	r22
     74e:	5f 91       	pop	r21
     750:	4f 91       	pop	r20
     752:	3f 91       	pop	r19
     754:	2f 91       	pop	r18
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <initINT>:
     760:	f8 94       	cli
     762:	e8 e6       	ldi	r30, 0x68	; 104
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	81 60       	ori	r24, 0x01	; 1
     76a:	80 83       	st	Z, r24
     76c:	eb e6       	ldi	r30, 0x6B	; 107
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	80 61       	ori	r24, 0x10	; 16
     774:	80 83       	st	Z, r24
     776:	78 94       	sei
     778:	08 95       	ret

0000077a <proceedClock>:

//----------------------------------
void proceedClock()
{
    //WDT interrupt occurs every 8 seconds
    sec += 8;
     77a:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     77e:	88 5f       	subi	r24, 0xF8	; 248
     780:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sec>
    accumulatedSec += 8;
     784:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <accumulatedSec>
     788:	28 5f       	subi	r18, 0xF8	; 248
     78a:	20 93 6c 04 	sts	0x046C, r18	; 0x80046c <accumulatedSec>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
     78e:	8c 33       	cpi	r24, 0x3C	; 60
     790:	5c f0       	brlt	.+22     	; 0x7a8 <proceedClock+0x2e>
    {
        sec%=60;
        min++;
     792:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <min>
     796:	9f 5f       	subi	r25, 0xFF	; 255
     798:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <min>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
    {
        sec%=60;
     79c:	6c e3       	ldi	r22, 0x3C	; 60
     79e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__divmodqi4>
        min++;
        sec += 2;
     7a2:	9e 5f       	subi	r25, 0xFE	; 254
     7a4:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <sec>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
     7a8:	2c 33       	cpi	r18, 0x3C	; 60
     7aa:	64 f0       	brlt	.+24     	; 0x7c4 <proceedClock+0x4a>
    {
        accumulatedSec%=60;
        accumulatedMin++;
     7ac:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <accumulatedMin>
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <accumulatedMin>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
    {
        accumulatedSec%=60;
     7b6:	82 2f       	mov	r24, r18
     7b8:	6c e3       	ldi	r22, 0x3C	; 60
     7ba:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__divmodqi4>
        accumulatedMin++;
        accumulatedSec += 2;
     7be:	9e 5f       	subi	r25, 0xFE	; 254
     7c0:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <accumulatedSec>
    }

    //real-time fetched from compiled time constant __TIME__
    //calculate hours
    if (min >= 60)
     7c4:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <min>
     7c8:	8c 33       	cpi	r24, 0x3C	; 60
     7ca:	54 f0       	brlt	.+20     	; 0x7e0 <proceedClock+0x66>
    {
        min%=60;
     7cc:	6c e3       	ldi	r22, 0x3C	; 60
     7ce:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__divmodqi4>
     7d2:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <min>
        hour++;
     7d6:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <hour>
    }
    //system run-time acculated time
    //calculate hours
    //if ((accumulatedMin == 60) && (hourlyAdjusted == 0))
    if (accumulatedMin == 60)
     7e0:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <accumulatedMin>
     7e4:	8c 33       	cpi	r24, 0x3C	; 60
     7e6:	61 f4       	brne	.+24     	; 0x800 <proceedClock+0x86>
    {
        // adjust time by experiments
        //hourlyAdjusted = 1;
        sec -= 20;
     7e8:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     7ec:	84 51       	subi	r24, 0x14	; 20
     7ee:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sec>
        accumulatedMin = 0;
     7f2:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <accumulatedMin>
        accumulatedHour++;
     7f6:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <accumulatedHour>
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <accumulatedHour>
    }
    /*
    if (accumulatedMin == 59)
        hourlyAdjusted = 0;
    */
    if (hour >= 24)
     800:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     804:	88 31       	cpi	r24, 0x18	; 24
     806:	04 f1       	brlt	.+64     	; 0x848 <proceedClock+0xce>
    {
        hour=0;
     808:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <hour>
        date++;
     80c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <date>
     810:	8f 5f       	subi	r24, 0xFF	; 255
     812:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <date>
        day++;
     816:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <day>
     81a:	8f 5f       	subi	r24, 0xFF	; 255
        if (day >= 7)
     81c:	87 30       	cpi	r24, 0x07	; 7
     81e:	1c f4       	brge	.+6      	; 0x826 <proceedClock+0xac>
    */
    if (hour >= 24)
    {
        hour=0;
        date++;
        day++;
     820:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <day>
     824:	11 c0       	rjmp	.+34     	; 0x848 <proceedClock+0xce>
        if (day >= 7)
            day %= 7;
     826:	93 e9       	ldi	r25, 0x93	; 147
     828:	89 02       	muls	r24, r25
     82a:	91 2d       	mov	r25, r1
     82c:	11 24       	eor	r1, r1
     82e:	98 0f       	add	r25, r24
     830:	95 95       	asr	r25
     832:	95 95       	asr	r25
     834:	87 fd       	sbrc	r24, 7
     836:	93 95       	inc	r25
     838:	29 2f       	mov	r18, r25
     83a:	22 0f       	add	r18, r18
     83c:	22 0f       	add	r18, r18
     83e:	22 0f       	add	r18, r18
     840:	29 1b       	sub	r18, r25
     842:	82 1b       	sub	r24, r18
     844:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <day>
    }
    switch (month)
     848:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <month>
     84c:	82 2f       	mov	r24, r18
     84e:	02 2e       	mov	r0, r18
     850:	00 0c       	add	r0, r0
     852:	99 0b       	sbc	r25, r25
     854:	aa 0b       	sbc	r26, r26
     856:	bb 0b       	sbc	r27, r27
     858:	fc 01       	movw	r30, r24
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	ec 30       	cpi	r30, 0x0C	; 12
     85e:	f1 05       	cpc	r31, r1
     860:	60 f4       	brcc	.+24     	; 0x87a <proceedClock+0x100>
     862:	ec 5c       	subi	r30, 0xCC	; 204
     864:	ff 4f       	sbci	r31, 0xFF	; 255
     866:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__tablejump2__>
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            monthEndDate = 31;
     86a:	8f e1       	ldi	r24, 0x1F	; 31
     86c:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <monthEndDate>
            break;
     870:	07 c0       	rjmp	.+14     	; 0x880 <proceedClock+0x106>
        case 2:
            monthEndDate = 28;
     872:	8c e1       	ldi	r24, 0x1C	; 28
     874:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <monthEndDate>
            break;
     878:	03 c0       	rjmp	.+6      	; 0x880 <proceedClock+0x106>
        default:
            monthEndDate = 30;
     87a:	8e e1       	ldi	r24, 0x1E	; 30
     87c:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <monthEndDate>
    }//switch (month)

    if (date > monthEndDate)
     880:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <date>
     884:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <monthEndDate>
     888:	89 17       	cp	r24, r25
     88a:	34 f4       	brge	.+12     	; 0x898 <proceedClock+0x11e>
    {
        date=1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <date>
        month++;
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <month>
    }

    if (month > 12)
     898:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <month>
     89c:	8d 30       	cpi	r24, 0x0D	; 13
     89e:	44 f0       	brlt	.+16     	; 0x8b0 <proceedClock+0x136>
    {
        month=1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
        year++;
     8a6:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <year>
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
     8ac:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <year>
     8b0:	08 95       	ret

000008b2 <__vector_6>:
	}//if ((btcnt++ % 2) == 0)
}//ISR(PCINT0_vect)

//-----------------------------------
ISR(WDT_vect)
{
     8b2:	1f 92       	push	r1
     8b4:	0f 92       	push	r0
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
    //PORTB |= _BV(PB4);
    proceedClock();
     8d4:	0e 94 bd 03 	call	0x77a	; 0x77a <proceedClock>
    lcd_dispWords(wd%MAXWORDCNT);
     8d8:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <wd>
     8dc:	9d ec       	ldi	r25, 0xCD	; 205
     8de:	89 9f       	mul	r24, r25
     8e0:	91 2d       	mov	r25, r1
     8e2:	11 24       	eor	r1, r1
     8e4:	96 95       	lsr	r25
     8e6:	96 95       	lsr	r25
     8e8:	96 95       	lsr	r25
     8ea:	99 0f       	add	r25, r25
     8ec:	29 2f       	mov	r18, r25
     8ee:	22 0f       	add	r18, r18
     8f0:	22 0f       	add	r18, r18
     8f2:	92 0f       	add	r25, r18
     8f4:	89 1b       	sub	r24, r25
     8f6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <lcd_dispWords>
    wd++;
     8fa:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <wd>
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <wd>
    //lcd_dispRealClock();
    //PORTB &= ~_BV(PB4);
}//ISR(WDT_vect)
     904:	ff 91       	pop	r31
     906:	ef 91       	pop	r30
     908:	bf 91       	pop	r27
     90a:	af 91       	pop	r26
     90c:	9f 91       	pop	r25
     90e:	8f 91       	pop	r24
     910:	7f 91       	pop	r23
     912:	6f 91       	pop	r22
     914:	5f 91       	pop	r21
     916:	4f 91       	pop	r20
     918:	3f 91       	pop	r19
     91a:	2f 91       	pop	r18
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~_BV(lcd_D7_bit);                        // assume that data is '0'
     926:	5f 98       	cbi	0x0b, 7	; 11
    if (theByte & 1<<7) lcd_D7_port |= _BV(lcd_D7_bit);     // make data = '1' if necessary
     928:	88 23       	and	r24, r24
     92a:	0c f4       	brge	.+2      	; 0x92e <lcd_write_4+0x8>
     92c:	5f 9a       	sbi	0x0b, 7	; 11

    lcd_D6_port &= ~_BV(lcd_D6_bit);                        // repeat for each data bit
     92e:	5e 98       	cbi	0x0b, 6	; 11
    if (theByte & 1<<6) lcd_D6_port |= _BV(lcd_D6_bit);
     930:	86 fd       	sbrc	r24, 6
     932:	5e 9a       	sbi	0x0b, 6	; 11

    lcd_D5_port &= ~_BV(lcd_D5_bit);
     934:	5d 98       	cbi	0x0b, 5	; 11
    if (theByte & 1<<5) lcd_D5_port |= _BV(lcd_D5_bit);
     936:	85 fd       	sbrc	r24, 5
     938:	5d 9a       	sbi	0x0b, 5	; 11

    lcd_D4_port &= ~_BV(lcd_D4_bit);
     93a:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<4) lcd_D4_port |= _BV(lcd_D4_bit);
     93c:	84 fd       	sbrc	r24, 4
     93e:	5c 9a       	sbi	0x0b, 4	; 11

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= _BV(lcd_E_bit);                   // Enable pin high
     940:	5b 9a       	sbi	0x0b, 3	; 11
     942:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~_BV(lcd_E_bit);                  // Enable pin low
     944:	5b 98       	cbi	0x0b, 3	; 11
     946:	00 00       	nop
     948:	08 95       	ret

0000094a <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     94a:	cf 93       	push	r28
     94c:	c8 2f       	mov	r28, r24
    lcd_RS_port |= _BV(lcd_RS_bit);                 // select the Data Register (RS high)
     94e:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     950:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     952:	0e 94 93 04 	call	0x926	; 0x926 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     956:	8c 2f       	mov	r24, r28
     958:	82 95       	swap	r24
     95a:	80 7f       	andi	r24, 0xF0	; 240
     95c:	0e 94 93 04 	call	0x926	; 0x926 <lcd_write_4>
}
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	00 d0       	rcall	.+0      	; 0x96e <lcd_write_string_4d+0xa>
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     974:	1a 82       	std	Y+2, r1	; 0x02
     976:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     978:	e9 81       	ldd	r30, Y+1	; 0x01
     97a:	fa 81       	ldd	r31, Y+2	; 0x02
     97c:	e8 0f       	add	r30, r24
     97e:	f9 1f       	adc	r31, r25
     980:	80 81       	ld	r24, Z
     982:	88 23       	and	r24, r24
     984:	b9 f0       	breq	.+46     	; 0x9b4 <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     986:	e9 81       	ldd	r30, Y+1	; 0x01
     988:	fa 81       	ldd	r31, Y+2	; 0x02
     98a:	e0 0f       	add	r30, r16
     98c:	f1 1f       	adc	r31, r17
     98e:	80 81       	ld	r24, Z
     990:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
        i++;
     994:	29 81       	ldd	r18, Y+1	; 0x01
     996:	3a 81       	ldd	r19, Y+2	; 0x02
     998:	2f 5f       	subi	r18, 0xFF	; 255
     99a:	3f 4f       	sbci	r19, 0xFF	; 255
     99c:	3a 83       	std	Y+2, r19	; 0x02
     99e:	29 83       	std	Y+1, r18	; 0x01
     9a0:	84 e1       	ldi	r24, 0x14	; 20
     9a2:	8a 95       	dec	r24
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <lcd_write_string_4d+0x3e>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     9a6:	e9 81       	ldd	r30, Y+1	; 0x01
     9a8:	fa 81       	ldd	r31, Y+2	; 0x02
     9aa:	e0 0f       	add	r30, r16
     9ac:	f1 1f       	adc	r31, r17
     9ae:	80 81       	ld	r24, Z
     9b0:	81 11       	cpse	r24, r1
     9b2:	e9 cf       	rjmp	.-46     	; 0x986 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(DELAY_INST);                              // 40 uS delay (min)
    }
}
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	08 95       	ret

000009c2 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     9c2:	cf 93       	push	r28
     9c4:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     9c6:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     9c8:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     9ca:	0e 94 93 04 	call	0x926	; 0x926 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     9ce:	8c 2f       	mov	r24, r28
     9d0:	82 95       	swap	r24
     9d2:	80 7f       	andi	r24, 0xF0	; 240
     9d4:	0e 94 93 04 	call	0x926	; 0x926 <lcd_write_4>
}
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9dc:	8f e0       	ldi	r24, 0x0F	; 15
     9de:	97 e2       	ldi	r25, 0x27	; 39
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <lcd_init_4d+0x4>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <lcd_init_4d+0xa>
     9e6:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     9e8:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     9ea:	5b 98       	cbi	0x0b, 3	; 11

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     9ec:	80 e3       	ldi	r24, 0x30	; 48
     9ee:	0e 94 93 04 	call	0x926	; 0x926 <lcd_write_4>
     9f2:	81 ee       	ldi	r24, 0xE1	; 225
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <lcd_init_4d+0x1a>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <lcd_init_4d+0x20>
     9fc:	00 00       	nop
    //_delay_ms(10);                                  // 4.1 mS delay (min)
	_delay_ms(5); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     9fe:	80 e3       	ldi	r24, 0x30	; 48
     a00:	0e 94 93 04 	call	0x926	; 0x926 <lcd_write_4>
     a04:	8f e2       	ldi	r24, 0x2F	; 47
     a06:	95 e7       	ldi	r25, 0x75	; 117
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <lcd_init_4d+0x2c>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <lcd_init_4d+0x32>
     a0e:	00 00       	nop
    //_delay_us(200);                                 // 100uS delay (min)
	_delay_ms(120); // insoo modifed (Jul 14, 2017)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     a10:	80 e3       	ldi	r24, 0x30	; 48
     a12:	0e 94 93 04 	call	0x926	; 0x926 <lcd_write_4>
     a16:	83 ec       	ldi	r24, 0xC3	; 195
     a18:	99 e0       	ldi	r25, 0x09	; 9
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <lcd_init_4d+0x3e>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <lcd_init_4d+0x44>
     a20:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     a22:	88 e2       	ldi	r24, 0x28	; 40
     a24:	0e 94 93 04 	call	0x926	; 0x926 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a28:	94 e1       	ldi	r25, 0x14	; 20
     a2a:	9a 95       	dec	r25
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <lcd_init_4d+0x4e>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     a2e:	88 e2       	ldi	r24, 0x28	; 40
     a30:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     a34:	84 e1       	ldi	r24, 0x14	; 20
     a36:	8a 95       	dec	r24
     a38:	f1 f7       	brne	.-4      	; 0xa36 <lcd_init_4d+0x5a>
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     a40:	94 e1       	ldi	r25, 0x14	; 20
     a42:	9a 95       	dec	r25
     a44:	f1 f7       	brne	.-4      	; 0xa42 <lcd_init_4d+0x66>
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a4c:	87 ee       	ldi	r24, 0xE7	; 231
     a4e:	93 e0       	ldi	r25, 0x03	; 3
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <lcd_init_4d+0x74>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <lcd_init_4d+0x7a>
     a56:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a5e:	94 e1       	ldi	r25, 0x14	; 20
     a60:	9a 95       	dec	r25
     a62:	f1 f7       	brne	.-4      	; 0xa60 <lcd_init_4d+0x84>

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     a64:	8c e0       	ldi	r24, 0x0C	; 12
     a66:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     a6a:	84 e1       	ldi	r24, 0x14	; 20
     a6c:	8a 95       	dec	r24
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <lcd_init_4d+0x90>
     a70:	08 95       	ret

00000a72 <LCD_BCDDigits>:

	itoa(humidity,str, 10);
	lcd_write_string_4d((uint8_t *)str);
	lcd_write_string_4d((uint8_t *)"        ");
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
}//lcd_showDHT11
     a72:	cf 93       	push	r28
     a74:	c8 2f       	mov	r28, r24
     a76:	82 95       	swap	r24
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	80 5d       	subi	r24, 0xD0	; 208
     a7c:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
     a80:	8c 2f       	mov	r24, r28
     a82:	8f 70       	andi	r24, 0x0F	; 15
     a84:	80 5d       	subi	r24, 0xD0	; 208
     a86:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <turnOnLCDBacklight>:
     a8e:	28 98       	cbi	0x05, 0	; 5
     a90:	08 95       	ret

00000a92 <turnOffLCDBacklight>:
     a92:	28 9a       	sbi	0x05, 0	; 5
     a94:	08 95       	ret

00000a96 <LCD_blankChar>:
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	88 23       	and	r24, r24
     a9c:	41 f0       	breq	.+16     	; 0xaae <LCD_blankChar+0x18>
     a9e:	d8 2f       	mov	r29, r24
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	80 e2       	ldi	r24, 0x20	; 32
     aa4:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
     aa8:	cf 5f       	subi	r28, 0xFF	; 255
     aaa:	cd 13       	cpse	r28, r29
     aac:	fa cf       	rjmp	.-12     	; 0xaa2 <LCD_blankChar+0xc>
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <lcd_dispRealClock>:
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	6c 97       	sbiw	r28, 0x1c	; 28
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	80 e8       	ldi	r24, 0x80	; 128
     aca:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     ace:	84 e1       	ldi	r24, 0x14	; 20
     ad0:	8a 95       	dec	r24
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <lcd_dispRealClock+0x1c>
     ad4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <hour>
     ad8:	4a e0       	ldi	r20, 0x0A	; 10
     ada:	be 01       	movw	r22, r28
     adc:	69 5f       	subi	r22, 0xF9	; 249
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	08 2e       	mov	r0, r24
     ae2:	00 0c       	add	r0, r0
     ae4:	99 0b       	sbc	r25, r25
     ae6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     aea:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <min>
     aee:	4a e0       	ldi	r20, 0x0A	; 10
     af0:	be 01       	movw	r22, r28
     af2:	6c 5f       	subi	r22, 0xFC	; 252
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	08 2e       	mov	r0, r24
     af8:	00 0c       	add	r0, r0
     afa:	99 0b       	sbc	r25, r25
     afc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     b00:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <sec>
     b04:	4a e0       	ldi	r20, 0x0A	; 10
     b06:	be 01       	movw	r22, r28
     b08:	6f 5f       	subi	r22, 0xFF	; 255
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255
     b0c:	08 2e       	mov	r0, r24
     b0e:	00 0c       	add	r0, r0
     b10:	99 0b       	sbc	r25, r25
     b12:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     b16:	ce 01       	movw	r24, r28
     b18:	07 96       	adiw	r24, 0x07	; 7
     b1a:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     b1e:	88 e0       	ldi	r24, 0x08	; 8
     b20:	94 e0       	ldi	r25, 0x04	; 4
     b22:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     b26:	ce 01       	movw	r24, r28
     b28:	04 96       	adiw	r24, 0x04	; 4
     b2a:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     b2e:	88 e0       	ldi	r24, 0x08	; 8
     b30:	94 e0       	ldi	r25, 0x04	; 4
     b32:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     b3e:	86 ef       	ldi	r24, 0xF6	; 246
     b40:	93 e0       	ldi	r25, 0x03	; 3
     b42:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     b46:	84 e1       	ldi	r24, 0x14	; 20
     b48:	8a 95       	dec	r24
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <lcd_dispRealClock+0x94>
     b4c:	80 ec       	ldi	r24, 0xC0	; 192
     b4e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     b52:	84 e1       	ldi	r24, 0x14	; 20
     b54:	8a 95       	dec	r24
     b56:	f1 f7       	brne	.-4      	; 0xb54 <lcd_dispRealClock+0xa0>
     b58:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <year>
     b5c:	4a e0       	ldi	r20, 0x0A	; 10
     b5e:	be 01       	movw	r22, r28
     b60:	66 5f       	subi	r22, 0xF6	; 246
     b62:	7f 4f       	sbci	r23, 0xFF	; 255
     b64:	08 2e       	mov	r0, r24
     b66:	00 0c       	add	r0, r0
     b68:	99 0b       	sbc	r25, r25
     b6a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     b6e:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <month>
     b72:	4a e0       	ldi	r20, 0x0A	; 10
     b74:	be 01       	movw	r22, r28
     b76:	63 5f       	subi	r22, 0xF3	; 243
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	08 2e       	mov	r0, r24
     b7c:	00 0c       	add	r0, r0
     b7e:	99 0b       	sbc	r25, r25
     b80:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     b84:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <date>
     b88:	4a e0       	ldi	r20, 0x0A	; 10
     b8a:	be 01       	movw	r22, r28
     b8c:	60 5f       	subi	r22, 0xF0	; 240
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	08 2e       	mov	r0, r24
     b92:	00 0c       	add	r0, r0
     b94:	99 0b       	sbc	r25, r25
     b96:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     b9a:	ce 01       	movw	r24, r28
     b9c:	0a 96       	adiw	r24, 0x0a	; 10
     b9e:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	94 e0       	ldi	r25, 0x04	; 4
     ba6:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     baa:	ce 01       	movw	r24, r28
     bac:	0d 96       	adiw	r24, 0x0d	; 13
     bae:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     bba:	ce 01       	movw	r24, r28
     bbc:	40 96       	adiw	r24, 0x10	; 16
     bbe:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	94 e0       	ldi	r25, 0x04	; 4
     bc6:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     bca:	e0 91 6f 04 	lds	r30, 0x046F	; 0x80046f <day>
     bce:	8e 2f       	mov	r24, r30
     bd0:	ee 0f       	add	r30, r30
     bd2:	99 0b       	sbc	r25, r25
     bd4:	aa 0b       	sbc	r26, r26
     bd6:	bb 0b       	sbc	r27, r27
     bd8:	87 30       	cpi	r24, 0x07	; 7
     bda:	91 05       	cpc	r25, r1
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <lcd_dispRealClock+0x12c>
     bde:	43 c0       	rjmp	.+134    	; 0xc66 <lcd_dispRealClock+0x1b2>
     be0:	fc 01       	movw	r30, r24
     be2:	e0 5c       	subi	r30, 0xC0	; 192
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__tablejump2__>
     bea:	83 e5       	ldi	r24, 0x53	; 83
     bec:	95 e7       	ldi	r25, 0x75	; 117
     bee:	ae e6       	ldi	r26, 0x6E	; 110
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	8b 8b       	std	Y+19, r24	; 0x13
     bf4:	9c 8b       	std	Y+20, r25	; 0x14
     bf6:	ad 8b       	std	Y+21, r26	; 0x15
     bf8:	be 8b       	std	Y+22, r27	; 0x16
     bfa:	35 c0       	rjmp	.+106    	; 0xc66 <lcd_dispRealClock+0x1b2>
     bfc:	8d e4       	ldi	r24, 0x4D	; 77
     bfe:	9f e6       	ldi	r25, 0x6F	; 111
     c00:	ae e6       	ldi	r26, 0x6E	; 110
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	8b 8b       	std	Y+19, r24	; 0x13
     c06:	9c 8b       	std	Y+20, r25	; 0x14
     c08:	ad 8b       	std	Y+21, r26	; 0x15
     c0a:	be 8b       	std	Y+22, r27	; 0x16
     c0c:	2c c0       	rjmp	.+88     	; 0xc66 <lcd_dispRealClock+0x1b2>
     c0e:	84 e5       	ldi	r24, 0x54	; 84
     c10:	95 e7       	ldi	r25, 0x75	; 117
     c12:	a5 e6       	ldi	r26, 0x65	; 101
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	8b 8b       	std	Y+19, r24	; 0x13
     c18:	9c 8b       	std	Y+20, r25	; 0x14
     c1a:	ad 8b       	std	Y+21, r26	; 0x15
     c1c:	be 8b       	std	Y+22, r27	; 0x16
     c1e:	23 c0       	rjmp	.+70     	; 0xc66 <lcd_dispRealClock+0x1b2>
     c20:	87 e5       	ldi	r24, 0x57	; 87
     c22:	95 e6       	ldi	r25, 0x65	; 101
     c24:	a4 e6       	ldi	r26, 0x64	; 100
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	8b 8b       	std	Y+19, r24	; 0x13
     c2a:	9c 8b       	std	Y+20, r25	; 0x14
     c2c:	ad 8b       	std	Y+21, r26	; 0x15
     c2e:	be 8b       	std	Y+22, r27	; 0x16
     c30:	1a c0       	rjmp	.+52     	; 0xc66 <lcd_dispRealClock+0x1b2>
     c32:	84 e5       	ldi	r24, 0x54	; 84
     c34:	98 e6       	ldi	r25, 0x68	; 104
     c36:	a5 e7       	ldi	r26, 0x75	; 117
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	8b 8b       	std	Y+19, r24	; 0x13
     c3c:	9c 8b       	std	Y+20, r25	; 0x14
     c3e:	ad 8b       	std	Y+21, r26	; 0x15
     c40:	be 8b       	std	Y+22, r27	; 0x16
     c42:	11 c0       	rjmp	.+34     	; 0xc66 <lcd_dispRealClock+0x1b2>
     c44:	86 e4       	ldi	r24, 0x46	; 70
     c46:	92 e7       	ldi	r25, 0x72	; 114
     c48:	a9 e6       	ldi	r26, 0x69	; 105
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	8b 8b       	std	Y+19, r24	; 0x13
     c4e:	9c 8b       	std	Y+20, r25	; 0x14
     c50:	ad 8b       	std	Y+21, r26	; 0x15
     c52:	be 8b       	std	Y+22, r27	; 0x16
     c54:	08 c0       	rjmp	.+16     	; 0xc66 <lcd_dispRealClock+0x1b2>
     c56:	83 e5       	ldi	r24, 0x53	; 83
     c58:	91 e6       	ldi	r25, 0x61	; 97
     c5a:	a4 e7       	ldi	r26, 0x74	; 116
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	8b 8b       	std	Y+19, r24	; 0x13
     c60:	9c 8b       	std	Y+20, r25	; 0x14
     c62:	ad 8b       	std	Y+21, r26	; 0x15
     c64:	be 8b       	std	Y+22, r27	; 0x16
     c66:	ce 01       	movw	r24, r28
     c68:	43 96       	adiw	r24, 0x13	; 19
     c6a:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     c6e:	8c ef       	ldi	r24, 0xFC	; 252
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     c76:	84 e1       	ldi	r24, 0x14	; 20
     c78:	8a 95       	dec	r24
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <lcd_dispRealClock+0x1c4>
     c7c:	6c 96       	adiw	r28, 0x1c	; 28
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <lcd_dispAccumulatedTime>:
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	29 97       	sbiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	80 ec       	ldi	r24, 0xC0	; 192
     ca4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     ca8:	84 e1       	ldi	r24, 0x14	; 20
     caa:	8a 95       	dec	r24
     cac:	f1 f7       	brne	.-4      	; 0xcaa <lcd_dispAccumulatedTime+0x1c>
     cae:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <accumulatedHour>
     cb2:	4a e0       	ldi	r20, 0x0A	; 10
     cb4:	be 01       	movw	r22, r28
     cb6:	69 5f       	subi	r22, 0xF9	; 249
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	08 2e       	mov	r0, r24
     cbc:	00 0c       	add	r0, r0
     cbe:	99 0b       	sbc	r25, r25
     cc0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     cc4:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <accumulatedMin>
     cc8:	4a e0       	ldi	r20, 0x0A	; 10
     cca:	be 01       	movw	r22, r28
     ccc:	6c 5f       	subi	r22, 0xFC	; 252
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	08 2e       	mov	r0, r24
     cd2:	00 0c       	add	r0, r0
     cd4:	99 0b       	sbc	r25, r25
     cd6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     cda:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <accumulatedSec>
     cde:	4a e0       	ldi	r20, 0x0A	; 10
     ce0:	be 01       	movw	r22, r28
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	08 2e       	mov	r0, r24
     ce8:	00 0c       	add	r0, r0
     cea:	99 0b       	sbc	r25, r25
     cec:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__itoa_ncheck>
     cf0:	ce 01       	movw	r24, r28
     cf2:	07 96       	adiw	r24, 0x07	; 7
     cf4:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	94 e0       	ldi	r25, 0x04	; 4
     cfc:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     d00:	ce 01       	movw	r24, r28
     d02:	04 96       	adiw	r24, 0x04	; 4
     d04:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	94 e0       	ldi	r25, 0x04	; 4
     d0c:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     d18:	8a ef       	ldi	r24, 0xFA	; 250
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
     d20:	84 e1       	ldi	r24, 0x14	; 20
     d22:	8a 95       	dec	r24
     d24:	f1 f7       	brne	.-4      	; 0xd22 <lcd_dispAccumulatedTime+0x94>
     d26:	29 96       	adiw	r28, 0x09	; 9
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <lcd_dispProgInfo>:

//-----------------------------------
void lcd_dispProgInfo()
{
	// set cursor to start of first line
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     d38:	80 e8       	ldi	r24, 0x80	; 128
     d3a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     d3e:	24 e1       	ldi	r18, 0x14	; 20
     d40:	2a 95       	dec	r18
     d42:	f1 f7       	brne	.-4      	; 0xd40 <lcd_dispProgInfo+0x8>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	// display the first line of information
	lcd_write_string_4d(program_author);
     d44:	8f e3       	ldi	r24, 0x3F	; 63
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>

	// set cursor to start of second line
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     d4c:	80 ec       	ldi	r24, 0xC0	; 192
     d4e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     d52:	84 e1       	ldi	r24, 0x14	; 20
     d54:	8a 95       	dec	r24
     d56:	f1 f7       	brne	.-4      	; 0xd54 <lcd_dispProgInfo+0x1c>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)

	// display the second line of information
	lcd_write_string_4d(program_version);
     d58:	80 e3       	ldi	r24, 0x30	; 48
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d60:	9f e3       	ldi	r25, 0x3F	; 63
     d62:	2d e0       	ldi	r18, 0x0D	; 13
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	91 50       	subi	r25, 0x01	; 1
     d68:	20 40       	sbci	r18, 0x00	; 0
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <lcd_dispProgInfo+0x2e>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <lcd_dispProgInfo+0x38>
     d70:	00 00       	nop

	_delay_ms(1000);

	// set cursor to start of second line
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     d72:	80 ec       	ldi	r24, 0xC0	; 192
     d74:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d78:	94 e1       	ldi	r25, 0x14	; 20
     d7a:	9a 95       	dec	r25
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <lcd_dispProgInfo+0x42>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)

	// display the second line of information
	lcd_write_string_4d(program_date);
     d7e:	81 e2       	ldi	r24, 0x21	; 33
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d86:	2f e7       	ldi	r18, 0x7F	; 127
     d88:	8a e1       	ldi	r24, 0x1A	; 26
     d8a:	96 e0       	ldi	r25, 0x06	; 6
     d8c:	21 50       	subi	r18, 0x01	; 1
     d8e:	80 40       	sbci	r24, 0x00	; 0
     d90:	90 40       	sbci	r25, 0x00	; 0
     d92:	e1 f7       	brne	.-8      	; 0xd8c <lcd_dispProgInfo+0x54>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <lcd_dispProgInfo+0x5e>
     d96:	00 00       	nop
     d98:	08 95       	ret

00000d9a <lcd_dispMenu>:

//-----------------------------------
void lcd_dispMenu()
{
	// set cursor to start of first line
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     da0:	24 e1       	ldi	r18, 0x14	; 20
     da2:	2a 95       	dec	r18
     da4:	f1 f7       	brne	.-4      	; 0xda2 <lcd_dispMenu+0x8>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	// display the first line of information
	lcd_write_string_4d(menu_str1);
     da6:	80 e1       	ldi	r24, 0x10	; 16
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>

	// set cursor to start of second line
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     dae:	80 ec       	ldi	r24, 0xC0	; 192
     db0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     db4:	84 e1       	ldi	r24, 0x14	; 20
     db6:	8a 95       	dec	r24
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <lcd_dispMenu+0x1c>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)

	// display the second line of information
	lcd_write_string_4d(menu_str2);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dc2:	9f eb       	ldi	r25, 0xBF	; 191
     dc4:	27 e2       	ldi	r18, 0x27	; 39
     dc6:	89 e0       	ldi	r24, 0x09	; 9
     dc8:	91 50       	subi	r25, 0x01	; 1
     dca:	20 40       	sbci	r18, 0x00	; 0
     dcc:	80 40       	sbci	r24, 0x00	; 0
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <lcd_dispMenu+0x2e>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <lcd_dispMenu+0x38>
     dd2:	00 00       	nop
     dd4:	08 95       	ret

00000dd6 <lcd_dispWords>:

}//lcd_dispMenu

//-----------------------------------
void lcd_dispWords(uint8_t i)
{
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	e8 2e       	mov	r14, r24
	uint8_t n, wordLen;
	uint8_t *words0=0, *words1=0;
	//uint8_t str[3];
	// set cursor to start of first line
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dea:	24 e1       	ldi	r18, 0x14	; 20
     dec:	2a 95       	dec	r18
     dee:	f1 f7       	brne	.-4      	; 0xdec <lcd_dispWords+0x16>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)
	// display the first line of information
	//words = malloc(320);
	switch (min%4)
     df0:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <min>
     df4:	93 78       	andi	r25, 0x83	; 131
     df6:	1c f4       	brge	.+6      	; 0xdfe <lcd_dispWords+0x28>
     df8:	91 50       	subi	r25, 0x01	; 1
     dfa:	9c 6f       	ori	r25, 0xFC	; 252
     dfc:	9f 5f       	subi	r25, 0xFF	; 255
     dfe:	99 23       	and	r25, r25
     e00:	ec f0       	brlt	.+58     	; 0xe3c <lcd_dispWords+0x66>
     e02:	92 30       	cpi	r25, 0x02	; 2
     e04:	1c f0       	brlt	.+6      	; 0xe0c <lcd_dispWords+0x36>
     e06:	94 30       	cpi	r25, 0x04	; 4
     e08:	6c f0       	brlt	.+26     	; 0xe24 <lcd_dispWords+0x4e>
     e0a:	18 c0       	rjmp	.+48     	; 0xe3c <lcd_dispWords+0x66>
	{
		case 0:
		case 1:
		words0 = words000[i][0];
     e0c:	30 e2       	ldi	r19, 0x20	; 32
     e0e:	e3 9e       	mul	r14, r19
     e10:	c0 01       	movw	r24, r0
     e12:	11 24       	eor	r1, r1
     e14:	ec 01       	movw	r28, r24
     e16:	c2 57       	subi	r28, 0x72	; 114
     e18:	dd 4f       	sbci	r29, 0xFD	; 253
		words1 = words000[i][1];
     e1a:	9c 01       	movw	r18, r24
     e1c:	22 56       	subi	r18, 0x62	; 98
     e1e:	3d 4f       	sbci	r19, 0xFD	; 253
     e20:	79 01       	movw	r14, r18
		break;
     e22:	10 c0       	rjmp	.+32     	; 0xe44 <lcd_dispWords+0x6e>
		case 2:
		case 3:
		words0 = words001[i][0];;
     e24:	30 e2       	ldi	r19, 0x20	; 32
     e26:	e3 9e       	mul	r14, r19
     e28:	c0 01       	movw	r24, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	ec 01       	movw	r28, r24
     e2e:	c2 5b       	subi	r28, 0xB2	; 178
     e30:	de 4f       	sbci	r29, 0xFE	; 254
		words1 = words001[i][1];
     e32:	9c 01       	movw	r18, r24
     e34:	22 5a       	subi	r18, 0xA2	; 162
     e36:	3e 4f       	sbci	r19, 0xFE	; 254
     e38:	79 01       	movw	r14, r18
		break;
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <lcd_dispWords+0x6e>

//-----------------------------------
void lcd_dispWords(uint8_t i)
{
	uint8_t n, wordLen;
	uint8_t *words0=0, *words1=0;
     e3c:	e1 2c       	mov	r14, r1
     e3e:	f1 2c       	mov	r15, r1
     e40:	c0 e0       	ldi	r28, 0x00	; 0
     e42:	d0 e0       	ldi	r29, 0x00	; 0
		words0 = words001[i][0];;
		words1 = words001[i][1];
		break;
	}
	//lcd_write_string_4d(words000[i][0]);
	lcd_write_string_4d(words0);
     e44:	ce 01       	movw	r24, r28
     e46:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
	//wordLen = strlen((char *)words000[i][0]);
	wordLen = strlen((char *)words0);
     e4a:	fe 01       	movw	r30, r28
     e4c:	01 90       	ld	r0, Z+
     e4e:	00 20       	and	r0, r0
     e50:	e9 f7       	brne	.-6      	; 0xe4c <lcd_dispWords+0x76>
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	ec 1b       	sub	r30, r28
     e56:	fd 0b       	sbc	r31, r29
	for (n=0; n<(LCD_MAXCOL-wordLen); n++)
     e58:	00 e1       	ldi	r16, 0x10	; 16
     e5a:	10 e0       	ldi	r17, 0x00	; 0
     e5c:	0e 1b       	sub	r16, r30
     e5e:	11 09       	sbc	r17, r1
     e60:	10 16       	cp	r1, r16
     e62:	11 06       	cpc	r1, r17
     e64:	54 f4       	brge	.+20     	; 0xe7a <lcd_dispWords+0xa4>
     e66:	c0 e0       	ldi	r28, 0x00	; 0
	lcd_write_character_4d((uint8_t)0x20);
     e68:	80 e2       	ldi	r24, 0x20	; 32
     e6a:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
	}
	//lcd_write_string_4d(words000[i][0]);
	lcd_write_string_4d(words0);
	//wordLen = strlen((char *)words000[i][0]);
	wordLen = strlen((char *)words0);
	for (n=0; n<(LCD_MAXCOL-wordLen); n++)
     e6e:	cf 5f       	subi	r28, 0xFF	; 255
     e70:	2c 2f       	mov	r18, r28
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	20 17       	cp	r18, r16
     e76:	31 07       	cpc	r19, r17
     e78:	bc f3       	brlt	.-18     	; 0xe68 <lcd_dispWords+0x92>
	lcd_write_character_4d((uint8_t)0x20);
	//lcd_write_string_4d(program_author);

	// set cursor to start of second line
	lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
     e7a:	80 ec       	ldi	r24, 0xC0	; 192
     e7c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <lcd_write_instruction_4d>
     e80:	34 e1       	ldi	r19, 0x14	; 20
     e82:	3a 95       	dec	r19
     e84:	f1 f7       	brne	.-4      	; 0xe82 <lcd_dispWords+0xac>
	_delay_us(DELAY_INST);                                  // 40 uS delay (min)

	// display the second line of information
	//lcd_write_string_4d(words000[i][1]);
	lcd_write_string_4d(words1);
     e86:	c7 01       	movw	r24, r14
     e88:	0e 94 b2 04 	call	0x964	; 0x964 <lcd_write_string_4d>
	//utoa(sizeof(words000[0]), str, 10); //32
	//utoa(sizeof(words), str, 10); //?
	//utoa(strlen(words000[i][0]), str, 10);
	//lcd_write_string_4d(str);
	//wordLen = strlen((char *)words000[i][1]);
	wordLen = strlen((char *)words1);
     e8c:	f7 01       	movw	r30, r14
     e8e:	01 90       	ld	r0, Z+
     e90:	00 20       	and	r0, r0
     e92:	e9 f7       	brne	.-6      	; 0xe8e <lcd_dispWords+0xb8>
     e94:	31 97       	sbiw	r30, 0x01	; 1
     e96:	ee 19       	sub	r30, r14
     e98:	ff 09       	sbc	r31, r15
	for (n=0; n<(LCD_MAXCOL-wordLen); n++)
     e9a:	00 e1       	ldi	r16, 0x10	; 16
     e9c:	10 e0       	ldi	r17, 0x00	; 0
     e9e:	0e 1b       	sub	r16, r30
     ea0:	11 09       	sbc	r17, r1
     ea2:	10 16       	cp	r1, r16
     ea4:	11 06       	cpc	r1, r17
     ea6:	54 f4       	brge	.+20     	; 0xebc <lcd_dispWords+0xe6>
     ea8:	c0 e0       	ldi	r28, 0x00	; 0
	lcd_write_character_4d((uint8_t)0x20);
     eaa:	80 e2       	ldi	r24, 0x20	; 32
     eac:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_write_character_4d>
	//utoa(sizeof(words), str, 10); //?
	//utoa(strlen(words000[i][0]), str, 10);
	//lcd_write_string_4d(str);
	//wordLen = strlen((char *)words000[i][1]);
	wordLen = strlen((char *)words1);
	for (n=0; n<(LCD_MAXCOL-wordLen); n++)
     eb0:	cf 5f       	subi	r28, 0xFF	; 255
     eb2:	8c 2f       	mov	r24, r28
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	80 17       	cp	r24, r16
     eb8:	91 07       	cpc	r25, r17
     eba:	bc f3       	brlt	.-18     	; 0xeaa <lcd_dispWords+0xd4>
	lcd_write_character_4d((uint8_t)0x20);
	//lcd_write_string_4d(program_date);

	//_delay_ms(2000);

}//lcd_dispWords
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	08 95       	ret

00000eca <main>:
//------------------------------------
int main()
{
	// configure MCU IO pins
	// implemented at "config.c"
    config();
     eca:	0e 94 7d 00 	call	0xfa	; 0xfa <config>
 
	// setup ISR
	// implemented at "intrpt.c"
    initINT();
     ece:	0e 94 b0 03 	call	0x760	; 0x760 <initINT>

	// setup ISR
	// implemented at "I2C.c"
	I2C_Init();
     ed2:	0e 94 1a 03 	call	0x634	; 0x634 <I2C_Init>

	// Before adding RTC, i get pseudo-real-time from system compile time
	// and check it as the start time of the system.
	// This is a legacy function.
	// implemented at "strFunc.c"
    parseCompileTime();
     ed6:	0e 94 c1 07 	call	0xf82	; 0xf82 <parseCompileTime>
	//LCD_dispReadyAndSleep(); 

    //lcd_dispRealClock();
	//lcd_dispProgInfo(); //LCD display program info
    // Use the Power Down sleep mode
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     eda:	83 b7       	in	r24, 0x33	; 51
     edc:	81 7f       	andi	r24, 0xF1	; 241
     ede:	84 60       	ori	r24, 0x04	; 4
     ee0:	83 bf       	out	0x33, r24	; 51
	//setTime2DS1307(0x04, 0x01, 0x24, 0x19, PM, 0x09, 0x28, 0x20 ); 

	//EEPROM write & read test of DHT11 info
	// implemented at "EEPROM.c"
	//EWR_dht11();
	EWR_ds1307();
     ee2:	0e 94 87 02 	call	0x50e	; 0x50e <EWR_ds1307>
	// endless loop
    while(1)
    {
      // go to sleep and wait for interrupt...
      sleep_mode();
     ee6:	83 b7       	in	r24, 0x33	; 51
     ee8:	81 60       	ori	r24, 0x01	; 1
     eea:	83 bf       	out	0x33, r24	; 51
     eec:	88 95       	sleep
     eee:	83 b7       	in	r24, 0x33	; 51
     ef0:	8e 7f       	andi	r24, 0xFE	; 254
     ef2:	83 bf       	out	0x33, r24	; 51
	  
	}
     ef4:	f8 cf       	rjmp	.-16     	; 0xee6 <main+0x1c>

00000ef6 <makePDasOutput>:
//by calling makePDasInput(). (added by Insoo: Jul 12, 2017)
void makePDasOutput()
{
	// configure the microprocessor pins for the data lines
	// 4 data lines - output
	lcd_D7_ddr |= _BV(lcd_D7_bit);
     ef6:	57 9a       	sbi	0x0a, 7	; 10
	lcd_D6_ddr |= _BV(lcd_D6_bit);
     ef8:	56 9a       	sbi	0x0a, 6	; 10
	lcd_D5_ddr |= _BV(lcd_D5_bit);
     efa:	55 9a       	sbi	0x0a, 5	; 10
	lcd_D4_ddr |= _BV(lcd_D4_bit);
     efc:	54 9a       	sbi	0x0a, 4	; 10

	// LCD backlight cathode pin (K) - Output
	lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
     efe:	20 9a       	sbi	0x04, 0	; 4

	// LCD VSS pin (Power Supply) - Output
	lcd_VDD_ddr |= _BV(lcd_VDD_bit);
     f00:	26 9a       	sbi	0x04, 6	; 4
	//turn on LCD power
	lcd_VDD_port |= _BV(lcd_VDD_bit);
     f02:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f04:	83 ec       	ldi	r24, 0xC3	; 195
     f06:	99 e0       	ldi	r25, 0x09	; 9
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <makePDasOutput+0x12>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <makePDasOutput+0x18>
     f0e:	00 00       	nop
	_delay_ms(10);

	// DS1307 Vcc pin (Power Supply) - output
	DS1307_VCC_ddr |= _BV(DS1307_VCC_bit);
     f10:	27 9a       	sbi	0x04, 7	; 4
	//turn on DS1307 power
	DS1307_VCC_port |= _BV(DS1307_VCC_bit);
     f12:	2f 9a       	sbi	0x05, 7	; 5
     f14:	83 ec       	ldi	r24, 0xC3	; 195
     f16:	99 e0       	ldi	r25, 0x09	; 9
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <makePDasOutput+0x22>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <makePDasOutput+0x28>
     f1e:	00 00       	nop
	_delay_ms(10);

	// DHT11 (temp & humid sensor) VCC pin (Power Supply) - Output
	//added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
     f20:	22 98       	cbi	0x04, 2	; 4
	//turn on DHT11 chip power
	DHT_VCC_port |= _BV(DHT_VCC_bit);
     f22:	2a 9a       	sbi	0x05, 2	; 5
	//Tactile switch - Input
	//tactile_Switch_ddr |= _BV(tactile_Switch_bit);

	// configure the microprocessor pins for the control lines
	// E line - output
	lcd_E_ddr |= _BV(lcd_E_bit);
     f24:	53 9a       	sbi	0x0a, 3	; 10
	// RS line - output
	lcd_RS_ddr |= _BV(lcd_RS_bit);
     f26:	52 9a       	sbi	0x0a, 2	; 10
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
     f28:	5a 98       	cbi	0x0b, 2	; 11
     f2a:	08 95       	ret

00000f2c <prepareWakeUpandLCDHome>:
 #include <util/delay.h>

//----------------------------------
void prepareWakeUpandLCDHome()
{
	makePDasOutput();
     f2c:	0e 94 7b 07 	call	0xef6	; 0xef6 <makePDasOutput>
	lcd_init_4d();
     f30:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lcd_init_4d>
     f34:	08 95       	ret

00000f36 <makePDasInput>:
void makePDasInput()
{

	// turn off four data lines
	// following four lines added by Insoo on Jul 15, 2017
	lcd_D7_port &= ~_BV(lcd_D7_bit);
     f36:	5f 98       	cbi	0x0b, 7	; 11
	lcd_D6_port &= ~_BV(lcd_D6_bit);
     f38:	5e 98       	cbi	0x0b, 6	; 11
	lcd_D5_port &= ~_BV(lcd_D5_bit);
     f3a:	5d 98       	cbi	0x0b, 5	; 11
	lcd_D4_port &= ~_BV(lcd_D4_bit);
     f3c:	5c 98       	cbi	0x0b, 4	; 11

	// configure the microprocessor pins for the data lines
	// 4 data lines - output, but make it input
	lcd_D7_ddr &= ~_BV(lcd_D7_bit);
     f3e:	57 98       	cbi	0x0a, 7	; 10
	lcd_D6_ddr &= ~_BV(lcd_D6_bit);
     f40:	56 98       	cbi	0x0a, 6	; 10
	lcd_D5_ddr &= ~_BV(lcd_D5_bit);
     f42:	55 98       	cbi	0x0a, 5	; 10
	lcd_D4_ddr &= ~_BV(lcd_D4_bit);
     f44:	54 98       	cbi	0x0a, 4	; 10

	// turn off backlight cathode(GND)
	// following one line added by Insoo on Jul 15, 2017
	lcd_Backlight_port = _BV(lcd_Backlight_bit);
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	85 b9       	out	0x05, r24	; 5
	// LCD backlight cathode pin (K) - output, but make it input
	lcd_Backlight_ddr &= ~_BV(lcd_Backlight_bit);
     f4a:	20 98       	cbi	0x04, 0	; 4

	// turn off DS1307
	DS1307_VCC_port &= ~_BV(DS1307_VCC_bit);
     f4c:	2f 98       	cbi	0x05, 7	; 5
	// then, DS1307 Vcc pin (Power Supply) - output, but make it input
	DS1307_VCC_ddr &= ~_BV(DS1307_VCC_bit);
     f4e:	27 98       	cbi	0x04, 7	; 4

	// DHT11 (temp & humid sensor) signal pin - Output/Input
	//turn off and
	DHT_SIG_port &= ~_BV(DHT_SIG_bit);
     f50:	29 98       	cbi	0x05, 1	; 5
	//make it input
	DHT_SIG_ddr &= ~_BV(DHT_SIG_bit);
     f52:	21 98       	cbi	0x04, 1	; 4
	DHT_SIG_port &= ~_BV(DHT_SIG_bit);
     f54:	29 98       	cbi	0x05, 1	; 5

	//turn off DHT11 chip power
	DHT_VCC_port &= ~_BV(DHT_VCC_bit);
     f56:	2a 98       	cbi	0x05, 2	; 5
	//make DHT_VCC as input, added by Insoo (Jul 14, 2017)
	DHT_VCC_ddr &= ~_BV(DHT_VCC_bit);
     f58:	22 98       	cbi	0x04, 2	; 4
	//Tactile switch - Input
	//tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);

	// turn off Enable pin
	// following one line added by Insoo on Jul 15, 2017
	lcd_E_port &= ~_BV(lcd_E_bit);
     f5a:	5b 98       	cbi	0x0b, 3	; 11
	// configure the microprocessor pins for the control lines
	// E line - output, but make it input
	lcd_E_ddr &= ~_BV(lcd_E_bit);
     f5c:	53 98       	cbi	0x0a, 3	; 10
	 
	// turn off RS
	lcd_RS_port &= ~_BV(lcd_RS_bit);
     f5e:	5a 98       	cbi	0x0b, 2	; 11
	// RS line - output, but make it input
	lcd_RS_ddr &= ~_BV(lcd_RS_bit);
     f60:	52 98       	cbi	0x0a, 2	; 10

	// turn off LCD power
	lcd_VDD_port &= ~_BV(lcd_VDD_bit);
     f62:	2e 98       	cbi	0x05, 6	; 5
	// then, LCD VSS pin (Power Supply) - output, but make it input
	lcd_VDD_ddr &= ~_BV(lcd_VDD_bit);
     f64:	26 98       	cbi	0x04, 6	; 4
     f66:	08 95       	ret

00000f68 <calcDay>:
}//parseCompileTime

//-----------------------------------
void calcDay()
{
    day = (date - 17)%7;
     f68:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <date>
     f6c:	08 2e       	mov	r0, r24
     f6e:	00 0c       	add	r0, r0
     f70:	99 0b       	sbc	r25, r25
     f72:	41 97       	sbiw	r24, 0x11	; 17
     f74:	67 e0       	ldi	r22, 0x07	; 7
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__divmodhi4>
     f7c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <day>
     f80:	08 95       	ret

00000f82 <parseCompileTime>:
extern uint8_t monthEndDate, day;
*/

//-----------------------------------
void parseCompileTime()
{
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	e4 97       	sbiw	r28, 0x34	; 52
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
    char sTime[4][3];
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
     f98:	68 e0       	ldi	r22, 0x08	; 8
     f9a:	74 e0       	ldi	r23, 0x04	; 4
     f9c:	81 e3       	ldi	r24, 0x31	; 49
     f9e:	94 e0       	ldi	r25, 0x04	; 4
     fa0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strtok>
     fa4:	bc 01       	movw	r22, r24
    while (*p)
     fa6:	fc 01       	movw	r30, r24
     fa8:	80 81       	ld	r24, Z
     faa:	88 23       	and	r24, r24
     fac:	e9 f0       	breq	.+58     	; 0xfe8 <parseCompileTime+0x66>
     fae:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sTime[n++], p);
     fb0:	11 e0       	ldi	r17, 0x01	; 1
     fb2:	12 0f       	add	r17, r18
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	c9 01       	movw	r24, r18
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	82 0f       	add	r24, r18
     fbe:	93 1f       	adc	r25, r19
     fc0:	21 e0       	ldi	r18, 0x01	; 1
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	2c 0f       	add	r18, r28
     fc6:	3d 1f       	adc	r19, r29
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	0e 94 ce 0a 	call	0x159c	; 0x159c <strcpy>
        p=strtok(NULL, ":");
     fd0:	68 e0       	ldi	r22, 0x08	; 8
     fd2:	74 e0       	ldi	r23, 0x04	; 4
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strtok>
     fdc:	bc 01       	movw	r22, r24
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
    {
        strcpy((char *)&sTime[n++], p);
     fde:	21 2f       	mov	r18, r17
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
     fe0:	fc 01       	movw	r30, r24
     fe2:	80 81       	ld	r24, Z
     fe4:	81 11       	cpse	r24, r1
     fe6:	e4 cf       	rjmp	.-56     	; 0xfb0 <parseCompileTime+0x2e>
    {
        strcpy((char *)&sTime[n++], p);
        p=strtok(NULL, ":");
    }
    hour=atoi(sTime[0]);
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
     ff0:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <hour>
    min=atoi(sTime[1]);
     ff4:	ce 01       	movw	r24, r28
     ff6:	04 96       	adiw	r24, 0x04	; 4
     ff8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
     ffc:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <min>
    //give some delay (8 seconds), to compile & upload by human click
    //sec=atoi(sTime[2]) + 8;

    //if you change power source to battery,
    //  you'd better put more time allowance
    sec=atoi(sTime[2]) + 15;
    1000:	ce 01       	movw	r24, r28
    1002:	07 96       	adiw	r24, 0x07	; 7
    1004:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
    1008:	81 5f       	subi	r24, 0xF1	; 241
    100a:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sec>
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	74 e0       	ldi	r23, 0x04	; 4
    1012:	8a ee       	ldi	r24, 0xEA	; 234
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strtok>
    101a:	bc 01       	movw	r22, r24
    while (*p)
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	19 f1       	breq	.+70     	; 0x106a <parseCompileTime+0xe8>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sDate[n++], p);
    1026:	11 e0       	ldi	r17, 0x01	; 1
    1028:	12 0f       	add	r17, r18
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	c9 01       	movw	r24, r18
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	2d e0       	ldi	r18, 0x0D	; 13
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	2c 0f       	add	r18, r28
    1048:	3d 1f       	adc	r19, r29
    104a:	82 0f       	add	r24, r18
    104c:	93 1f       	adc	r25, r19
    104e:	0e 94 ce 0a 	call	0x159c	; 0x159c <strcpy>
        p=strtok(NULL, " ");
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	74 e0       	ldi	r23, 0x04	; 4
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strtok>
    105e:	bc 01       	movw	r22, r24

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    {
        strcpy((char *)&sDate[n++], p);
    1060:	21 2f       	mov	r18, r17
    sec=atoi(sTime[2]) + 15;
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    1062:	fc 01       	movw	r30, r24
    1064:	80 81       	ld	r24, Z
    1066:	81 11       	cpse	r24, r1
    1068:	de cf       	rjmp	.-68     	; 0x1026 <parseCompileTime+0xa4>
    {
        strcpy((char *)&sDate[n++], p);
        p=strtok(NULL, " ");
    }

    if ( strcmp(sDate[0], "Jan") == 0 )
    106a:	6a e3       	ldi	r22, 0x3A	; 58
    106c:	74 e0       	ldi	r23, 0x04	; 4
    106e:	ce 01       	movw	r24, r28
    1070:	0d 96       	adiw	r24, 0x0d	; 13
    1072:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    1076:	89 2b       	or	r24, r25
    1078:	21 f4       	brne	.+8      	; 0x1082 <parseCompileTime+0x100>
        month = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1080:	83 c0       	rjmp	.+262    	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Feb") == 0 )
    1082:	6e e3       	ldi	r22, 0x3E	; 62
    1084:	74 e0       	ldi	r23, 0x04	; 4
    1086:	ce 01       	movw	r24, r28
    1088:	0d 96       	adiw	r24, 0x0d	; 13
    108a:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    108e:	89 2b       	or	r24, r25
    1090:	21 f4       	brne	.+8      	; 0x109a <parseCompileTime+0x118>
        month = 2;
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1098:	77 c0       	rjmp	.+238    	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Mar") == 0 )
    109a:	62 e4       	ldi	r22, 0x42	; 66
    109c:	74 e0       	ldi	r23, 0x04	; 4
    109e:	ce 01       	movw	r24, r28
    10a0:	0d 96       	adiw	r24, 0x0d	; 13
    10a2:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    10a6:	89 2b       	or	r24, r25
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <parseCompileTime+0x130>
        month = 3;
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    10b0:	6b c0       	rjmp	.+214    	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Apr") == 0 )
    10b2:	66 e4       	ldi	r22, 0x46	; 70
    10b4:	74 e0       	ldi	r23, 0x04	; 4
    10b6:	ce 01       	movw	r24, r28
    10b8:	0d 96       	adiw	r24, 0x0d	; 13
    10ba:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    10be:	89 2b       	or	r24, r25
    10c0:	21 f4       	brne	.+8      	; 0x10ca <parseCompileTime+0x148>
        month = 4;
    10c2:	84 e0       	ldi	r24, 0x04	; 4
    10c4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    10c8:	5f c0       	rjmp	.+190    	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "May") == 0 )
    10ca:	6a e4       	ldi	r22, 0x4A	; 74
    10cc:	74 e0       	ldi	r23, 0x04	; 4
    10ce:	ce 01       	movw	r24, r28
    10d0:	0d 96       	adiw	r24, 0x0d	; 13
    10d2:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    10d6:	89 2b       	or	r24, r25
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <parseCompileTime+0x160>
        month = 5;
    10da:	85 e0       	ldi	r24, 0x05	; 5
    10dc:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    10e0:	53 c0       	rjmp	.+166    	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jun") == 0 )
    10e2:	6e e4       	ldi	r22, 0x4E	; 78
    10e4:	74 e0       	ldi	r23, 0x04	; 4
    10e6:	ce 01       	movw	r24, r28
    10e8:	0d 96       	adiw	r24, 0x0d	; 13
    10ea:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    10ee:	89 2b       	or	r24, r25
    10f0:	21 f4       	brne	.+8      	; 0x10fa <parseCompileTime+0x178>
        month = 6;
    10f2:	86 e0       	ldi	r24, 0x06	; 6
    10f4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    10f8:	47 c0       	rjmp	.+142    	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jul") == 0 )
    10fa:	62 e5       	ldi	r22, 0x52	; 82
    10fc:	74 e0       	ldi	r23, 0x04	; 4
    10fe:	ce 01       	movw	r24, r28
    1100:	0d 96       	adiw	r24, 0x0d	; 13
    1102:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    1106:	89 2b       	or	r24, r25
    1108:	21 f4       	brne	.+8      	; 0x1112 <parseCompileTime+0x190>
        month = 7;
    110a:	87 e0       	ldi	r24, 0x07	; 7
    110c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1110:	3b c0       	rjmp	.+118    	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Aug") == 0 )
    1112:	66 e5       	ldi	r22, 0x56	; 86
    1114:	74 e0       	ldi	r23, 0x04	; 4
    1116:	ce 01       	movw	r24, r28
    1118:	0d 96       	adiw	r24, 0x0d	; 13
    111a:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    111e:	89 2b       	or	r24, r25
    1120:	21 f4       	brne	.+8      	; 0x112a <parseCompileTime+0x1a8>
        month = 8;
    1122:	88 e0       	ldi	r24, 0x08	; 8
    1124:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1128:	2f c0       	rjmp	.+94     	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Sep") == 0 )
    112a:	6a e5       	ldi	r22, 0x5A	; 90
    112c:	74 e0       	ldi	r23, 0x04	; 4
    112e:	ce 01       	movw	r24, r28
    1130:	0d 96       	adiw	r24, 0x0d	; 13
    1132:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    1136:	89 2b       	or	r24, r25
    1138:	21 f4       	brne	.+8      	; 0x1142 <parseCompileTime+0x1c0>
        month = 9;
    113a:	89 e0       	ldi	r24, 0x09	; 9
    113c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1140:	23 c0       	rjmp	.+70     	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Oct") == 0 )
    1142:	6e e5       	ldi	r22, 0x5E	; 94
    1144:	74 e0       	ldi	r23, 0x04	; 4
    1146:	ce 01       	movw	r24, r28
    1148:	0d 96       	adiw	r24, 0x0d	; 13
    114a:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    114e:	89 2b       	or	r24, r25
    1150:	21 f4       	brne	.+8      	; 0x115a <parseCompileTime+0x1d8>
        month = 10;
    1152:	8a e0       	ldi	r24, 0x0A	; 10
    1154:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1158:	17 c0       	rjmp	.+46     	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Nov") == 0 )
    115a:	62 e6       	ldi	r22, 0x62	; 98
    115c:	74 e0       	ldi	r23, 0x04	; 4
    115e:	ce 01       	movw	r24, r28
    1160:	0d 96       	adiw	r24, 0x0d	; 13
    1162:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    1166:	89 2b       	or	r24, r25
    1168:	21 f4       	brne	.+8      	; 0x1172 <parseCompileTime+0x1f0>
        month = 11;
    116a:	8b e0       	ldi	r24, 0x0B	; 11
    116c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Dec") == 0 )
    1172:	66 e6       	ldi	r22, 0x66	; 102
    1174:	74 e0       	ldi	r23, 0x04	; 4
    1176:	ce 01       	movw	r24, r28
    1178:	0d 96       	adiw	r24, 0x0d	; 13
    117a:	0e 94 c5 0a 	call	0x158a	; 0x158a <strcmp>
    117e:	89 2b       	or	r24, r25
    1180:	19 f4       	brne	.+6      	; 0x1188 <parseCompileTime+0x206>
        month = 12;
    1182:	8c e0       	ldi	r24, 0x0C	; 12
    1184:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <month>

    date=atoi(sDate[1]);
    1188:	ce 01       	movw	r24, r28
    118a:	47 96       	adiw	r24, 0x17	; 23
    118c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
    1190:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <date>
    yearLong=atoi(sDate[2]);
    1194:	ce 01       	movw	r24, r28
    1196:	81 96       	adiw	r24, 0x21	; 33
    1198:	0e 94 a2 0a 	call	0x1544	; 0x1544 <atoi>
    119c:	ac 01       	movw	r20, r24
    year=yearLong%1000;
    119e:	9c 01       	movw	r18, r24
    11a0:	36 95       	lsr	r19
    11a2:	27 95       	ror	r18
    11a4:	36 95       	lsr	r19
    11a6:	27 95       	ror	r18
    11a8:	36 95       	lsr	r19
    11aa:	27 95       	ror	r18
    11ac:	a5 ec       	ldi	r26, 0xC5	; 197
    11ae:	b0 e2       	ldi	r27, 0x20	; 32
    11b0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__umulhisi3>
    11b4:	92 95       	swap	r25
    11b6:	82 95       	swap	r24
    11b8:	8f 70       	andi	r24, 0x0F	; 15
    11ba:	89 27       	eor	r24, r25
    11bc:	9f 70       	andi	r25, 0x0F	; 15
    11be:	89 27       	eor	r24, r25
    11c0:	68 ee       	ldi	r22, 0xE8	; 232
    11c2:	73 e0       	ldi	r23, 0x03	; 3
    11c4:	86 9f       	mul	r24, r22
    11c6:	90 01       	movw	r18, r0
    11c8:	87 9f       	mul	r24, r23
    11ca:	30 0d       	add	r19, r0
    11cc:	96 9f       	mul	r25, r22
    11ce:	30 0d       	add	r19, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	42 1b       	sub	r20, r18
    11d4:	53 0b       	sbc	r21, r19
    11d6:	40 93 72 04 	sts	0x0472, r20	; 0x800472 <year>

    calcDay();
    11da:	0e 94 b4 07 	call	0xf68	; 0xf68 <calcDay>
}//parseCompileTime
    11de:	e4 96       	adiw	r28, 0x34	; 52
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	08 95       	ret

000011f2 <tinudht_read>:
#define TINUDHT_RCV_DELAY 10
#define TINUDHT_RCV_LENGTH 2

// ----------------------------------------------------------------------------

uint8_t tinudht_read(TinuDHT *ptinudht, uint8_t dht_pin) {
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <tinudht_read+0xe>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <tinudht_read+0x10>
    1202:	1f 92       	push	r1
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	7c 01       	movw	r14, r24
	
	// Buffer to received data
	uint8_t data[5];
	// Empty the buffer
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    120a:	1d 82       	std	Y+5, r1	; 0x05
    120c:	1c 82       	std	Y+4, r1	; 0x04
    120e:	1b 82       	std	Y+3, r1	; 0x03
    1210:	1a 82       	std	Y+2, r1	; 0x02
    1212:	19 82       	std	Y+1, r1	; 0x01
//	for (uint8_t i=0; i< 5; i++) data[i] = 0;	// Another way to empty the data buffer.

	// Send request
	DDRB |= (1 << dht_pin);	// Set port as output
    1214:	84 b1       	in	r24, 0x04	; 4
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	06 2e       	mov	r0, r22
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <tinudht_read+0x30>
    121e:	44 0f       	add	r20, r20
    1220:	55 1f       	adc	r21, r21
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <tinudht_read+0x2c>
    1226:	84 2b       	or	r24, r20
    1228:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << dht_pin);	// Set to 0
    122a:	95 b1       	in	r25, 0x05	; 5
    122c:	24 2f       	mov	r18, r20
    122e:	20 95       	com	r18
    1230:	92 23       	and	r25, r18
    1232:	95 b9       	out	0x05, r25	; 5
    1234:	83 e9       	ldi	r24, 0x93	; 147
    1236:	91 e1       	ldi	r25, 0x11	; 17
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <tinudht_read+0x46>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <tinudht_read+0x4c>
    123e:	00 00       	nop
	_delay_ms(18);	// Wait 18 ms
	PORTB |= (1 << dht_pin);	// Set to 1
    1240:	95 b1       	in	r25, 0x05	; 5
    1242:	94 2b       	or	r25, r20
    1244:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1246:	9d e0       	ldi	r25, 0x0D	; 13
    1248:	9a 95       	dec	r25
    124a:	f1 f7       	brne	.-4      	; 0x1248 <tinudht_read+0x56>
    124c:	00 00       	nop
	_delay_us(40);	// Wait 40 us

	// Receive response
	DDRB &= ~(1 << dht_pin);	// Set port as input
    124e:	84 b1       	in	r24, 0x04	; 4
    1250:	82 23       	and	r24, r18
    1252:	84 b9       	out	0x04, r24	; 4

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	03 c0       	rjmp	.+6      	; 0x125e <tinudht_read+0x6c>
    1258:	81 50       	subi	r24, 0x01	; 1
		if (timeout-- == 0)
    125a:	09 f4       	brne	.+2      	; 0x125e <tinudht_read+0x6c>
    125c:	5a c0       	rjmp	.+180    	; 0x1312 <tinudht_read+0x120>

	uint8_t timeout;

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    125e:	23 b1       	in	r18, 0x03	; 3
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	24 23       	and	r18, r20
    1264:	35 23       	and	r19, r21
    1266:	23 2b       	or	r18, r19
    1268:	b9 f3       	breq	.-18     	; 0x1258 <tinudht_read+0x66>
    126a:	5d c0       	rjmp	.+186    	; 0x1326 <tinudht_read+0x134>
    126c:	21 50       	subi	r18, 0x01	; 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
    126e:	11 f4       	brne	.+4      	; 0x1274 <tinudht_read+0x82>
    1270:	52 c0       	rjmp	.+164    	; 0x1316 <tinudht_read+0x124>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    1272:	2f ef       	ldi	r18, 0xFF	; 255
    1274:	83 b1       	in	r24, 0x03	; 3
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	84 23       	and	r24, r20
    127a:	95 23       	and	r25, r21
    127c:	89 2b       	or	r24, r25
    127e:	b1 f7       	brne	.-20     	; 0x126c <tinudht_read+0x7a>
    1280:	88 e2       	ldi	r24, 0x28	; 40
    1282:	10 e0       	ldi	r17, 0x00	; 0
    1284:	a7 e0       	ldi	r26, 0x07	; 7
    1286:	03 c0       	rjmp	.+6      	; 0x128e <tinudht_read+0x9c>
    1288:	91 50       	subi	r25, 0x01	; 1
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
    128a:	31 f4       	brne	.+12     	; 0x1298 <tinudht_read+0xa6>
    128c:	46 c0       	rjmp	.+140    	; 0x131a <tinudht_read+0x128>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    128e:	b0 e0       	ldi	r27, 0x00	; 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	70 e0       	ldi	r23, 0x00	; 0
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
    1294:	07 e0       	ldi	r16, 0x07	; 7
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    1296:	9b 2f       	mov	r25, r27
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
    1298:	23 b1       	in	r18, 0x03	; 3
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	24 23       	and	r18, r20
    129e:	35 23       	and	r19, r21
    12a0:	23 2b       	or	r18, r19
    12a2:	91 f3       	breq	.-28     	; 0x1288 <tinudht_read+0x96>
    12a4:	9b 2f       	mov	r25, r27
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <tinudht_read+0xc2>
    12a8:	e3 e0       	ldi	r30, 0x03	; 3
    12aa:	ea 95       	dec	r30
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <tinudht_read+0xb8>
    12ae:	00 00       	nop

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
    12b0:	9f 5f       	subi	r25, 0xFF	; 255
    12b2:	a9 f1       	breq	.+106    	; 0x131e <tinudht_read+0x12c>
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;

		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
    12b4:	23 b1       	in	r18, 0x03	; 3
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	24 23       	and	r18, r20
    12ba:	35 23       	and	r19, r21
    12bc:	23 2b       	or	r18, r19
    12be:	a1 f7       	brne	.-24     	; 0x12a8 <tinudht_read+0xb6>
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
			}

		if (len >= TINUDHT_RCV_LENGTH) data[byte_index] |= (1 << bit_index);
    12c0:	92 30       	cpi	r25, 0x02	; 2
    12c2:	80 f0       	brcs	.+32     	; 0x12e4 <tinudht_read+0xf2>
    12c4:	e1 e0       	ldi	r30, 0x01	; 1
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	ec 0f       	add	r30, r28
    12ca:	fd 1f       	adc	r31, r29
    12cc:	e1 0f       	add	r30, r17
    12ce:	f1 1d       	adc	r31, r1
    12d0:	90 81       	ld	r25, Z
    12d2:	9b 01       	movw	r18, r22
    12d4:	0a 2e       	mov	r0, r26
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <tinudht_read+0xea>
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <tinudht_read+0xe6>
    12e0:	29 2b       	or	r18, r25
    12e2:	20 83       	st	Z, r18
		// delay =  9..29us, len = 2
		
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
    12e4:	a1 11       	cpse	r26, r1
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <tinudht_read+0xfc>
		{
			bit_index = 7;	// restart at MSB
			byte_index++;	// next byte!
    12e8:	1f 5f       	subi	r17, 0xFF	; 255
		// NOTE: The values of TINUDHT_RCV_DELAY and TINUDHT_RCV_LENGTH
		//       may need to be adjusted if the F_CPU changes.
		
		if (bit_index == 0)	// next byte?
		{
			bit_index = 7;	// restart at MSB
    12ea:	a0 2f       	mov	r26, r16
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <tinudht_read+0xfe>
			byte_index++;	// next byte!
		}
		else bit_index--;
    12ee:	a1 50       	subi	r26, 0x01	; 1
    12f0:	81 50       	subi	r24, 0x01	; 1
			return TINUDHT_ERROR_TIMEOUT;

	uint8_t bit_index = 7;
	uint8_t byte_index = 0;
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (uint8_t i = 0; i < 40; i++)
    12f2:	89 f6       	brne	.-94     	; 0x1296 <tinudht_read+0xa4>
	// DEBUGGING_STRING("DT:");
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
    12f4:	49 81       	ldd	r20, Y+1	; 0x01
    12f6:	2b 81       	ldd	r18, Y+3	; 0x03
    12f8:	92 2f       	mov	r25, r18
    12fa:	94 0f       	add	r25, r20
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	39 13       	cpse	r19, r25
    1300:	10 c0       	rjmp	.+32     	; 0x1322 <tinudht_read+0x130>
	// DEBUGGING_NUMDECP(data[4]);
	// DEBUGGING_NUMDECP(checksum);
	// DEBUGGING_STRING("\n\r");

	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	f7 01       	movw	r30, r14
    1306:	51 83       	std	Z+1, r21	; 0x01
    1308:	40 83       	st	Z, r20
	ptinudht->temperature = data[2]; 
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	33 83       	std	Z+3, r19	; 0x03
    130e:	22 83       	std	Z+2, r18	; 0x02

	return TINUDHT_OK;
    1310:	17 c0       	rjmp	.+46     	; 0x1340 <tinudht_read+0x14e>

	// Acknowledge
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
    1312:	8e ef       	ldi	r24, 0xFE	; 254
    1314:	15 c0       	rjmp	.+42     	; 0x1340 <tinudht_read+0x14e>
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
    1316:	8e ef       	ldi	r24, 0xFE	; 254
    1318:	13 c0       	rjmp	.+38     	; 0x1340 <tinudht_read+0x14e>
	{
		// Wait for start
		timeout = TINUDHT_RCV_TIMEOUT;
		while(bit_is_clear(PINB, dht_pin))	// Wait for 1
			if (timeout-- == 0)
				return TINUDHT_ERROR_TIMEOUT;
    131a:	8e ef       	ldi	r24, 0xFE	; 254
    131c:	11 c0       	rjmp	.+34     	; 0x1340 <tinudht_read+0x14e>
		// Determine the bit value
		uint8_t len = 0;
		while(bit_is_set(PINB, dht_pin)) {	// Wait for 0
			_delay_us(TINUDHT_RCV_DELAY);
			if (len++ == TINUDHT_RCV_TIMEOUT)
				return TINUDHT_ERROR_TIMEOUT;
    131e:	8e ef       	ldi	r24, 0xFE	; 254
    1320:	0f c0       	rjmp	.+30     	; 0x1340 <tinudht_read+0x14e>
	// DEBUGGING_NUMDECP(data[2]);
	// DEBUGGING_NUMDECP(data[3]);
	// DEBUGGING_STRING("\n\r");

	uint8_t checksum = data[0] + data[2];	// TODO: Fix this, does not work in border cases.
	if (data[4] != checksum) return TINUDHT_ERROR_CHECKSUM;
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	0d c0       	rjmp	.+26     	; 0x1340 <tinudht_read+0x14e>
	while(bit_is_clear(PINB, dht_pin))	// Wait for 1
		if (timeout-- == 0)
			return TINUDHT_ERROR_TIMEOUT;
	
	timeout = TINUDHT_RCV_TIMEOUT;
	while(bit_is_set(PINB, dht_pin))	// Wait for 0
    1326:	83 b1       	in	r24, 0x03	; 3
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <tinudht_read+0x13e>
    132c:	95 95       	asr	r25
    132e:	87 95       	ror	r24
    1330:	6a 95       	dec	r22
    1332:	e2 f7       	brpl	.-8      	; 0x132c <tinudht_read+0x13a>
    1334:	80 fd       	sbrc	r24, 0
    1336:	9d cf       	rjmp	.-198    	; 0x1272 <tinudht_read+0x80>
    1338:	88 e2       	ldi	r24, 0x28	; 40
    133a:	10 e0       	ldi	r17, 0x00	; 0
    133c:	a7 e0       	ldi	r26, 0x07	; 7
    133e:	a7 cf       	rjmp	.-178    	; 0x128e <tinudht_read+0x9c>
	// On DHT11 data[1],data[3] are always zero so not used.
	ptinudht->humidity = data[0]; 
	ptinudht->temperature = data[2]; 

	return TINUDHT_OK;
}//tinudht_read
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	08 95       	ret

00001358 <countButton>:

    uint8_t val;
    uint8_t DONE=0;


    loopCnt=0;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    prevLoop=0;
    135a:	30 e0       	ldi	r19, 0x00	; 0
#include <util/delay.h>

//-----------------------------------
void countButton()
{
    uint8_t menuCnt=0;
    135c:	20 e0       	ldi	r18, 0x00	; 0
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	40 e0       	ldi	r20, 0x00	; 0
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    1362:	52 e0       	ldi	r21, 0x02	; 2
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    {
        loopCnt++;
    1364:	8f 5f       	subi	r24, 0xFF	; 255
        curLoop = loopCnt;
        lapse = curLoop - prevLoop;
    1366:	98 2f       	mov	r25, r24
    1368:	93 1b       	sub	r25, r19

        //menuSelectInterval is
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
    136a:	93 30       	cpi	r25, 0x03	; 3
    136c:	18 f0       	brcs	.+6      	; 0x1374 <countButton+0x1c>
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
    136e:	21 11       	cpse	r18, r1
    1370:	8f c0       	rjmp	.+286    	; 0x1490 <countButton+0x138>
    1372:	79 c0       	rjmp	.+242    	; 0x1466 <countButton+0x10e>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    1374:	95 30       	cpi	r25, 0x05	; 5
    1376:	08 f4       	brcc	.+2      	; 0x137a <countButton+0x22>
    1378:	80 c0       	rjmp	.+256    	; 0x147a <countButton+0x122>
    137a:	22 23       	and	r18, r18
    137c:	09 f4       	brne	.+2      	; 0x1380 <countButton+0x28>
    137e:	70 c0       	rjmp	.+224    	; 0x1460 <countButton+0x108>
    1380:	7c c0       	rjmp	.+248    	; 0x147a <countButton+0x122>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1382:	1c 99       	sbic	0x03, 4	; 3
    1384:	10 c0       	rjmp	.+32     	; 0x13a6 <countButton+0x4e>
    1386:	94 2f       	mov	r25, r20
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <countButton+0x3c>
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
    138a:	95 2f       	mov	r25, r21
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <countButton+0x3c>

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    138e:	94 2f       	mov	r25, r20
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <countButton+0x3c>
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    1392:	96 2f       	mov	r25, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1394:	e3 e2       	ldi	r30, 0x23	; 35
    1396:	f4 ef       	ldi	r31, 0xF4	; 244
    1398:	31 97       	sbiw	r30, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <countButton+0x40>
    139c:	00 c0       	rjmp	.+0      	; 0x139e <countButton+0x46>
    139e:	00 00       	nop
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
      {
        // for debounce
        _delay_ms(halfSec/2);
        menuCnt++;
    13a0:	2f 5f       	subi	r18, 0xFF	; 255

        //Pressing the button, lap time calculation should be reset
        //to give 1 sec of time to choose menuCnt
        prevLoop = loopCnt;
    13a2:	38 2f       	mov	r19, r24
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <countButton+0x50>
    13a6:	94 2f       	mov	r25, r20
    13a8:	e1 e1       	ldi	r30, 0x11	; 17
    13aa:	fa e7       	ldi	r31, 0x7A	; 122
    13ac:	31 97       	sbiw	r30, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <countButton+0x54>
    13b0:	00 c0       	rjmp	.+0      	; 0x13b2 <countButton+0x5a>
    13b2:	00 00       	nop
    //Get menuCnt by counting the button press
    //If pressing the button within 1 second of interval between each press,
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    13b4:	99 23       	and	r25, r25
    13b6:	b1 f2       	breq	.-84     	; 0x1364 <countButton+0xc>

    //menuCnt has been set within 3sec of a PCINT occurence
    //  then, play WDT count for a corresponding alarm period.
    if (DONE)
    {
        if (DONE == 2)
    13b8:	92 30       	cpi	r25, 0x02	; 2
    13ba:	11 f4       	brne	.+4      	; 0x13c0 <countButton+0x68>
            menuCnt = prevMenuCnt;
    13bc:	20 91 82 04 	lds	r18, 0x0482	; 0x800482 <prevMenuCnt>
        //visual cue to notifiy user selected menuCnt
        //blinkLED(menuCnt);
        //_delay_ms(halfSec);
        //turnOnLCDpower();
        //lcd_dispON();
        prevMenuCnt = menuCnt;
    13c0:	20 93 82 04 	sts	0x0482, r18	; 0x800482 <prevMenuCnt>
        switch (menuCnt)
    13c4:	23 30       	cpi	r18, 0x03	; 3
    13c6:	91 f0       	breq	.+36     	; 0x13ec <countButton+0x94>
    13c8:	28 f4       	brcc	.+10     	; 0x13d4 <countButton+0x7c>
    13ca:	21 30       	cpi	r18, 0x01	; 1
    13cc:	49 f0       	breq	.+18     	; 0x13e0 <countButton+0x88>
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	51 f0       	breq	.+20     	; 0x13e6 <countButton+0x8e>
    13d2:	2f c0       	rjmp	.+94     	; 0x1432 <countButton+0xda>
    13d4:	25 30       	cpi	r18, 0x05	; 5
    13d6:	39 f1       	breq	.+78     	; 0x1426 <countButton+0xce>
    13d8:	e8 f0       	brcs	.+58     	; 0x1414 <countButton+0xbc>
    13da:	26 30       	cpi	r18, 0x06	; 6
    13dc:	39 f1       	breq	.+78     	; 0x142c <countButton+0xd4>
    13de:	29 c0       	rjmp	.+82     	; 0x1432 <countButton+0xda>
        {
            case 1:
                //lcd_dispWords();
                //lcd_dispRealClock();
				LCD_WriteTimeDateTempHumid();
    13e0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_WriteTimeDateTempHumid>
				//LCD_WriteTimeDate();
				//LCD_WriteTimeDateTempHumid();
                //_delay_ms(2000);
				//getDHT();
                break;
    13e4:	28 c0       	rjmp	.+80     	; 0x1436 <countButton+0xde>
            case 2:
				LCD_WriteTimeDate();
    13e6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteTimeDate>
                //_delay_ms(2000);
				//getDHT();
                //lcd_showDHT11();
                break;
    13ea:	25 c0       	rjmp	.+74     	; 0x1436 <countButton+0xde>
            case 3:
				makePDasOutput();
    13ec:	0e 94 7b 07 	call	0xef6	; 0xef6 <makePDasOutput>
				lcd_init_4d();
    13f0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lcd_init_4d>
                turnOnLCDBacklight();
    13f4:	0e 94 47 05 	call	0xa8e	; 0xa8e <turnOnLCDBacklight>
				LCD_WriteTimeDate();
    13f8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_WriteTimeDate>
    13fc:	ff eb       	ldi	r31, 0xBF	; 191
    13fe:	27 e2       	ldi	r18, 0x27	; 39
    1400:	89 e0       	ldi	r24, 0x09	; 9
    1402:	f1 50       	subi	r31, 0x01	; 1
    1404:	20 40       	sbci	r18, 0x00	; 0
    1406:	80 40       	sbci	r24, 0x00	; 0
    1408:	e1 f7       	brne	.-8      	; 0x1402 <countButton+0xaa>
    140a:	00 c0       	rjmp	.+0      	; 0x140c <countButton+0xb4>
    140c:	00 00       	nop
				_delay_ms(3000);
                turnOffLCDBacklight();
    140e:	0e 94 49 05 	call	0xa92	; 0xa92 <turnOffLCDBacklight>
                break;
    1412:	11 c0       	rjmp	.+34     	; 0x1436 <countButton+0xde>
            case 4:
                //adjustClock();
                adjustMin();
    1414:	0e 94 72 01 	call	0x2e4	; 0x2e4 <adjustMin>
                adjustHour();
    1418:	0e 94 1c 01 	call	0x238	; 0x238 <adjustHour>
                adjustSec();
    141c:	0e 94 c8 01 	call	0x390	; 0x390 <adjustSec>
                lcd_dispRealClock();
    1420:	0e 94 5a 05 	call	0xab4	; 0xab4 <lcd_dispRealClock>
                break;
    1424:	08 c0       	rjmp	.+16     	; 0x1436 <countButton+0xde>
            case 5:
                lcd_dispAccumulatedTime();
    1426:	0e 94 47 06 	call	0xc8e	; 0xc8e <lcd_dispAccumulatedTime>
                break;
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <countButton+0xde>
            case 6:
                lcd_dispProgInfo();
    142c:	0e 94 9c 06 	call	0xd38	; 0xd38 <lcd_dispProgInfo>
                break;
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <countButton+0xde>
            default:
                lcd_dispMenu();
    1432:	0e 94 cd 06 	call	0xd9a	; 0xd9a <lcd_dispMenu>
    1436:	9f e3       	ldi	r25, 0x3F	; 63
    1438:	e2 e4       	ldi	r30, 0x42	; 66
    143a:	ff e0       	ldi	r31, 0x0F	; 15
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	e0 40       	sbci	r30, 0x00	; 0
    1440:	f0 40       	sbci	r31, 0x00	; 0
    1442:	e1 f7       	brne	.-8      	; 0x143c <countButton+0xe4>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <countButton+0xee>
    1446:	00 00       	nop
                //getDHT();
        }//switch (menuCnt)

        _delay_ms(5000); //show time of menu result

		makePDasInput(); //make LCD in deep power save mode
    1448:	0e 94 9b 07 	call	0xf36	; 0xf36 <makePDasInput>
		pwrOn = 0;
    144c:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <pwrOn>
    1450:	08 95       	ret
    1452:	81 e1       	ldi	r24, 0x11	; 17
    1454:	9a e7       	ldi	r25, 0x7A	; 122
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <countButton+0xfe>
    145a:	00 c0       	rjmp	.+0      	; 0x145c <countButton+0x104>
    145c:	00 00       	nop
    145e:	ae cf       	rjmp	.-164    	; 0x13bc <countButton+0x64>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1460:	1c 99       	sbic	0x03, 4	; 3
    1462:	f7 cf       	rjmp	.-18     	; 0x1452 <countButton+0xfa>
    1464:	92 cf       	rjmp	.-220    	; 0x138a <countButton+0x32>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    1466:	95 30       	cpi	r25, 0x05	; 5
    1468:	d8 f7       	brcc	.-10     	; 0x1460 <countButton+0x108>
    146a:	8b cf       	rjmp	.-234    	; 0x1382 <countButton+0x2a>
    146c:	e1 e1       	ldi	r30, 0x11	; 17
    146e:	fa e7       	ldi	r31, 0x7A	; 122
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <countButton+0x118>
    1474:	00 c0       	rjmp	.+0      	; 0x1476 <countButton+0x11e>
    1476:	00 00       	nop
    1478:	75 cf       	rjmp	.-278    	; 0x1364 <countButton+0xc>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    147a:	1c 99       	sbic	0x03, 4	; 3
    147c:	f7 cf       	rjmp	.-18     	; 0x146c <countButton+0x114>
    147e:	87 cf       	rjmp	.-242    	; 0x138e <countButton+0x36>
    1480:	81 e1       	ldi	r24, 0x11	; 17
    1482:	9a e7       	ldi	r25, 0x7A	; 122
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <countButton+0x12c>
    1488:	00 c0       	rjmp	.+0      	; 0x148a <countButton+0x132>
    148a:	00 00       	nop
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
			// if selected something, then get out of menu selection while loop
            if (menuCnt != 0)
                DONE = 1;
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	94 cf       	rjmp	.-216    	; 0x13b8 <countButton+0x60>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    1490:	1c 99       	sbic	0x03, 4	; 3
    1492:	f6 cf       	rjmp	.-20     	; 0x1480 <countButton+0x128>
    1494:	7e cf       	rjmp	.-260    	; 0x1392 <countButton+0x3a>

00001496 <__divmodqi4>:
    1496:	87 fb       	bst	r24, 7
    1498:	08 2e       	mov	r0, r24
    149a:	06 26       	eor	r0, r22
    149c:	87 fd       	sbrc	r24, 7
    149e:	81 95       	neg	r24
    14a0:	67 fd       	sbrc	r22, 7
    14a2:	61 95       	neg	r22
    14a4:	0e 94 82 0a 	call	0x1504	; 0x1504 <__udivmodqi4>
    14a8:	0e f4       	brtc	.+2      	; 0x14ac <__divmodqi4_1>
    14aa:	91 95       	neg	r25

000014ac <__divmodqi4_1>:
    14ac:	07 fc       	sbrc	r0, 7
    14ae:	81 95       	neg	r24

000014b0 <__divmodqi4_exit>:
    14b0:	08 95       	ret

000014b2 <__divmodhi4>:
    14b2:	97 fb       	bst	r25, 7
    14b4:	07 2e       	mov	r0, r23
    14b6:	16 f4       	brtc	.+4      	; 0x14bc <__divmodhi4+0xa>
    14b8:	00 94       	com	r0
    14ba:	07 d0       	rcall	.+14     	; 0x14ca <__divmodhi4_neg1>
    14bc:	77 fd       	sbrc	r23, 7
    14be:	09 d0       	rcall	.+18     	; 0x14d2 <__divmodhi4_neg2>
    14c0:	0e 94 8e 0a 	call	0x151c	; 0x151c <__udivmodhi4>
    14c4:	07 fc       	sbrc	r0, 7
    14c6:	05 d0       	rcall	.+10     	; 0x14d2 <__divmodhi4_neg2>
    14c8:	3e f4       	brtc	.+14     	; 0x14d8 <__divmodhi4_exit>

000014ca <__divmodhi4_neg1>:
    14ca:	90 95       	com	r25
    14cc:	81 95       	neg	r24
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	08 95       	ret

000014d2 <__divmodhi4_neg2>:
    14d2:	70 95       	com	r23
    14d4:	61 95       	neg	r22
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255

000014d8 <__divmodhi4_exit>:
    14d8:	08 95       	ret

000014da <__tablejump2__>:
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	05 90       	lpm	r0, Z+
    14e0:	f4 91       	lpm	r31, Z
    14e2:	e0 2d       	mov	r30, r0
    14e4:	09 94       	ijmp

000014e6 <__umulhisi3>:
    14e6:	a2 9f       	mul	r26, r18
    14e8:	b0 01       	movw	r22, r0
    14ea:	b3 9f       	mul	r27, r19
    14ec:	c0 01       	movw	r24, r0
    14ee:	a3 9f       	mul	r26, r19
    14f0:	70 0d       	add	r23, r0
    14f2:	81 1d       	adc	r24, r1
    14f4:	11 24       	eor	r1, r1
    14f6:	91 1d       	adc	r25, r1
    14f8:	b2 9f       	mul	r27, r18
    14fa:	70 0d       	add	r23, r0
    14fc:	81 1d       	adc	r24, r1
    14fe:	11 24       	eor	r1, r1
    1500:	91 1d       	adc	r25, r1
    1502:	08 95       	ret

00001504 <__udivmodqi4>:
    1504:	99 1b       	sub	r25, r25
    1506:	79 e0       	ldi	r23, 0x09	; 9
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <__udivmodqi4_ep>

0000150a <__udivmodqi4_loop>:
    150a:	99 1f       	adc	r25, r25
    150c:	96 17       	cp	r25, r22
    150e:	08 f0       	brcs	.+2      	; 0x1512 <__udivmodqi4_ep>
    1510:	96 1b       	sub	r25, r22

00001512 <__udivmodqi4_ep>:
    1512:	88 1f       	adc	r24, r24
    1514:	7a 95       	dec	r23
    1516:	c9 f7       	brne	.-14     	; 0x150a <__udivmodqi4_loop>
    1518:	80 95       	com	r24
    151a:	08 95       	ret

0000151c <__udivmodhi4>:
    151c:	aa 1b       	sub	r26, r26
    151e:	bb 1b       	sub	r27, r27
    1520:	51 e1       	ldi	r21, 0x11	; 17
    1522:	07 c0       	rjmp	.+14     	; 0x1532 <__udivmodhi4_ep>

00001524 <__udivmodhi4_loop>:
    1524:	aa 1f       	adc	r26, r26
    1526:	bb 1f       	adc	r27, r27
    1528:	a6 17       	cp	r26, r22
    152a:	b7 07       	cpc	r27, r23
    152c:	10 f0       	brcs	.+4      	; 0x1532 <__udivmodhi4_ep>
    152e:	a6 1b       	sub	r26, r22
    1530:	b7 0b       	sbc	r27, r23

00001532 <__udivmodhi4_ep>:
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	5a 95       	dec	r21
    1538:	a9 f7       	brne	.-22     	; 0x1524 <__udivmodhi4_loop>
    153a:	80 95       	com	r24
    153c:	90 95       	com	r25
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	08 95       	ret

00001544 <atoi>:
    1544:	fc 01       	movw	r30, r24
    1546:	88 27       	eor	r24, r24
    1548:	99 27       	eor	r25, r25
    154a:	e8 94       	clt
    154c:	21 91       	ld	r18, Z+
    154e:	20 32       	cpi	r18, 0x20	; 32
    1550:	e9 f3       	breq	.-6      	; 0x154c <atoi+0x8>
    1552:	29 30       	cpi	r18, 0x09	; 9
    1554:	10 f0       	brcs	.+4      	; 0x155a <atoi+0x16>
    1556:	2e 30       	cpi	r18, 0x0E	; 14
    1558:	c8 f3       	brcs	.-14     	; 0x154c <atoi+0x8>
    155a:	2b 32       	cpi	r18, 0x2B	; 43
    155c:	41 f0       	breq	.+16     	; 0x156e <atoi+0x2a>
    155e:	2d 32       	cpi	r18, 0x2D	; 45
    1560:	39 f4       	brne	.+14     	; 0x1570 <atoi+0x2c>
    1562:	68 94       	set
    1564:	04 c0       	rjmp	.+8      	; 0x156e <atoi+0x2a>
    1566:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulhi_const_10>
    156a:	82 0f       	add	r24, r18
    156c:	91 1d       	adc	r25, r1
    156e:	21 91       	ld	r18, Z+
    1570:	20 53       	subi	r18, 0x30	; 48
    1572:	2a 30       	cpi	r18, 0x0A	; 10
    1574:	c0 f3       	brcs	.-16     	; 0x1566 <atoi+0x22>
    1576:	1e f4       	brtc	.+6      	; 0x157e <atoi+0x3a>
    1578:	90 95       	com	r25
    157a:	81 95       	neg	r24
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	08 95       	ret

00001580 <strtok>:
    1580:	4a e6       	ldi	r20, 0x6A	; 106
    1582:	54 e0       	ldi	r21, 0x04	; 4
    1584:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <strtok_r>
    1588:	08 95       	ret

0000158a <strcmp>:
    158a:	fb 01       	movw	r30, r22
    158c:	dc 01       	movw	r26, r24
    158e:	8d 91       	ld	r24, X+
    1590:	01 90       	ld	r0, Z+
    1592:	80 19       	sub	r24, r0
    1594:	01 10       	cpse	r0, r1
    1596:	d9 f3       	breq	.-10     	; 0x158e <strcmp+0x4>
    1598:	99 0b       	sbc	r25, r25
    159a:	08 95       	ret

0000159c <strcpy>:
    159c:	fb 01       	movw	r30, r22
    159e:	dc 01       	movw	r26, r24
    15a0:	01 90       	ld	r0, Z+
    15a2:	0d 92       	st	X+, r0
    15a4:	00 20       	and	r0, r0
    15a6:	e1 f7       	brne	.-8      	; 0x15a0 <strcpy+0x4>
    15a8:	08 95       	ret

000015aa <strtok_r>:
    15aa:	fa 01       	movw	r30, r20
    15ac:	a1 91       	ld	r26, Z+
    15ae:	b0 81       	ld	r27, Z
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	19 f4       	brne	.+6      	; 0x15ba <strtok_r+0x10>
    15b4:	10 97       	sbiw	r26, 0x00	; 0
    15b6:	e1 f0       	breq	.+56     	; 0x15f0 <strtok_r+0x46>
    15b8:	cd 01       	movw	r24, r26
    15ba:	dc 01       	movw	r26, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0d 90       	ld	r0, X+
    15c0:	00 20       	and	r0, r0
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <strtok_r+0x1e>
    15c4:	c0 01       	movw	r24, r0
    15c6:	13 c0       	rjmp	.+38     	; 0x15ee <strtok_r+0x44>
    15c8:	fb 01       	movw	r30, r22
    15ca:	21 91       	ld	r18, Z+
    15cc:	22 23       	and	r18, r18
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <strtok_r+0x2c>
    15d0:	20 15       	cp	r18, r0
    15d2:	d9 f7       	brne	.-10     	; 0x15ca <strtok_r+0x20>
    15d4:	f3 cf       	rjmp	.-26     	; 0x15bc <strtok_r+0x12>
    15d6:	fb 01       	movw	r30, r22
    15d8:	21 91       	ld	r18, Z+
    15da:	20 15       	cp	r18, r0
    15dc:	19 f4       	brne	.+6      	; 0x15e4 <strtok_r+0x3a>
    15de:	1e 92       	st	-X, r1
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <strtok_r+0x46>
    15e4:	22 23       	and	r18, r18
    15e6:	c1 f7       	brne	.-16     	; 0x15d8 <strtok_r+0x2e>
    15e8:	0d 90       	ld	r0, X+
    15ea:	00 20       	and	r0, r0
    15ec:	a1 f7       	brne	.-24     	; 0x15d6 <strtok_r+0x2c>
    15ee:	d0 01       	movw	r26, r0
    15f0:	fa 01       	movw	r30, r20
    15f2:	a1 93       	st	Z+, r26
    15f4:	b0 83       	st	Z, r27
    15f6:	08 95       	ret

000015f8 <__itoa_ncheck>:
    15f8:	bb 27       	eor	r27, r27
    15fa:	4a 30       	cpi	r20, 0x0A	; 10
    15fc:	31 f4       	brne	.+12     	; 0x160a <__itoa_ncheck+0x12>
    15fe:	99 23       	and	r25, r25
    1600:	22 f4       	brpl	.+8      	; 0x160a <__itoa_ncheck+0x12>
    1602:	bd e2       	ldi	r27, 0x2D	; 45
    1604:	90 95       	com	r25
    1606:	81 95       	neg	r24
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__utoa_common>

0000160e <__mulhi_const_10>:
    160e:	7a e0       	ldi	r23, 0x0A	; 10
    1610:	97 9f       	mul	r25, r23
    1612:	90 2d       	mov	r25, r0
    1614:	87 9f       	mul	r24, r23
    1616:	80 2d       	mov	r24, r0
    1618:	91 0d       	add	r25, r1
    161a:	11 24       	eor	r1, r1
    161c:	08 95       	ret

0000161e <__utoa_ncheck>:
    161e:	bb 27       	eor	r27, r27

00001620 <__utoa_common>:
    1620:	fb 01       	movw	r30, r22
    1622:	55 27       	eor	r21, r21
    1624:	aa 27       	eor	r26, r26
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	aa 1f       	adc	r26, r26
    162c:	a4 17       	cp	r26, r20
    162e:	10 f0       	brcs	.+4      	; 0x1634 <__utoa_common+0x14>
    1630:	a4 1b       	sub	r26, r20
    1632:	83 95       	inc	r24
    1634:	50 51       	subi	r21, 0x10	; 16
    1636:	b9 f7       	brne	.-18     	; 0x1626 <__utoa_common+0x6>
    1638:	a0 5d       	subi	r26, 0xD0	; 208
    163a:	aa 33       	cpi	r26, 0x3A	; 58
    163c:	08 f0       	brcs	.+2      	; 0x1640 <__utoa_common+0x20>
    163e:	a9 5d       	subi	r26, 0xD9	; 217
    1640:	a1 93       	st	Z+, r26
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	79 f7       	brne	.-34     	; 0x1624 <__utoa_common+0x4>
    1646:	b1 11       	cpse	r27, r1
    1648:	b1 93       	st	Z+, r27
    164a:	11 92       	st	Z+, r1
    164c:	cb 01       	movw	r24, r22
    164e:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <strrev>

00001652 <strrev>:
    1652:	dc 01       	movw	r26, r24
    1654:	fc 01       	movw	r30, r24
    1656:	67 2f       	mov	r22, r23
    1658:	71 91       	ld	r23, Z+
    165a:	77 23       	and	r23, r23
    165c:	e1 f7       	brne	.-8      	; 0x1656 <strrev+0x4>
    165e:	32 97       	sbiw	r30, 0x02	; 2
    1660:	04 c0       	rjmp	.+8      	; 0x166a <strrev+0x18>
    1662:	7c 91       	ld	r23, X
    1664:	6d 93       	st	X+, r22
    1666:	70 83       	st	Z, r23
    1668:	62 91       	ld	r22, -Z
    166a:	ae 17       	cp	r26, r30
    166c:	bf 07       	cpc	r27, r31
    166e:	c8 f3       	brcs	.-14     	; 0x1662 <strrev+0x10>
    1670:	08 95       	ret

00001672 <eeprom_read_byte>:
    1672:	f9 99       	sbic	0x1f, 1	; 31
    1674:	fe cf       	rjmp	.-4      	; 0x1672 <eeprom_read_byte>
    1676:	92 bd       	out	0x22, r25	; 34
    1678:	81 bd       	out	0x21, r24	; 33
    167a:	f8 9a       	sbi	0x1f, 0	; 31
    167c:	99 27       	eor	r25, r25
    167e:	80 b5       	in	r24, 0x20	; 32
    1680:	08 95       	ret

00001682 <eeprom_update_byte>:
    1682:	26 2f       	mov	r18, r22

00001684 <eeprom_update_r18>:
    1684:	f9 99       	sbic	0x1f, 1	; 31
    1686:	fe cf       	rjmp	.-4      	; 0x1684 <eeprom_update_r18>
    1688:	92 bd       	out	0x22, r25	; 34
    168a:	81 bd       	out	0x21, r24	; 33
    168c:	f8 9a       	sbi	0x1f, 0	; 31
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	00 b4       	in	r0, 0x20	; 32
    1692:	02 16       	cp	r0, r18
    1694:	39 f0       	breq	.+14     	; 0x16a4 <eeprom_update_r18+0x20>
    1696:	1f ba       	out	0x1f, r1	; 31
    1698:	20 bd       	out	0x20, r18	; 32
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	fa 9a       	sbi	0x1f, 2	; 31
    16a0:	f9 9a       	sbi	0x1f, 1	; 31
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	08 95       	ret

000016a6 <_exit>:
    16a6:	f8 94       	cli

000016a8 <__stop_program>:
    16a8:	ff cf       	rjmp	.-2      	; 0x16a8 <__stop_program>
