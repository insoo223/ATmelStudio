
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000364  00800100  000010b6  0000114a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800464  00800464  000014ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bc6  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f22  00000000  00000000  000052de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001681  00000000  00000000  00006200  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000544  00000000  00000000  00007884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000902  00000000  00000000  00007dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002281  00000000  00000000  000086ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000a94b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_3>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	48 01       	movw	r8, r16
      6a:	4c 01       	movw	r8, r24
      6c:	48 01       	movw	r8, r16
      6e:	54 01       	movw	r10, r8
      70:	48 01       	movw	r8, r16
      72:	54 01       	movw	r10, r8
      74:	48 01       	movw	r8, r16
      76:	48 01       	movw	r8, r16
      78:	54 01       	movw	r10, r8
      7a:	48 01       	movw	r8, r16
      7c:	54 01       	movw	r10, r8
      7e:	48 01       	movw	r8, r16
      80:	ac 02       	muls	r26, r28
      82:	b5 02       	muls	r27, r21
      84:	be 02       	muls	r27, r30
      86:	c7 02       	muls	r28, r23
      88:	d0 02       	muls	r29, r16
      8a:	d9 02       	muls	r29, r25
      8c:	e2 02       	muls	r30, r18

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	14 e0       	ldi	r17, 0x04	; 4
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e6 eb       	ldi	r30, 0xB6	; 182
      a2:	f0 e1       	ldi	r31, 0x10	; 16
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a4 36       	cpi	r26, 0x64	; 100
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	24 e0       	ldi	r18, 0x04	; 4
      b2:	a4 e6       	ldi	r26, 0x64	; 100
      b4:	b4 e0       	ldi	r27, 0x04	; 4
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a4 37       	cpi	r26, 0x74	; 116
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <main>
      c4:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <__vector_3>:

    //reset watchdog
    wdt_reset();
    wdt_enable(WDTO_500MS);
    //Enable global interrupts
    sei();
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	2f 93       	push	r18
      d8:	3f 93       	push	r19
      da:	4f 93       	push	r20
      dc:	5f 93       	push	r21
      de:	6f 93       	push	r22
      e0:	7f 93       	push	r23
      e2:	8f 93       	push	r24
      e4:	9f 93       	push	r25
      e6:	af 93       	push	r26
      e8:	bf 93       	push	r27
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	ef 93       	push	r30
      f0:	ff 93       	push	r31
      f2:	1c 9b       	sbis	0x03, 4	; 3
      f4:	0a c0       	rjmp	.+20     	; 0x10a <__vector_3+0x3e>
      f6:	cb e6       	ldi	r28, 0x6B	; 107
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	88 81       	ld	r24, Y
      fc:	8f 7e       	andi	r24, 0xEF	; 239
      fe:	88 83       	st	Y, r24
     100:	0e 94 de 06 	call	0xdbc	; 0xdbc <countButton>
     104:	88 81       	ld	r24, Y
     106:	80 61       	ori	r24, 0x10	; 16
     108:	88 83       	st	Y, r24
     10a:	8f e4       	ldi	r24, 0x4F	; 79
     10c:	93 ec       	ldi	r25, 0xC3	; 195
     10e:	01 97       	sbiw	r24, 0x01	; 1
     110:	f1 f7       	brne	.-4      	; 0x10e <__vector_3+0x42>
     112:	00 c0       	rjmp	.+0      	; 0x114 <__vector_3+0x48>
     114:	00 00       	nop
     116:	ff 91       	pop	r31
     118:	ef 91       	pop	r30
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	bf 91       	pop	r27
     120:	af 91       	pop	r26
     122:	9f 91       	pop	r25
     124:	8f 91       	pop	r24
     126:	7f 91       	pop	r23
     128:	6f 91       	pop	r22
     12a:	5f 91       	pop	r21
     12c:	4f 91       	pop	r20
     12e:	3f 91       	pop	r19
     130:	2f 91       	pop	r18
     132:	0f 90       	pop	r0
     134:	0f be       	out	0x3f, r0	; 63
     136:	0f 90       	pop	r0
     138:	1f 90       	pop	r1
     13a:	18 95       	reti

0000013c <check_wdt>:
http://elegantcircuits.com/2014/10/14/introduction-to-the-avr-watchdog-timer/
*/
void check_wdt(void)
{
    // If a reset was caused by the Watchdog Timer...
    if(MCUSR & _BV(WDRF))
     13c:	04 b6       	in	r0, 0x34	; 52
     13e:	03 fe       	sbrs	r0, 3
     140:	09 c0       	rjmp	.+18     	; 0x154 <check_wdt+0x18>
    {
        // Clear the WDT reset flag
        MCUSR &= ~_BV(WDRF);
     142:	84 b7       	in	r24, 0x34	; 52
     144:	87 7f       	andi	r24, 0xF7	; 247
     146:	84 bf       	out	0x34, r24	; 52
        // Enable the WD Change Bit
        WDTCSR |= (_BV(WDCE) | _BV(WDE));
     148:	e0 e6       	ldi	r30, 0x60	; 96
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	88 61       	ori	r24, 0x18	; 24
     150:	80 83       	st	Z, r24
        // Disable the WDT
        WDTCSR = 0x00;
     152:	10 82       	st	Z, r1
     154:	08 95       	ret

00000156 <setup_wdt>:

void setup_wdt(void){
// Set up Watch Dog Timer for Inactivity
    // Enable the WD Change Bit
    // Enable WDT interrupt
    WDTCSR |= _BV(WDCE) | _BV(WDE);
     156:	e0 e6       	ldi	r30, 0x60	; 96
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	88 61       	ori	r24, 0x18	; 24
     15e:	80 83       	st	Z, r24

    // Set Timeout to ~8 seconds
    WDTCSR = _BV(WDIE) | _BV(WDP3) | _BV(WDP0); // 8s
     160:	81 e6       	ldi	r24, 0x61	; 97
     162:	80 83       	st	Z, r24
     164:	08 95       	ret

00000166 <initINT>:
    sei();
}//WDT_Init

void initINT()
{
    cli();
     166:	f8 94       	cli
    //PCMSK |= _BV(startPin);
	/**
	 * Pin Change Interrupt enable on PCINT6 (PB6)
	 */
    //For PCINT7-0, DS: Ch 12.2.4
	PCICR |= _BV(PCIE0);
     168:	e8 e6       	ldi	r30, 0x68	; 104
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	81 60       	ori	r24, 0x01	; 1
     170:	80 83       	st	Z, r24
	//For PCINT7-0, DS: Ch 12.2.8
	//PCMSK0 |= _BV(PCINT4);
	PCMSK0 |= _BV(tactile_Switch_bit);
     172:	eb e6       	ldi	r30, 0x6B	; 107
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	80 61       	ori	r24, 0x10	; 16
     17a:	80 83       	st	Z, r24



    //**** WDT interrupt setting
    check_wdt();
     17c:	0e 94 9e 00 	call	0x13c	; 0x13c <check_wdt>
    setup_wdt();
     180:	0e 94 ab 00 	call	0x156	; 0x156 <setup_wdt>
    //WDTCSR = _BV(WDIE) | _BV(WDP2) | _BV(WDP0); // 0.5s


    //wdt_reset();
    //enalbe global interrupt
    sei();
     184:	78 94       	sei
     186:	08 95       	ret

00000188 <init_devices>:
    //WDTCSR =   _BV(WDIE) | _BV(WDP2);
}//setup_wdt

void init_devices(void){
    //stop errant interrupts until set up
    cli(); //disable all interrupts
     188:	f8 94       	cli

    //timer0_init();

    MCUCR = 0x00;
     18a:	15 be       	out	0x35, r1	; 53
    EICRA = 0x00; //extended ext ints
     18c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    EIMSK = 0x00;
     190:	1d ba       	out	0x1d, r1	; 29

    TIMSK0 = 0x02; //timer 0 interrupt sources
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>

    PRR = 0x00; //power controller
     198:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
    sei(); //re-enable interrupts
     19c:	78 94       	sei
     19e:	08 95       	ret

000001a0 <proceedClock>:
}

void proceedClock()
{
    //WDT interrupt occurs every 8 seconds
    sec += 8;
     1a0:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <sec>
     1a4:	88 5f       	subi	r24, 0xF8	; 248
     1a6:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <sec>
    accumulatedSec += 8;
     1aa:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <accumulatedSec>
     1ae:	28 5f       	subi	r18, 0xF8	; 248
     1b0:	20 93 66 04 	sts	0x0466, r18	; 0x800466 <accumulatedSec>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
     1b4:	8c 33       	cpi	r24, 0x3C	; 60
     1b6:	5c f0       	brlt	.+22     	; 0x1ce <proceedClock+0x2e>
    {
        sec%=60;
        min++;
     1b8:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <min>
     1bc:	9f 5f       	subi	r25, 0xFF	; 255
     1be:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <min>
        sec += 2;
     1c2:	6c e3       	ldi	r22, 0x3C	; 60
     1c4:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divmodqi4>
     1c8:	9e 5f       	subi	r25, 0xFE	; 254
     1ca:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <sec>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
     1ce:	2c 33       	cpi	r18, 0x3C	; 60
     1d0:	64 f0       	brlt	.+24     	; 0x1ea <proceedClock+0x4a>
    {
        accumulatedSec%=60;
        accumulatedMin++;
     1d2:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <accumulatedMin>
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <accumulatedMin>
        accumulatedSec += 2;
     1dc:	82 2f       	mov	r24, r18
     1de:	6c e3       	ldi	r22, 0x3C	; 60
     1e0:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divmodqi4>
     1e4:	9e 5f       	subi	r25, 0xFE	; 254
     1e6:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <accumulatedSec>
    }

    //real-time fetched from compiled time constant __TIME__
    //calculate hours
    if (min >= 60)
     1ea:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <min>
     1ee:	8c 33       	cpi	r24, 0x3C	; 60
     1f0:	54 f0       	brlt	.+20     	; 0x206 <proceedClock+0x66>
    {
        min%=60;
     1f2:	6c e3       	ldi	r22, 0x3C	; 60
     1f4:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divmodqi4>
     1f8:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <min>
        hour++;
     1fc:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <hour>
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <hour>
    }
    //system run-time acculated time
    //calculate hours
    //if ((accumulatedMin == 60) && (hourlyAdjusted == 0))
    if (accumulatedMin == 60)
     206:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <accumulatedMin>
     20a:	8c 33       	cpi	r24, 0x3C	; 60
     20c:	61 f4       	brne	.+24     	; 0x226 <proceedClock+0x86>
    {
        // adjust time by experiments
        //hourlyAdjusted = 1;
        sec -= 20;
     20e:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <sec>
     212:	84 51       	subi	r24, 0x14	; 20
     214:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <sec>
        accumulatedMin = 0;
     218:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <accumulatedMin>
        accumulatedHour++;
     21c:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <accumulatedHour>
     220:	8f 5f       	subi	r24, 0xFF	; 255
     222:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <accumulatedHour>
    }
    /*
    if (accumulatedMin == 59)
        hourlyAdjusted = 0;
    */
    if (hour >= 24)
     226:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <hour>
     22a:	88 31       	cpi	r24, 0x18	; 24
     22c:	04 f1       	brlt	.+64     	; 0x26e <proceedClock+0xce>
    {
        hour=0;
     22e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <hour>
        date++;
     232:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <date>
     236:	8f 5f       	subi	r24, 0xFF	; 255
     238:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <date>
        day++;
     23c:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <day>
     240:	8f 5f       	subi	r24, 0xFF	; 255
        if (day >= 7)
     242:	87 30       	cpi	r24, 0x07	; 7
     244:	1c f4       	brge	.+6      	; 0x24c <proceedClock+0xac>
    */
    if (hour >= 24)
    {
        hour=0;
        date++;
        day++;
     246:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <day>
     24a:	11 c0       	rjmp	.+34     	; 0x26e <proceedClock+0xce>
        if (day >= 7)
            day %= 7;
     24c:	93 e9       	ldi	r25, 0x93	; 147
     24e:	89 02       	muls	r24, r25
     250:	91 2d       	mov	r25, r1
     252:	11 24       	eor	r1, r1
     254:	98 0f       	add	r25, r24
     256:	95 95       	asr	r25
     258:	95 95       	asr	r25
     25a:	87 fd       	sbrc	r24, 7
     25c:	93 95       	inc	r25
     25e:	29 2f       	mov	r18, r25
     260:	22 0f       	add	r18, r18
     262:	22 0f       	add	r18, r18
     264:	22 0f       	add	r18, r18
     266:	29 1b       	sub	r18, r25
     268:	82 1b       	sub	r24, r18
     26a:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <day>
    }
    switch (month)
     26e:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <month>
     272:	82 2f       	mov	r24, r18
     274:	02 2e       	mov	r0, r18
     276:	00 0c       	add	r0, r0
     278:	99 0b       	sbc	r25, r25
     27a:	aa 0b       	sbc	r26, r26
     27c:	bb 0b       	sbc	r27, r27
     27e:	fc 01       	movw	r30, r24
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	ec 30       	cpi	r30, 0x0C	; 12
     284:	f1 05       	cpc	r31, r1
     286:	80 f4       	brcc	.+32     	; 0x2a8 <proceedClock+0x108>
     288:	ec 5c       	subi	r30, 0xCC	; 204
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__tablejump2__>
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            monthEndDate = 31;
     290:	8f e1       	ldi	r24, 0x1F	; 31
     292:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <monthEndDate>
            break;
     296:	0b c0       	rjmp	.+22     	; 0x2ae <proceedClock+0x10e>
        case 2:
            monthEndDate = 28;
     298:	8c e1       	ldi	r24, 0x1C	; 28
     29a:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <monthEndDate>
            break;
        default:
            monthEndDate = 30;
    }//switch (month)

    if (date > monthEndDate)
     29e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <date>
     2a2:	8d 31       	cpi	r24, 0x1D	; 29
     2a4:	54 f4       	brge	.+20     	; 0x2ba <proceedClock+0x11a>
     2a6:	08 95       	ret
            break;
        case 2:
            monthEndDate = 28;
            break;
        default:
            monthEndDate = 30;
     2a8:	8e e1       	ldi	r24, 0x1E	; 30
     2aa:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <monthEndDate>
    }//switch (month)

    if (date > monthEndDate)
     2ae:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <date>
     2b2:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <monthEndDate>
     2b6:	89 17       	cp	r24, r25
     2b8:	34 f4       	brge	.+12     	; 0x2c6 <proceedClock+0x126>
    {
        date=1;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <date>
        month++;
     2c0:	2f 5f       	subi	r18, 0xFF	; 255
     2c2:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <month>
    }

    if (month > 12)
     2c6:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <month>
     2ca:	8d 30       	cpi	r24, 0x0D	; 13
     2cc:	44 f0       	brlt	.+16     	; 0x2de <proceedClock+0x13e>
    {
        month=1;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
        year++;
     2d4:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <year>
     2d8:	8f 5f       	subi	r24, 0xFF	; 255
     2da:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <year>
     2de:	08 95       	ret

000002e0 <__vector_6>:
	_delay_ms(200); // for debounce
}//ISR(PCINT0_vect)

//-----------------------------------
ISR(WDT_vect)
{
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	2f 93       	push	r18
     2ec:	3f 93       	push	r19
     2ee:	4f 93       	push	r20
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
    //PORTB |= _BV(PB4);
    proceedClock();
     302:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <proceedClock>
    lcd_dispWords(wd%MAXWORDCNT);
     306:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <wd>
     30a:	9d ec       	ldi	r25, 0xCD	; 205
     30c:	89 9f       	mul	r24, r25
     30e:	91 2d       	mov	r25, r1
     310:	11 24       	eor	r1, r1
     312:	96 95       	lsr	r25
     314:	96 95       	lsr	r25
     316:	96 95       	lsr	r25
     318:	99 0f       	add	r25, r25
     31a:	29 2f       	mov	r18, r25
     31c:	22 0f       	add	r18, r18
     31e:	22 0f       	add	r18, r18
     320:	92 0f       	add	r25, r18
     322:	89 1b       	sub	r24, r25
     324:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_dispWords>
    wd++;
     328:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <wd>
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <wd>
    //lcd_dispRealClock();
    //PORTB &= ~_BV(PB4);
}//ISR(WDT_vect)
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	bf 91       	pop	r27
     338:	af 91       	pop	r26
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	7f 91       	pop	r23
     340:	6f 91       	pop	r22
     342:	5f 91       	pop	r21
     344:	4f 91       	pop	r20
     346:	3f 91       	pop	r19
     348:	2f 91       	pop	r18
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <turnOnLCDBacklight>:
    _delay_ms(1000);

    lcd_write_instruction_4d(lcd_DisplayOff);
    _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    _delay_ms(1000);
    lcd_write_instruction_4d(lcd_DisplayOn);
     354:	28 98       	cbi	0x05, 0	; 5
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <backLight>
     35c:	08 95       	ret

0000035e <turnOffLCDBacklight>:
     35e:	28 9a       	sbi	0x05, 0	; 5
     360:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <backLight>
     364:	08 95       	ret

00000366 <lcd_write_4>:
     366:	5f 98       	cbi	0x0b, 7	; 11
     368:	88 23       	and	r24, r24
     36a:	0c f4       	brge	.+2      	; 0x36e <lcd_write_4+0x8>
     36c:	5f 9a       	sbi	0x0b, 7	; 11
     36e:	5e 98       	cbi	0x0b, 6	; 11
     370:	86 fd       	sbrc	r24, 6
     372:	5e 9a       	sbi	0x0b, 6	; 11
     374:	5d 98       	cbi	0x0b, 5	; 11
     376:	85 fd       	sbrc	r24, 5
     378:	5d 9a       	sbi	0x0b, 5	; 11
     37a:	5c 98       	cbi	0x0b, 4	; 11
     37c:	84 fd       	sbrc	r24, 4
     37e:	5c 9a       	sbi	0x0b, 4	; 11
     380:	5b 9a       	sbi	0x0b, 3	; 11
     382:	00 00       	nop
     384:	5b 98       	cbi	0x0b, 3	; 11
     386:	00 00       	nop
     388:	08 95       	ret

0000038a <lcd_write_character_4d>:
     38a:	cf 93       	push	r28
     38c:	c8 2f       	mov	r28, r24
     38e:	5a 9a       	sbi	0x0b, 2	; 11
     390:	5b 98       	cbi	0x0b, 3	; 11
     392:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_4>
     396:	8c 2f       	mov	r24, r28
     398:	82 95       	swap	r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_4>
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <lcd_write_string_4d>:
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <lcd_write_string_4d+0xa>
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	8c 01       	movw	r16, r24
     3b4:	1a 82       	std	Y+2, r1	; 0x02
     3b6:	19 82       	std	Y+1, r1	; 0x01
     3b8:	e9 81       	ldd	r30, Y+1	; 0x01
     3ba:	fa 81       	ldd	r31, Y+2	; 0x02
     3bc:	e8 0f       	add	r30, r24
     3be:	f9 1f       	adc	r31, r25
     3c0:	80 81       	ld	r24, Z
     3c2:	88 23       	and	r24, r24
     3c4:	b9 f0       	breq	.+46     	; 0x3f4 <lcd_write_string_4d+0x50>
     3c6:	e9 81       	ldd	r30, Y+1	; 0x01
     3c8:	fa 81       	ldd	r31, Y+2	; 0x02
     3ca:	e0 0f       	add	r30, r16
     3cc:	f1 1f       	adc	r31, r17
     3ce:	80 81       	ld	r24, Z
     3d0:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_write_character_4d>
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	9a 81       	ldd	r25, Y+2	; 0x02
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
     3de:	8d e0       	ldi	r24, 0x0D	; 13
     3e0:	8a 95       	dec	r24
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_write_string_4d+0x3c>
     3e4:	00 00       	nop
     3e6:	e9 81       	ldd	r30, Y+1	; 0x01
     3e8:	fa 81       	ldd	r31, Y+2	; 0x02
     3ea:	e0 0f       	add	r30, r16
     3ec:	f1 1f       	adc	r31, r17
     3ee:	80 81       	ld	r24, Z
     3f0:	81 11       	cpse	r24, r1
     3f2:	e9 cf       	rjmp	.-46     	; 0x3c6 <lcd_write_string_4d+0x22>
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <lcd_write_instruction_4d>:
     402:	cf 93       	push	r28
     404:	c8 2f       	mov	r28, r24
     406:	5a 98       	cbi	0x0b, 2	; 11
     408:	5b 98       	cbi	0x0b, 3	; 11
     40a:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_4>
     40e:	8c 2f       	mov	r24, r28
     410:	82 95       	swap	r24
     412:	80 7f       	andi	r24, 0xF0	; 240
     414:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_4>
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <lcd_dispRealClock>:
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	6c 97       	sbiw	r28, 0x1c	; 28
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	80 e8       	ldi	r24, 0x80	; 128
     432:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     436:	8d e0       	ldi	r24, 0x0D	; 13
     438:	8a 95       	dec	r24
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_dispRealClock+0x1c>
     43c:	00 00       	nop
     43e:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <hour>
     442:	4a e0       	ldi	r20, 0x0A	; 10
     444:	be 01       	movw	r22, r28
     446:	69 5f       	subi	r22, 0xF9	; 249
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	08 2e       	mov	r0, r24
     44c:	00 0c       	add	r0, r0
     44e:	99 0b       	sbc	r25, r25
     450:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     454:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <min>
     458:	4a e0       	ldi	r20, 0x0A	; 10
     45a:	be 01       	movw	r22, r28
     45c:	6c 5f       	subi	r22, 0xFC	; 252
     45e:	7f 4f       	sbci	r23, 0xFF	; 255
     460:	08 2e       	mov	r0, r24
     462:	00 0c       	add	r0, r0
     464:	99 0b       	sbc	r25, r25
     466:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     46a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <sec>
     46e:	4a e0       	ldi	r20, 0x0A	; 10
     470:	be 01       	movw	r22, r28
     472:	6f 5f       	subi	r22, 0xFF	; 255
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	08 2e       	mov	r0, r24
     478:	00 0c       	add	r0, r0
     47a:	99 0b       	sbc	r25, r25
     47c:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     480:	ce 01       	movw	r24, r28
     482:	07 96       	adiw	r24, 0x07	; 7
     484:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     488:	85 ee       	ldi	r24, 0xE5	; 229
     48a:	93 e0       	ldi	r25, 0x03	; 3
     48c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     490:	ce 01       	movw	r24, r28
     492:	04 96       	adiw	r24, 0x04	; 4
     494:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     498:	85 ee       	ldi	r24, 0xE5	; 229
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     4a0:	ce 01       	movw	r24, r28
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     4a8:	86 ef       	ldi	r24, 0xF6	; 246
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     4b0:	8d e0       	ldi	r24, 0x0D	; 13
     4b2:	8a 95       	dec	r24
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <lcd_dispRealClock+0x96>
     4b6:	00 00       	nop
     4b8:	80 ec       	ldi	r24, 0xC0	; 192
     4ba:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     4be:	8d e0       	ldi	r24, 0x0D	; 13
     4c0:	8a 95       	dec	r24
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <lcd_dispRealClock+0xa4>
     4c4:	00 00       	nop
     4c6:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <year>
     4ca:	4a e0       	ldi	r20, 0x0A	; 10
     4cc:	be 01       	movw	r22, r28
     4ce:	66 5f       	subi	r22, 0xF6	; 246
     4d0:	7f 4f       	sbci	r23, 0xFF	; 255
     4d2:	08 2e       	mov	r0, r24
     4d4:	00 0c       	add	r0, r0
     4d6:	99 0b       	sbc	r25, r25
     4d8:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     4dc:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <month>
     4e0:	4a e0       	ldi	r20, 0x0A	; 10
     4e2:	be 01       	movw	r22, r28
     4e4:	63 5f       	subi	r22, 0xF3	; 243
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	08 2e       	mov	r0, r24
     4ea:	00 0c       	add	r0, r0
     4ec:	99 0b       	sbc	r25, r25
     4ee:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     4f2:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <date>
     4f6:	4a e0       	ldi	r20, 0x0A	; 10
     4f8:	be 01       	movw	r22, r28
     4fa:	60 5f       	subi	r22, 0xF0	; 240
     4fc:	7f 4f       	sbci	r23, 0xFF	; 255
     4fe:	08 2e       	mov	r0, r24
     500:	00 0c       	add	r0, r0
     502:	99 0b       	sbc	r25, r25
     504:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     508:	ce 01       	movw	r24, r28
     50a:	0a 96       	adiw	r24, 0x0a	; 10
     50c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     510:	87 ee       	ldi	r24, 0xE7	; 231
     512:	93 e0       	ldi	r25, 0x03	; 3
     514:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     518:	ce 01       	movw	r24, r28
     51a:	0d 96       	adiw	r24, 0x0d	; 13
     51c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     520:	87 ee       	ldi	r24, 0xE7	; 231
     522:	93 e0       	ldi	r25, 0x03	; 3
     524:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     528:	ce 01       	movw	r24, r28
     52a:	40 96       	adiw	r24, 0x10	; 16
     52c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     538:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <day>
     53c:	8e 2f       	mov	r24, r30
     53e:	ee 0f       	add	r30, r30
     540:	99 0b       	sbc	r25, r25
     542:	aa 0b       	sbc	r26, r26
     544:	bb 0b       	sbc	r27, r27
     546:	87 30       	cpi	r24, 0x07	; 7
     548:	91 05       	cpc	r25, r1
     54a:	08 f0       	brcs	.+2      	; 0x54e <lcd_dispRealClock+0x132>
     54c:	43 c0       	rjmp	.+134    	; 0x5d4 <lcd_dispRealClock+0x1b8>
     54e:	fc 01       	movw	r30, r24
     550:	e0 5c       	subi	r30, 0xC0	; 192
     552:	ff 4f       	sbci	r31, 0xFF	; 255
     554:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__tablejump2__>
     558:	83 e5       	ldi	r24, 0x53	; 83
     55a:	95 e7       	ldi	r25, 0x75	; 117
     55c:	9c 8b       	std	Y+20, r25	; 0x14
     55e:	8b 8b       	std	Y+19, r24	; 0x13
     560:	8e e6       	ldi	r24, 0x6E	; 110
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9e 8b       	std	Y+22, r25	; 0x16
     566:	8d 8b       	std	Y+21, r24	; 0x15
     568:	35 c0       	rjmp	.+106    	; 0x5d4 <lcd_dispRealClock+0x1b8>
     56a:	8d e4       	ldi	r24, 0x4D	; 77
     56c:	9f e6       	ldi	r25, 0x6F	; 111
     56e:	9c 8b       	std	Y+20, r25	; 0x14
     570:	8b 8b       	std	Y+19, r24	; 0x13
     572:	8e e6       	ldi	r24, 0x6E	; 110
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9e 8b       	std	Y+22, r25	; 0x16
     578:	8d 8b       	std	Y+21, r24	; 0x15
     57a:	2c c0       	rjmp	.+88     	; 0x5d4 <lcd_dispRealClock+0x1b8>
     57c:	84 e5       	ldi	r24, 0x54	; 84
     57e:	95 e7       	ldi	r25, 0x75	; 117
     580:	9c 8b       	std	Y+20, r25	; 0x14
     582:	8b 8b       	std	Y+19, r24	; 0x13
     584:	85 e6       	ldi	r24, 0x65	; 101
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	9e 8b       	std	Y+22, r25	; 0x16
     58a:	8d 8b       	std	Y+21, r24	; 0x15
     58c:	23 c0       	rjmp	.+70     	; 0x5d4 <lcd_dispRealClock+0x1b8>
     58e:	87 e5       	ldi	r24, 0x57	; 87
     590:	95 e6       	ldi	r25, 0x65	; 101
     592:	9c 8b       	std	Y+20, r25	; 0x14
     594:	8b 8b       	std	Y+19, r24	; 0x13
     596:	84 e6       	ldi	r24, 0x64	; 100
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9e 8b       	std	Y+22, r25	; 0x16
     59c:	8d 8b       	std	Y+21, r24	; 0x15
     59e:	1a c0       	rjmp	.+52     	; 0x5d4 <lcd_dispRealClock+0x1b8>
     5a0:	84 e5       	ldi	r24, 0x54	; 84
     5a2:	98 e6       	ldi	r25, 0x68	; 104
     5a4:	9c 8b       	std	Y+20, r25	; 0x14
     5a6:	8b 8b       	std	Y+19, r24	; 0x13
     5a8:	85 e7       	ldi	r24, 0x75	; 117
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	9e 8b       	std	Y+22, r25	; 0x16
     5ae:	8d 8b       	std	Y+21, r24	; 0x15
     5b0:	11 c0       	rjmp	.+34     	; 0x5d4 <lcd_dispRealClock+0x1b8>
     5b2:	86 e4       	ldi	r24, 0x46	; 70
     5b4:	92 e7       	ldi	r25, 0x72	; 114
     5b6:	9c 8b       	std	Y+20, r25	; 0x14
     5b8:	8b 8b       	std	Y+19, r24	; 0x13
     5ba:	89 e6       	ldi	r24, 0x69	; 105
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	9e 8b       	std	Y+22, r25	; 0x16
     5c0:	8d 8b       	std	Y+21, r24	; 0x15
     5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <lcd_dispRealClock+0x1b8>
     5c4:	83 e5       	ldi	r24, 0x53	; 83
     5c6:	91 e6       	ldi	r25, 0x61	; 97
     5c8:	9c 8b       	std	Y+20, r25	; 0x14
     5ca:	8b 8b       	std	Y+19, r24	; 0x13
     5cc:	84 e7       	ldi	r24, 0x74	; 116
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	9e 8b       	std	Y+22, r25	; 0x16
     5d2:	8d 8b       	std	Y+21, r24	; 0x15
     5d4:	ce 01       	movw	r24, r28
     5d6:	43 96       	adiw	r24, 0x13	; 19
     5d8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     5dc:	8c ef       	ldi	r24, 0xFC	; 252
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     5e4:	8d e0       	ldi	r24, 0x0D	; 13
     5e6:	8a 95       	dec	r24
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <lcd_dispRealClock+0x1ca>
     5ea:	00 00       	nop
     5ec:	6c 96       	adiw	r28, 0x1c	; 28
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <lcd_dispAccumulatedTime>:
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
     606:	29 97       	sbiw	r28, 0x09	; 9
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	80 ec       	ldi	r24, 0xC0	; 192
     614:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     618:	8d e0       	ldi	r24, 0x0D	; 13
     61a:	8a 95       	dec	r24
     61c:	f1 f7       	brne	.-4      	; 0x61a <lcd_dispAccumulatedTime+0x1c>
     61e:	00 00       	nop
     620:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <accumulatedHour>
     624:	4a e0       	ldi	r20, 0x0A	; 10
     626:	be 01       	movw	r22, r28
     628:	69 5f       	subi	r22, 0xF9	; 249
     62a:	7f 4f       	sbci	r23, 0xFF	; 255
     62c:	08 2e       	mov	r0, r24
     62e:	00 0c       	add	r0, r0
     630:	99 0b       	sbc	r25, r25
     632:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     636:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <accumulatedMin>
     63a:	4a e0       	ldi	r20, 0x0A	; 10
     63c:	be 01       	movw	r22, r28
     63e:	6c 5f       	subi	r22, 0xFC	; 252
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	08 2e       	mov	r0, r24
     644:	00 0c       	add	r0, r0
     646:	99 0b       	sbc	r25, r25
     648:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     64c:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <accumulatedSec>
     650:	4a e0       	ldi	r20, 0x0A	; 10
     652:	be 01       	movw	r22, r28
     654:	6f 5f       	subi	r22, 0xFF	; 255
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	08 2e       	mov	r0, r24
     65a:	00 0c       	add	r0, r0
     65c:	99 0b       	sbc	r25, r25
     65e:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
     662:	ce 01       	movw	r24, r28
     664:	07 96       	adiw	r24, 0x07	; 7
     666:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     66a:	85 ee       	ldi	r24, 0xE5	; 229
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     672:	ce 01       	movw	r24, r28
     674:	04 96       	adiw	r24, 0x04	; 4
     676:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     67a:	85 ee       	ldi	r24, 0xE5	; 229
     67c:	93 e0       	ldi	r25, 0x03	; 3
     67e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     682:	ce 01       	movw	r24, r28
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     68a:	8a ef       	ldi	r24, 0xFA	; 250
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     692:	8d e0       	ldi	r24, 0x0D	; 13
     694:	8a 95       	dec	r24
     696:	f1 f7       	brne	.-4      	; 0x694 <lcd_dispAccumulatedTime+0x96>
     698:	00 00       	nop
     69a:	29 96       	adiw	r28, 0x09	; 9
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <lcd_dispProgInfo>:
     6ac:	80 e8       	ldi	r24, 0x80	; 128
     6ae:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     6b2:	2d e0       	ldi	r18, 0x0D	; 13
     6b4:	2a 95       	dec	r18
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <lcd_dispProgInfo+0x8>
     6b8:	00 00       	nop
     6ba:	81 e4       	ldi	r24, 0x41	; 65
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     6c2:	80 ec       	ldi	r24, 0xC0	; 192
     6c4:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     6c8:	8d e0       	ldi	r24, 0x0D	; 13
     6ca:	8a 95       	dec	r24
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <lcd_dispProgInfo+0x1e>
     6ce:	00 00       	nop
     6d0:	82 e3       	ldi	r24, 0x32	; 50
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     6d8:	9f e3       	ldi	r25, 0x3F	; 63
     6da:	2d e0       	ldi	r18, 0x0D	; 13
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	91 50       	subi	r25, 0x01	; 1
     6e0:	20 40       	sbci	r18, 0x00	; 0
     6e2:	80 40       	sbci	r24, 0x00	; 0
     6e4:	e1 f7       	brne	.-8      	; 0x6de <lcd_dispProgInfo+0x32>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <lcd_dispProgInfo+0x3c>
     6e8:	00 00       	nop
     6ea:	80 ec       	ldi	r24, 0xC0	; 192
     6ec:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     6f0:	9d e0       	ldi	r25, 0x0D	; 13
     6f2:	9a 95       	dec	r25
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <lcd_dispProgInfo+0x46>
     6f6:	00 00       	nop
     6f8:	81 e2       	ldi	r24, 0x21	; 33
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     700:	2f e7       	ldi	r18, 0x7F	; 127
     702:	8a e1       	ldi	r24, 0x1A	; 26
     704:	96 e0       	ldi	r25, 0x06	; 6
     706:	21 50       	subi	r18, 0x01	; 1
     708:	80 40       	sbci	r24, 0x00	; 0
     70a:	90 40       	sbci	r25, 0x00	; 0
     70c:	e1 f7       	brne	.-8      	; 0x706 <lcd_dispProgInfo+0x5a>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <lcd_dispProgInfo+0x64>
     710:	00 00       	nop
     712:	08 95       	ret

00000714 <lcd_dispMenu>:
     714:	80 e8       	ldi	r24, 0x80	; 128
     716:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     71a:	2d e0       	ldi	r18, 0x0D	; 13
     71c:	2a 95       	dec	r18
     71e:	f1 f7       	brne	.-4      	; 0x71c <lcd_dispMenu+0x8>
     720:	00 00       	nop
     722:	80 e1       	ldi	r24, 0x10	; 16
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     72a:	80 ec       	ldi	r24, 0xC0	; 192
     72c:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     730:	8d e0       	ldi	r24, 0x0D	; 13
     732:	8a 95       	dec	r24
     734:	f1 f7       	brne	.-4      	; 0x732 <lcd_dispMenu+0x1e>
     736:	00 00       	nop
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     740:	9f eb       	ldi	r25, 0xBF	; 191
     742:	27 e2       	ldi	r18, 0x27	; 39
     744:	89 e0       	ldi	r24, 0x09	; 9
     746:	91 50       	subi	r25, 0x01	; 1
     748:	20 40       	sbci	r18, 0x00	; 0
     74a:	80 40       	sbci	r24, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <lcd_dispMenu+0x32>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <lcd_dispMenu+0x3c>
     750:	00 00       	nop
     752:	08 95       	ret

00000754 <lcd_dispWords>:
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	e8 2e       	mov	r14, r24
     762:	80 e8       	ldi	r24, 0x80	; 128
     764:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     768:	2d e0       	ldi	r18, 0x0D	; 13
     76a:	2a 95       	dec	r18
     76c:	f1 f7       	brne	.-4      	; 0x76a <lcd_dispWords+0x16>
     76e:	00 00       	nop
     770:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <min>
     774:	83 78       	andi	r24, 0x83	; 131
     776:	1c f4       	brge	.+6      	; 0x77e <lcd_dispWords+0x2a>
     778:	81 50       	subi	r24, 0x01	; 1
     77a:	8c 6f       	ori	r24, 0xFC	; 252
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	88 23       	and	r24, r24
     780:	ec f0       	brlt	.+58     	; 0x7bc <lcd_dispWords+0x68>
     782:	82 30       	cpi	r24, 0x02	; 2
     784:	1c f0       	brlt	.+6      	; 0x78c <lcd_dispWords+0x38>
     786:	84 30       	cpi	r24, 0x04	; 4
     788:	6c f0       	brlt	.+26     	; 0x7a4 <lcd_dispWords+0x50>
     78a:	18 c0       	rjmp	.+48     	; 0x7bc <lcd_dispWords+0x68>
     78c:	30 e2       	ldi	r19, 0x20	; 32
     78e:	e3 9e       	mul	r14, r19
     790:	c0 01       	movw	r24, r0
     792:	11 24       	eor	r1, r1
     794:	ec 01       	movw	r28, r24
     796:	c0 57       	subi	r28, 0x70	; 112
     798:	dd 4f       	sbci	r29, 0xFD	; 253
     79a:	9c 01       	movw	r18, r24
     79c:	20 56       	subi	r18, 0x60	; 96
     79e:	3d 4f       	sbci	r19, 0xFD	; 253
     7a0:	79 01       	movw	r14, r18
     7a2:	10 c0       	rjmp	.+32     	; 0x7c4 <lcd_dispWords+0x70>
     7a4:	30 e2       	ldi	r19, 0x20	; 32
     7a6:	e3 9e       	mul	r14, r19
     7a8:	c0 01       	movw	r24, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	ec 01       	movw	r28, r24
     7ae:	c0 5b       	subi	r28, 0xB0	; 176
     7b0:	de 4f       	sbci	r29, 0xFE	; 254
     7b2:	9c 01       	movw	r18, r24
     7b4:	20 5a       	subi	r18, 0xA0	; 160
     7b6:	3e 4f       	sbci	r19, 0xFE	; 254
     7b8:	79 01       	movw	r14, r18
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <lcd_dispWords+0x70>
     7bc:	e1 2c       	mov	r14, r1
     7be:	f1 2c       	mov	r15, r1
     7c0:	c0 e0       	ldi	r28, 0x00	; 0
     7c2:	d0 e0       	ldi	r29, 0x00	; 0
     7c4:	ce 01       	movw	r24, r28
     7c6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     7ca:	fe 01       	movw	r30, r28
     7cc:	01 90       	ld	r0, Z+
     7ce:	00 20       	and	r0, r0
     7d0:	e9 f7       	brne	.-6      	; 0x7cc <lcd_dispWords+0x78>
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	ec 1b       	sub	r30, r28
     7d6:	fd 0b       	sbc	r31, r29
     7d8:	00 e1       	ldi	r16, 0x10	; 16
     7da:	10 e0       	ldi	r17, 0x00	; 0
     7dc:	0e 1b       	sub	r16, r30
     7de:	11 09       	sbc	r17, r1
     7e0:	10 16       	cp	r1, r16
     7e2:	11 06       	cpc	r1, r17
     7e4:	54 f4       	brge	.+20     	; 0x7fa <lcd_dispWords+0xa6>
     7e6:	c0 e0       	ldi	r28, 0x00	; 0
     7e8:	80 e2       	ldi	r24, 0x20	; 32
     7ea:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_write_character_4d>
     7ee:	cf 5f       	subi	r28, 0xFF	; 255
     7f0:	8c 2f       	mov	r24, r28
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	80 17       	cp	r24, r16
     7f6:	91 07       	cpc	r25, r17
     7f8:	bc f3       	brlt	.-18     	; 0x7e8 <lcd_dispWords+0x94>
     7fa:	80 ec       	ldi	r24, 0xC0	; 192
     7fc:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     800:	3d e0       	ldi	r19, 0x0D	; 13
     802:	3a 95       	dec	r19
     804:	f1 f7       	brne	.-4      	; 0x802 <lcd_dispWords+0xae>
     806:	00 00       	nop
     808:	c7 01       	movw	r24, r14
     80a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     80e:	f7 01       	movw	r30, r14
     810:	01 90       	ld	r0, Z+
     812:	00 20       	and	r0, r0
     814:	e9 f7       	brne	.-6      	; 0x810 <lcd_dispWords+0xbc>
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	ee 19       	sub	r30, r14
     81a:	ff 09       	sbc	r31, r15
     81c:	00 e1       	ldi	r16, 0x10	; 16
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	0e 1b       	sub	r16, r30
     822:	11 09       	sbc	r17, r1
     824:	10 16       	cp	r1, r16
     826:	11 06       	cpc	r1, r17
     828:	54 f4       	brge	.+20     	; 0x83e <lcd_dispWords+0xea>
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	80 e2       	ldi	r24, 0x20	; 32
     82e:	0e 94 c5 01 	call	0x38a	; 0x38a <lcd_write_character_4d>
     832:	cf 5f       	subi	r28, 0xFF	; 255
     834:	8c 2f       	mov	r24, r28
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	80 17       	cp	r24, r16
     83a:	91 07       	cpc	r25, r17
     83c:	bc f3       	brlt	.-18     	; 0x82c <lcd_dispWords+0xd8>
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	08 95       	ret

0000084c <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84c:	87 ea       	ldi	r24, 0xA7	; 167
     84e:	91 e6       	ldi	r25, 0x61	; 97
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <lcd_init_4d+0x4>
     854:	00 c0       	rjmp	.+0      	; 0x856 <lcd_init_4d+0xa>
     856:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     858:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     85a:	5b 98       	cbi	0x0b, 3	; 11

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     85c:	80 e3       	ldi	r24, 0x30	; 48
     85e:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_4>
     862:	83 ec       	ldi	r24, 0xC3	; 195
     864:	99 e0       	ldi	r25, 0x09	; 9
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <lcd_init_4d+0x1a>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <lcd_init_4d+0x20>
     86c:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     86e:	80 e3       	ldi	r24, 0x30	; 48
     870:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     874:	92 e4       	ldi	r25, 0x42	; 66
     876:	9a 95       	dec	r25
     878:	f1 f7       	brne	.-4      	; 0x876 <lcd_init_4d+0x2a>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <lcd_init_4d+0x30>
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     87c:	80 e3       	ldi	r24, 0x30	; 48
     87e:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_4>
     882:	82 e4       	ldi	r24, 0x42	; 66
     884:	8a 95       	dec	r24
     886:	f1 f7       	brne	.-4      	; 0x884 <lcd_init_4d+0x38>
     888:	00 c0       	rjmp	.+0      	; 0x88a <lcd_init_4d+0x3e>
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     88a:	88 e2       	ldi	r24, 0x28	; 40
     88c:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_4>
     890:	9d e0       	ldi	r25, 0x0D	; 13
     892:	9a 95       	dec	r25
     894:	f1 f7       	brne	.-4      	; 0x892 <lcd_init_4d+0x46>
     896:	00 00       	nop
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     898:	88 e2       	ldi	r24, 0x28	; 40
     89a:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     89e:	8d e0       	ldi	r24, 0x0D	; 13
     8a0:	8a 95       	dec	r24
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <lcd_init_4d+0x54>
     8a4:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     8a6:	88 e0       	ldi	r24, 0x08	; 8
     8a8:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     8ac:	9d e0       	ldi	r25, 0x0D	; 13
     8ae:	9a 95       	dec	r25
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <lcd_init_4d+0x62>
     8b2:	00 00       	nop
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ba:	87 ee       	ldi	r24, 0xE7	; 231
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <lcd_init_4d+0x72>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <lcd_init_4d+0x78>
     8c4:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     8c6:	86 e0       	ldi	r24, 0x06	; 6
     8c8:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8cc:	9d e0       	ldi	r25, 0x0D	; 13
     8ce:	9a 95       	dec	r25
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <lcd_init_4d+0x82>
     8d2:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     8d4:	8c e0       	ldi	r24, 0x0C	; 12
     8d6:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     8da:	8d e0       	ldi	r24, 0x0D	; 13
     8dc:	8a 95       	dec	r24
     8de:	f1 f7       	brne	.-4      	; 0x8dc <lcd_init_4d+0x90>
     8e0:	00 00       	nop
     8e2:	08 95       	ret

000008e4 <config>:

void config()
{
// configure the microprocessor pins for the data lines
// 4 data lines - output
    lcd_D7_ddr |= _BV(lcd_D7_bit);
     8e4:	57 9a       	sbi	0x0a, 7	; 10
    lcd_D6_ddr |= _BV(lcd_D6_bit);
     8e6:	56 9a       	sbi	0x0a, 6	; 10
    lcd_D5_ddr |= _BV(lcd_D5_bit);
     8e8:	55 9a       	sbi	0x0a, 5	; 10
    lcd_D4_ddr |= _BV(lcd_D4_bit);
     8ea:	54 9a       	sbi	0x0a, 4	; 10

// LCD backlight cathode pin (K) - Output
    lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
     8ec:	20 9a       	sbi	0x04, 0	; 4
    //turn off LCD backlight
    lcd_Backlight_port |= _BV(lcd_Backlight_bit);
     8ee:	28 9a       	sbi	0x05, 0	; 5

//Tactile switch - Input
    tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);
     8f0:	24 98       	cbi	0x04, 4	; 4

// configure the microprocessor pins for the control lines
// E line - output
    lcd_E_ddr |= _BV(lcd_E_bit);
     8f2:	53 9a       	sbi	0x0a, 3	; 10
// RS line - output
    lcd_RS_ddr |= _BV(lcd_RS_bit);
     8f4:	52 9a       	sbi	0x0a, 2	; 10
    //turn on LCD VDD
    //lcd_VDD_port |= _BV(lcd_VDD_bit);

// initialize the LCD controller as determined by the defines (LCD instructions)
// initialize the LCD display for a 4-bit interface
    lcd_init_4d();
     8f6:	0e 94 26 04 	call	0x84c	; 0x84c <lcd_init_4d>
     8fa:	08 95       	ret

000008fc <main>:


/******************************* Main Program Code *************************/
int main(void)
{
    config();
     8fc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <config>
    //ioinit(); //dht11
    init_devices();
     900:	0e 94 c4 00 	call	0x188	; 0x188 <init_devices>
    
	initINT();
     904:	0e 94 b3 00 	call	0x166	; 0x166 <initINT>
    parseCompileTime();
     908:	0e 94 a1 04 	call	0x942	; 0x942 <parseCompileTime>
    //lcd_dispRealClock();
	lcd_dispProgInfo();
     90c:	0e 94 56 03 	call	0x6ac	; 0x6ac <lcd_dispProgInfo>
    //turnOnLCDBacklight();
    
	// Use the Power Down sleep mode
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     910:	83 b7       	in	r24, 0x33	; 51
     912:	81 7f       	andi	r24, 0xF1	; 241
     914:	84 60       	ori	r24, 0x04	; 4
     916:	83 bf       	out	0x33, r24	; 51
	// endless loop
    while(1)
    {
      // go to sleep and wait for interrupt...
      sleep_mode();
     918:	83 b7       	in	r24, 0x33	; 51
     91a:	81 60       	ori	r24, 0x01	; 1
     91c:	83 bf       	out	0x33, r24	; 51
     91e:	88 95       	sleep
     920:	83 b7       	in	r24, 0x33	; 51
     922:	8e 7f       	andi	r24, 0xFE	; 254
     924:	83 bf       	out	0x33, r24	; 51
     926:	f8 cf       	rjmp	.-16     	; 0x918 <__stack+0x19>

00000928 <calcDay>:
    calcDay();
}//parseCompileTime

void calcDay()
{
    day = (date - 17)%7;
     928:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <date>
     92c:	08 2e       	mov	r0, r24
     92e:	00 0c       	add	r0, r0
     930:	99 0b       	sbc	r25, r25
     932:	41 97       	sbiw	r24, 0x11	; 17
     934:	67 e0       	ldi	r22, 0x07	; 7
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	0e 94 79 07 	call	0xef2	; 0xef2 <__divmodhi4>
     93c:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <day>
     940:	08 95       	ret

00000942 <parseCompileTime>:
extern uint8_t year, month, date;
extern uint8_t monthEndDate, day;
*/

void parseCompileTime()
{
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	e4 97       	sbiw	r28, 0x34	; 52
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
    char sTime[4][3];
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
     958:	65 ee       	ldi	r22, 0xE5	; 229
     95a:	73 e0       	ldi	r23, 0x03	; 3
     95c:	87 e1       	ldi	r24, 0x17	; 23
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <strtok>
     964:	bc 01       	movw	r22, r24
    while (*p)
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	88 23       	and	r24, r24
     96c:	e9 f0       	breq	.+58     	; 0x9a8 <parseCompileTime+0x66>
     96e:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sTime[n++], p);
     970:	11 e0       	ldi	r17, 0x01	; 1
     972:	12 0f       	add	r17, r18
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	c9 01       	movw	r24, r18
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	82 0f       	add	r24, r18
     97e:	93 1f       	adc	r25, r19
     980:	21 e0       	ldi	r18, 0x01	; 1
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	2c 0f       	add	r18, r28
     986:	3d 1f       	adc	r19, r29
     988:	82 0f       	add	r24, r18
     98a:	93 1f       	adc	r25, r19
     98c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <strcpy>
        p=strtok(NULL, ":");
     990:	65 ee       	ldi	r22, 0xE5	; 229
     992:	73 e0       	ldi	r23, 0x03	; 3
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <strtok>
     99c:	bc 01       	movw	r22, r24
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
    {
        strcpy((char *)&sTime[n++], p);
     99e:	21 2f       	mov	r18, r17
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	81 11       	cpse	r24, r1
     9a6:	e4 cf       	rjmp	.-56     	; 0x970 <parseCompileTime+0x2e>
    {
        strcpy((char *)&sTime[n++], p);
        p=strtok(NULL, ":");
    }
    hour=atoi(sTime[0]);
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	0e 94 c2 07 	call	0xf84	; 0xf84 <atoi>
     9b0:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <hour>
    min=atoi(sTime[1]);
     9b4:	ce 01       	movw	r24, r28
     9b6:	04 96       	adiw	r24, 0x04	; 4
     9b8:	0e 94 c2 07 	call	0xf84	; 0xf84 <atoi>
     9bc:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <min>
    //give some delay (8 seconds), to compile & upload by human click
    //sec=atoi(sTime[2]) + 8;

    //if you change power source to battery,
    //  you'd better put more time allowance
    sec=atoi(sTime[2]) + 15;
     9c0:	ce 01       	movw	r24, r28
     9c2:	07 96       	adiw	r24, 0x07	; 7
     9c4:	0e 94 c2 07 	call	0xf84	; 0xf84 <atoi>
     9c8:	81 5f       	subi	r24, 0xF1	; 241
     9ca:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <sec>
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	74 e0       	ldi	r23, 0x04	; 4
     9d2:	89 ed       	ldi	r24, 0xD9	; 217
     9d4:	93 e0       	ldi	r25, 0x03	; 3
     9d6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <strtok>
     9da:	bc 01       	movw	r22, r24
    while (*p)
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	88 23       	and	r24, r24
     9e2:	19 f1       	breq	.+70     	; 0xa2a <parseCompileTime+0xe8>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sDate[n++], p);
     9e6:	11 e0       	ldi	r17, 0x01	; 1
     9e8:	12 0f       	add	r17, r18
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	c9 01       	movw	r24, r18
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	22 0f       	add	r18, r18
     9f4:	33 1f       	adc	r19, r19
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	82 0f       	add	r24, r18
     a00:	93 1f       	adc	r25, r19
     a02:	2d e0       	ldi	r18, 0x0D	; 13
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	2c 0f       	add	r18, r28
     a08:	3d 1f       	adc	r19, r29
     a0a:	82 0f       	add	r24, r18
     a0c:	93 1f       	adc	r25, r19
     a0e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <strcpy>
        p=strtok(NULL, " ");
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	74 e0       	ldi	r23, 0x04	; 4
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <strtok>
     a1e:	bc 01       	movw	r22, r24

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    {
        strcpy((char *)&sDate[n++], p);
     a20:	21 2f       	mov	r18, r17
    sec=atoi(sTime[2]) + 15;
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
     a22:	fc 01       	movw	r30, r24
     a24:	80 81       	ld	r24, Z
     a26:	81 11       	cpse	r24, r1
     a28:	de cf       	rjmp	.-68     	; 0x9e6 <parseCompileTime+0xa4>
    {
        strcpy((char *)&sDate[n++], p);
        p=strtok(NULL, " ");
    }

    if ( strcmp(sDate[0], "Jan") == 0 )
     a2a:	60 e2       	ldi	r22, 0x20	; 32
     a2c:	74 e0       	ldi	r23, 0x04	; 4
     a2e:	ce 01       	movw	r24, r28
     a30:	0d 96       	adiw	r24, 0x0d	; 13
     a32:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     a36:	89 2b       	or	r24, r25
     a38:	21 f4       	brne	.+8      	; 0xa42 <parseCompileTime+0x100>
        month = 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     a40:	83 c0       	rjmp	.+262    	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Feb") == 0 )
     a42:	64 e2       	ldi	r22, 0x24	; 36
     a44:	74 e0       	ldi	r23, 0x04	; 4
     a46:	ce 01       	movw	r24, r28
     a48:	0d 96       	adiw	r24, 0x0d	; 13
     a4a:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     a4e:	89 2b       	or	r24, r25
     a50:	21 f4       	brne	.+8      	; 0xa5a <parseCompileTime+0x118>
        month = 2;
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     a58:	77 c0       	rjmp	.+238    	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Mar") == 0 )
     a5a:	68 e2       	ldi	r22, 0x28	; 40
     a5c:	74 e0       	ldi	r23, 0x04	; 4
     a5e:	ce 01       	movw	r24, r28
     a60:	0d 96       	adiw	r24, 0x0d	; 13
     a62:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     a66:	89 2b       	or	r24, r25
     a68:	21 f4       	brne	.+8      	; 0xa72 <parseCompileTime+0x130>
        month = 3;
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     a70:	6b c0       	rjmp	.+214    	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Apr") == 0 )
     a72:	6c e2       	ldi	r22, 0x2C	; 44
     a74:	74 e0       	ldi	r23, 0x04	; 4
     a76:	ce 01       	movw	r24, r28
     a78:	0d 96       	adiw	r24, 0x0d	; 13
     a7a:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     a7e:	89 2b       	or	r24, r25
     a80:	21 f4       	brne	.+8      	; 0xa8a <parseCompileTime+0x148>
        month = 4;
     a82:	84 e0       	ldi	r24, 0x04	; 4
     a84:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     a88:	5f c0       	rjmp	.+190    	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "May") == 0 )
     a8a:	60 e3       	ldi	r22, 0x30	; 48
     a8c:	74 e0       	ldi	r23, 0x04	; 4
     a8e:	ce 01       	movw	r24, r28
     a90:	0d 96       	adiw	r24, 0x0d	; 13
     a92:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     a96:	89 2b       	or	r24, r25
     a98:	21 f4       	brne	.+8      	; 0xaa2 <parseCompileTime+0x160>
        month = 5;
     a9a:	85 e0       	ldi	r24, 0x05	; 5
     a9c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     aa0:	53 c0       	rjmp	.+166    	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jun") == 0 )
     aa2:	64 e3       	ldi	r22, 0x34	; 52
     aa4:	74 e0       	ldi	r23, 0x04	; 4
     aa6:	ce 01       	movw	r24, r28
     aa8:	0d 96       	adiw	r24, 0x0d	; 13
     aaa:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     aae:	89 2b       	or	r24, r25
     ab0:	21 f4       	brne	.+8      	; 0xaba <parseCompileTime+0x178>
        month = 6;
     ab2:	86 e0       	ldi	r24, 0x06	; 6
     ab4:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     ab8:	47 c0       	rjmp	.+142    	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jul") == 0 )
     aba:	68 e3       	ldi	r22, 0x38	; 56
     abc:	74 e0       	ldi	r23, 0x04	; 4
     abe:	ce 01       	movw	r24, r28
     ac0:	0d 96       	adiw	r24, 0x0d	; 13
     ac2:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     ac6:	89 2b       	or	r24, r25
     ac8:	21 f4       	brne	.+8      	; 0xad2 <parseCompileTime+0x190>
        month = 7;
     aca:	87 e0       	ldi	r24, 0x07	; 7
     acc:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     ad0:	3b c0       	rjmp	.+118    	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Aug") == 0 )
     ad2:	6c e3       	ldi	r22, 0x3C	; 60
     ad4:	74 e0       	ldi	r23, 0x04	; 4
     ad6:	ce 01       	movw	r24, r28
     ad8:	0d 96       	adiw	r24, 0x0d	; 13
     ada:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     ade:	89 2b       	or	r24, r25
     ae0:	21 f4       	brne	.+8      	; 0xaea <parseCompileTime+0x1a8>
        month = 8;
     ae2:	88 e0       	ldi	r24, 0x08	; 8
     ae4:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     ae8:	2f c0       	rjmp	.+94     	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Sep") == 0 )
     aea:	60 e4       	ldi	r22, 0x40	; 64
     aec:	74 e0       	ldi	r23, 0x04	; 4
     aee:	ce 01       	movw	r24, r28
     af0:	0d 96       	adiw	r24, 0x0d	; 13
     af2:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     af6:	89 2b       	or	r24, r25
     af8:	21 f4       	brne	.+8      	; 0xb02 <parseCompileTime+0x1c0>
        month = 9;
     afa:	89 e0       	ldi	r24, 0x09	; 9
     afc:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     b00:	23 c0       	rjmp	.+70     	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Oct") == 0 )
     b02:	64 e4       	ldi	r22, 0x44	; 68
     b04:	74 e0       	ldi	r23, 0x04	; 4
     b06:	ce 01       	movw	r24, r28
     b08:	0d 96       	adiw	r24, 0x0d	; 13
     b0a:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     b0e:	89 2b       	or	r24, r25
     b10:	21 f4       	brne	.+8      	; 0xb1a <parseCompileTime+0x1d8>
        month = 10;
     b12:	8a e0       	ldi	r24, 0x0A	; 10
     b14:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     b18:	17 c0       	rjmp	.+46     	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Nov") == 0 )
     b1a:	68 e4       	ldi	r22, 0x48	; 72
     b1c:	74 e0       	ldi	r23, 0x04	; 4
     b1e:	ce 01       	movw	r24, r28
     b20:	0d 96       	adiw	r24, 0x0d	; 13
     b22:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     b26:	89 2b       	or	r24, r25
     b28:	21 f4       	brne	.+8      	; 0xb32 <parseCompileTime+0x1f0>
        month = 11;
     b2a:	8b e0       	ldi	r24, 0x0B	; 11
     b2c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>
     b30:	0b c0       	rjmp	.+22     	; 0xb48 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Dec") == 0 )
     b32:	6c e4       	ldi	r22, 0x4C	; 76
     b34:	74 e0       	ldi	r23, 0x04	; 4
     b36:	ce 01       	movw	r24, r28
     b38:	0d 96       	adiw	r24, 0x0d	; 13
     b3a:	0e 94 e5 07 	call	0xfca	; 0xfca <strcmp>
     b3e:	89 2b       	or	r24, r25
     b40:	19 f4       	brne	.+6      	; 0xb48 <parseCompileTime+0x206>
        month = 12;
     b42:	8c e0       	ldi	r24, 0x0C	; 12
     b44:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <month>

    date=atoi(sDate[1]);
     b48:	ce 01       	movw	r24, r28
     b4a:	47 96       	adiw	r24, 0x17	; 23
     b4c:	0e 94 c2 07 	call	0xf84	; 0xf84 <atoi>
     b50:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <date>
    yearLong=atoi(sDate[2]);
     b54:	ce 01       	movw	r24, r28
     b56:	81 96       	adiw	r24, 0x21	; 33
     b58:	0e 94 c2 07 	call	0xf84	; 0xf84 <atoi>
     b5c:	ac 01       	movw	r20, r24
    year=yearLong%1000;
     b5e:	9c 01       	movw	r18, r24
     b60:	36 95       	lsr	r19
     b62:	27 95       	ror	r18
     b64:	36 95       	lsr	r19
     b66:	27 95       	ror	r18
     b68:	36 95       	lsr	r19
     b6a:	27 95       	ror	r18
     b6c:	a5 ec       	ldi	r26, 0xC5	; 197
     b6e:	b0 e2       	ldi	r27, 0x20	; 32
     b70:	0e 94 93 07 	call	0xf26	; 0xf26 <__umulhisi3>
     b74:	92 95       	swap	r25
     b76:	82 95       	swap	r24
     b78:	8f 70       	andi	r24, 0x0F	; 15
     b7a:	89 27       	eor	r24, r25
     b7c:	9f 70       	andi	r25, 0x0F	; 15
     b7e:	89 27       	eor	r24, r25
     b80:	68 ee       	ldi	r22, 0xE8	; 232
     b82:	73 e0       	ldi	r23, 0x03	; 3
     b84:	86 9f       	mul	r24, r22
     b86:	90 01       	movw	r18, r0
     b88:	87 9f       	mul	r24, r23
     b8a:	30 0d       	add	r19, r0
     b8c:	96 9f       	mul	r25, r22
     b8e:	30 0d       	add	r19, r0
     b90:	11 24       	eor	r1, r1
     b92:	42 1b       	sub	r20, r18
     b94:	53 0b       	sbc	r21, r19
     b96:	40 93 6c 04 	sts	0x046C, r20	; 0x80046c <year>

    calcDay();
     b9a:	0e 94 94 04 	call	0x928	; 0x928 <calcDay>
}//parseCompileTime
     b9e:	e4 96       	adiw	r28, 0x34	; 52
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	08 95       	ret

00000bb2 <adjustHour>:
    }//if (DONE == 1)

}//countButton

void adjustHour()
{
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	00 d0       	rcall	.+0      	; 0xbbc <adjustHour+0xa>
     bbc:	1f 92       	push	r1
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     bc2:	00 e0       	ldi	r16, 0x00	; 0
     bc4:	10 e0       	ldi	r17, 0x00	; 0
    char strHour[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     bc6:	80 e8       	ldi	r24, 0x80	; 128
     bc8:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
     bcc:	8d e0       	ldi	r24, 0x0D	; 13
     bce:	8a 95       	dec	r24
     bd0:	f1 f7       	brne	.-4      	; 0xbce <adjustHour+0x1c>
     bd2:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Hour: ");
     bd4:	80 e5       	ldi	r24, 0x50	; 80
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     bdc:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <hour>
     be0:	4a e0       	ldi	r20, 0x0A	; 10
     be2:	be 01       	movw	r22, r28
     be4:	6f 5f       	subi	r22, 0xFF	; 255
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	08 2e       	mov	r0, r24
     bea:	00 0c       	add	r0, r0
     bec:	99 0b       	sbc	r25, r25
     bee:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
        itoa(hour, strHour, 10);
        lcd_write_string_4d((uint8_t *)strHour);
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	94 e0       	ldi	r25, 0x04	; 4
     bfe:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     c02:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c04:	e7 ea       	ldi	r30, 0xA7	; 167
     c06:	f1 e6       	ldi	r31, 0x61	; 97
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <adjustHour+0x56>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <adjustHour+0x5c>
     c0e:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     c10:	84 fd       	sbrc	r24, 4
     c12:	0c c0       	rjmp	.+24     	; 0xc2c <adjustHour+0x7a>
        {
            hour++;
     c14:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <hour>
     c18:	8f 5f       	subi	r24, 0xFF	; 255
            if (hour > 23)
     c1a:	88 31       	cpi	r24, 0x18	; 24
     c1c:	24 f4       	brge	.+8      	; 0xc26 <adjustHour+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            hour++;
     c1e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <hour>
     c22:	01 2f       	mov	r16, r17
     c24:	03 c0       	rjmp	.+6      	; 0xc2c <adjustHour+0x7a>
            if (hour > 23)
                hour=0;
     c26:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <hour>
     c2a:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
     c2c:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
        if (lapse > adjustTimeInterval)
     c2e:	81 2f       	mov	r24, r17
     c30:	80 1b       	sub	r24, r16
     c32:	89 30       	cpi	r24, 0x09	; 9
     c34:	38 f4       	brcc	.+14     	; 0xc44 <adjustHour+0x92>
     c36:	81 e1       	ldi	r24, 0x11	; 17
     c38:	9a e7       	ldi	r25, 0x7A	; 122
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <adjustHour+0x88>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <adjustHour+0x8e>
     c40:	00 00       	nop
     c42:	c1 cf       	rjmp	.-126    	; 0xbc6 <adjustHour+0x14>
     c44:	e1 e1       	ldi	r30, 0x11	; 17
     c46:	fa e7       	ldi	r31, 0x7A	; 122
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <adjustHour+0x96>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <adjustHour+0x9c>
     c4e:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)
}//adjustHour
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <adjustMin>:

void adjustMin()
{
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	00 d0       	rcall	.+0      	; 0xc6a <adjustMin+0xa>
     c6a:	1f 92       	push	r1
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     c70:	00 e0       	ldi	r16, 0x00	; 0
     c72:	10 e0       	ldi	r17, 0x00	; 0
    char strMin[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c7a:	8d e0       	ldi	r24, 0x0D	; 13
     c7c:	8a 95       	dec	r24
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <adjustMin+0x1c>
     c80:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Min: ");
     c82:	87 e5       	ldi	r24, 0x57	; 87
     c84:	94 e0       	ldi	r25, 0x04	; 4
     c86:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     c8a:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <min>
     c8e:	4a e0       	ldi	r20, 0x0A	; 10
     c90:	be 01       	movw	r22, r28
     c92:	6f 5f       	subi	r22, 0xFF	; 255
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	08 2e       	mov	r0, r24
     c98:	00 0c       	add	r0, r0
     c9a:	99 0b       	sbc	r25, r25
     c9c:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
        itoa(min, strMin, 10);
        lcd_write_string_4d((uint8_t *)strMin);
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	94 e0       	ldi	r25, 0x04	; 4
     cac:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     cb0:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cb2:	e7 ea       	ldi	r30, 0xA7	; 167
     cb4:	f1 e6       	ldi	r31, 0x61	; 97
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <adjustMin+0x56>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <adjustMin+0x5c>
     cbc:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     cbe:	84 fd       	sbrc	r24, 4
     cc0:	0c c0       	rjmp	.+24     	; 0xcda <adjustMin+0x7a>
        {
            min++;
     cc2:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <min>
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
            if (min > 59)
     cc8:	8c 33       	cpi	r24, 0x3C	; 60
     cca:	24 f4       	brge	.+8      	; 0xcd4 <adjustMin+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            min++;
     ccc:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <min>
     cd0:	01 2f       	mov	r16, r17
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <adjustMin+0x7a>
            if (min > 59)
                min=0;
     cd4:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <min>
     cd8:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
     cda:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
        if (lapse > adjustTimeInterval)
     cdc:	81 2f       	mov	r24, r17
     cde:	80 1b       	sub	r24, r16
     ce0:	89 30       	cpi	r24, 0x09	; 9
     ce2:	38 f4       	brcc	.+14     	; 0xcf2 <adjustMin+0x92>
     ce4:	81 e1       	ldi	r24, 0x11	; 17
     ce6:	9a e7       	ldi	r25, 0x7A	; 122
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <adjustMin+0x88>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <adjustMin+0x8e>
     cee:	00 00       	nop
     cf0:	c1 cf       	rjmp	.-126    	; 0xc74 <adjustMin+0x14>
     cf2:	e1 e1       	ldi	r30, 0x11	; 17
     cf4:	fa e7       	ldi	r31, 0x7A	; 122
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <adjustMin+0x96>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <adjustMin+0x9c>
     cfc:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustMin
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <adjustSec>:

void adjustSec()
{
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	00 d0       	rcall	.+0      	; 0xd18 <adjustSec+0xa>
     d18:	1f 92       	push	r1
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     d1e:	00 e0       	ldi	r16, 0x00	; 0
     d20:	10 e0       	ldi	r17, 0x00	; 0
    char strSec[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     d22:	80 e8       	ldi	r24, 0x80	; 128
     d24:	0e 94 01 02 	call	0x402	; 0x402 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d28:	8d e0       	ldi	r24, 0x0D	; 13
     d2a:	8a 95       	dec	r24
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <adjustSec+0x1c>
     d2e:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (sec)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"sec: ");
     d30:	8d e5       	ldi	r24, 0x5D	; 93
     d32:	94 e0       	ldi	r25, 0x04	; 4
     d34:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
     d38:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <sec>
     d3c:	4a e0       	ldi	r20, 0x0A	; 10
     d3e:	be 01       	movw	r22, r28
     d40:	6f 5f       	subi	r22, 0xFF	; 255
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	08 2e       	mov	r0, r24
     d46:	00 0c       	add	r0, r0
     d48:	99 0b       	sbc	r25, r25
     d4a:	0e 94 1c 08 	call	0x1038	; 0x1038 <__itoa_ncheck>
        itoa(sec, strSec, 10);
        lcd_write_string_4d((uint8_t *)strSec);
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     d5e:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d60:	e7 ea       	ldi	r30, 0xA7	; 167
     d62:	f1 e6       	ldi	r31, 0x61	; 97
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <adjustSec+0x56>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <adjustSec+0x5c>
     d6a:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     d6c:	84 fd       	sbrc	r24, 4
     d6e:	0c c0       	rjmp	.+24     	; 0xd88 <adjustSec+0x7a>
        {
            sec++;
     d70:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <sec>
     d74:	8f 5f       	subi	r24, 0xFF	; 255
            if (sec > 59)
     d76:	8c 33       	cpi	r24, 0x3C	; 60
     d78:	24 f4       	brge	.+8      	; 0xd82 <adjustSec+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            sec++;
     d7a:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <sec>
     d7e:	01 2f       	mov	r16, r17
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <adjustSec+0x7a>
            if (sec > 59)
                sec=0;
     d82:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <sec>
     d86:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
     d88:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
        if (lapse > adjustTimeInterval)
     d8a:	81 2f       	mov	r24, r17
     d8c:	80 1b       	sub	r24, r16
     d8e:	89 30       	cpi	r24, 0x09	; 9
     d90:	38 f4       	brcc	.+14     	; 0xda0 <adjustSec+0x92>
     d92:	81 e1       	ldi	r24, 0x11	; 17
     d94:	9a e7       	ldi	r25, 0x7A	; 122
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <adjustSec+0x88>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <adjustSec+0x8e>
     d9c:	00 00       	nop
     d9e:	c1 cf       	rjmp	.-126    	; 0xd22 <adjustSec+0x14>
     da0:	e1 e1       	ldi	r30, 0x11	; 17
     da2:	fa e7       	ldi	r31, 0x7A	; 122
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <adjustSec+0x96>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <adjustSec+0x9c>
     daa:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustSec
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <countButton>:

    uint8_t val;
    uint8_t DONE=0;


    loopCnt=0;
     dbc:	80 e0       	ldi	r24, 0x00	; 0
    prevLoop=0;
     dbe:	30 e0       	ldi	r19, 0x00	; 0
}//sysClockTest

//-----------------------------------
void countButton()
{
    uint8_t menuCnt=0;
     dc0:	20 e0       	ldi	r18, 0x00	; 0
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
            if (menuCnt != 0)
                DONE = 1;
     dc2:	51 e0       	ldi	r21, 0x01	; 1
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
     dc4:	60 e0       	ldi	r22, 0x00	; 0
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
     dc6:	42 e0       	ldi	r20, 0x02	; 2
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    {
        loopCnt++;
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
        curLoop = loopCnt;
        lapse = curLoop - prevLoop;
     dca:	98 2f       	mov	r25, r24
     dcc:	93 1b       	sub	r25, r19

        //menuSelectInterval is
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
     dce:	95 30       	cpi	r25, 0x05	; 5
     dd0:	10 f0       	brcs	.+4      	; 0xdd6 <countButton+0x1a>
        {
            if (menuCnt != 0)
     dd2:	21 11       	cpse	r18, r1
     dd4:	7a c0       	rjmp	.+244    	; 0xeca <countButton+0x10e>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
     dd6:	99 30       	cpi	r25, 0x09	; 9
     dd8:	08 f4       	brcc	.+2      	; 0xddc <countButton+0x20>
     dda:	6d c0       	rjmp	.+218    	; 0xeb6 <countButton+0xfa>
     ddc:	22 23       	and	r18, r18
     dde:	09 f4       	brne	.+2      	; 0xde2 <countButton+0x26>
     de0:	76 c0       	rjmp	.+236    	; 0xece <countButton+0x112>
     de2:	69 c0       	rjmp	.+210    	; 0xeb6 <countButton+0xfa>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
     de4:	96 2f       	mov	r25, r22
     de6:	e3 e2       	ldi	r30, 0x23	; 35
     de8:	f4 ef       	ldi	r31, 0xF4	; 244
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <countButton+0x2e>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <countButton+0x34>
     df0:	00 00       	nop
      {
        // for debounce
        _delay_ms(halfSec/2);
        menuCnt++;
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	e1 e1       	ldi	r30, 0x11	; 17
     df6:	fa e7       	ldi	r31, 0x7A	; 122
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <countButton+0x3c>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <countButton+0x42>
     dfe:	00 00       	nop

        //Pressing the button, lap time calculation should be reset
        //to give 1 sec of time to choose menuCnt
        prevLoop = loopCnt;
     e00:	38 2f       	mov	r19, r24
    //Get menuCnt by counting the button press
    //If pressing the button within 1 second of interval between each press,
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
     e02:	99 23       	and	r25, r25
     e04:	09 f3       	breq	.-62     	; 0xdc8 <countButton+0xc>

    //menuCnt has been set within 3sec of a PCINT occurence
    //  then, play WDT count for a corresponding alarm period.
    if (DONE)
    {
        if (DONE == 2)
     e06:	92 30       	cpi	r25, 0x02	; 2
     e08:	11 f4       	brne	.+4      	; 0xe0e <countButton+0x52>
            menuCnt = prevMenuCnt;
     e0a:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <prevMenuCnt>
        //visual cue to notifiy user selected menuCnt
        //blinkLED(menuCnt);
        //_delay_ms(halfSec);
        //turnOnLCDpower();
        //lcd_dispON();
        prevMenuCnt = menuCnt;
     e0e:	20 93 72 04 	sts	0x0472, r18	; 0x800472 <prevMenuCnt>
        switch (menuCnt)
     e12:	23 30       	cpi	r18, 0x03	; 3
     e14:	11 f1       	breq	.+68     	; 0xe5a <countButton+0x9e>
     e16:	28 f4       	brcc	.+10     	; 0xe22 <countButton+0x66>
     e18:	21 30       	cpi	r18, 0x01	; 1
     e1a:	49 f0       	breq	.+18     	; 0xe2e <countButton+0x72>
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	99 f0       	breq	.+38     	; 0xe46 <countButton+0x8a>
     e20:	40 c0       	rjmp	.+128    	; 0xea2 <countButton+0xe6>
     e22:	25 30       	cpi	r18, 0x05	; 5
     e24:	79 f1       	breq	.+94     	; 0xe84 <countButton+0xc8>
     e26:	e0 f0       	brcs	.+56     	; 0xe60 <countButton+0xa4>
     e28:	26 30       	cpi	r18, 0x06	; 6
     e2a:	c1 f1       	breq	.+112    	; 0xe9c <countButton+0xe0>
     e2c:	3a c0       	rjmp	.+116    	; 0xea2 <countButton+0xe6>
        {
            case 1:
                //lcd_dispWords();
                lcd_dispRealClock();
     e2e:	0e 94 0e 02 	call	0x41c	; 0x41c <lcd_dispRealClock>
     e32:	ff e3       	ldi	r31, 0x3F	; 63
     e34:	2d e0       	ldi	r18, 0x0D	; 13
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	f1 50       	subi	r31, 0x01	; 1
     e3a:	20 40       	sbci	r18, 0x00	; 0
     e3c:	80 40       	sbci	r24, 0x00	; 0
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <countButton+0x7c>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <countButton+0x86>
     e42:	00 00       	nop
     e44:	08 95       	ret
                _delay_ms(1000);
                break;
            case 2:
                //_delay_ms(1000);
                if (backLight == 0) 
     e46:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <backLight>
     e4a:	81 11       	cpse	r24, r1
     e4c:	03 c0       	rjmp	.+6      	; 0xe54 <countButton+0x98>
					turnOnLCDBacklight();
     e4e:	0e 94 aa 01 	call	0x354	; 0x354 <turnOnLCDBacklight>
     e52:	08 95       	ret
				else
					turnOffLCDBacklight();
     e54:	0e 94 af 01 	call	0x35e	; 0x35e <turnOffLCDBacklight>
     e58:	08 95       	ret
                //lcd_showDHT11();
                //_delay_ms(5000);
				
                break;
            case 3:
				lcd_dispMenu();
     e5a:	0e 94 8a 03 	call	0x714	; 0x714 <lcd_dispMenu>
                //turnOnLCDBacklight();
                //lcd_dispRealClock();
                //_delay_ms(7000);
                //turnOffLCDBacklight();
				//wdt_enable(WDTO_2S);
                break;
     e5e:	08 95       	ret
            case 4:
                //adjustClock();
                adjustMin();
     e60:	0e 94 30 06 	call	0xc60	; 0xc60 <adjustMin>
                adjustHour();
     e64:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <adjustHour>
                adjustSec();
     e68:	0e 94 87 06 	call	0xd0e	; 0xd0e <adjustSec>
                lcd_dispRealClock();
     e6c:	0e 94 0e 02 	call	0x41c	; 0x41c <lcd_dispRealClock>
     e70:	9f e3       	ldi	r25, 0x3F	; 63
     e72:	ed e0       	ldi	r30, 0x0D	; 13
     e74:	f3 e0       	ldi	r31, 0x03	; 3
     e76:	91 50       	subi	r25, 0x01	; 1
     e78:	e0 40       	sbci	r30, 0x00	; 0
     e7a:	f0 40       	sbci	r31, 0x00	; 0
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <countButton+0xba>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <countButton+0xc4>
     e80:	00 00       	nop
     e82:	08 95       	ret
                _delay_ms(1000);
                break;
            case 5:
                lcd_dispAccumulatedTime();
     e84:	0e 94 ff 02 	call	0x5fe	; 0x5fe <lcd_dispAccumulatedTime>
     e88:	2f e7       	ldi	r18, 0x7F	; 127
     e8a:	8a e1       	ldi	r24, 0x1A	; 26
     e8c:	96 e0       	ldi	r25, 0x06	; 6
     e8e:	21 50       	subi	r18, 0x01	; 1
     e90:	80 40       	sbci	r24, 0x00	; 0
     e92:	90 40       	sbci	r25, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <countButton+0xd2>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <countButton+0xdc>
     e98:	00 00       	nop
     e9a:	08 95       	ret
                _delay_ms(2000);
                break;
            case 6:
                lcd_dispProgInfo();
     e9c:	0e 94 56 03 	call	0x6ac	; 0x6ac <lcd_dispProgInfo>
                break;
     ea0:	08 95       	ret
            default:
                lcd_dispMenu();
     ea2:	0e 94 8a 03 	call	0x714	; 0x714 <lcd_dispMenu>
        //Enable watchdog timer interrupts
        // and begin counting for alarm
        //WDTCR |= _BV(WDTIE);
    }//if (DONE == 1)

}//countButton
     ea6:	08 95       	ret
     ea8:	e1 e1       	ldi	r30, 0x11	; 17
     eaa:	fa e7       	ldi	r31, 0x7A	; 122
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <countButton+0xf0>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <countButton+0xf6>
     eb2:	00 00       	nop
     eb4:	89 cf       	rjmp	.-238    	; 0xdc8 <countButton+0xc>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
     eb6:	1c 99       	sbic	0x03, 4	; 3
     eb8:	f7 cf       	rjmp	.-18     	; 0xea8 <countButton+0xec>
     eba:	94 cf       	rjmp	.-216    	; 0xde4 <countButton+0x28>
     ebc:	e1 e1       	ldi	r30, 0x11	; 17
     ebe:	fa e7       	ldi	r31, 0x7A	; 122
     ec0:	31 97       	sbiw	r30, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <countButton+0x104>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <countButton+0x10a>
     ec6:	00 00       	nop
     ec8:	9e cf       	rjmp	.-196    	; 0xe06 <countButton+0x4a>
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
            if (menuCnt != 0)
                DONE = 1;
     eca:	95 2f       	mov	r25, r21
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <countButton+0x114>
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
     ece:	94 2f       	mov	r25, r20

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
     ed0:	1c 9b       	sbis	0x03, 4	; 3
     ed2:	89 cf       	rjmp	.-238    	; 0xde6 <countButton+0x2a>
     ed4:	f3 cf       	rjmp	.-26     	; 0xebc <countButton+0x100>

00000ed6 <__divmodqi4>:
     ed6:	87 fb       	bst	r24, 7
     ed8:	08 2e       	mov	r0, r24
     eda:	06 26       	eor	r0, r22
     edc:	87 fd       	sbrc	r24, 7
     ede:	81 95       	neg	r24
     ee0:	67 fd       	sbrc	r22, 7
     ee2:	61 95       	neg	r22
     ee4:	0e 94 a2 07 	call	0xf44	; 0xf44 <__udivmodqi4>
     ee8:	0e f4       	brtc	.+2      	; 0xeec <__divmodqi4_1>
     eea:	91 95       	neg	r25

00000eec <__divmodqi4_1>:
     eec:	07 fc       	sbrc	r0, 7
     eee:	81 95       	neg	r24

00000ef0 <__divmodqi4_exit>:
     ef0:	08 95       	ret

00000ef2 <__divmodhi4>:
     ef2:	97 fb       	bst	r25, 7
     ef4:	07 2e       	mov	r0, r23
     ef6:	16 f4       	brtc	.+4      	; 0xefc <__divmodhi4+0xa>
     ef8:	00 94       	com	r0
     efa:	07 d0       	rcall	.+14     	; 0xf0a <__divmodhi4_neg1>
     efc:	77 fd       	sbrc	r23, 7
     efe:	09 d0       	rcall	.+18     	; 0xf12 <__divmodhi4_neg2>
     f00:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__udivmodhi4>
     f04:	07 fc       	sbrc	r0, 7
     f06:	05 d0       	rcall	.+10     	; 0xf12 <__divmodhi4_neg2>
     f08:	3e f4       	brtc	.+14     	; 0xf18 <__divmodhi4_exit>

00000f0a <__divmodhi4_neg1>:
     f0a:	90 95       	com	r25
     f0c:	81 95       	neg	r24
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	08 95       	ret

00000f12 <__divmodhi4_neg2>:
     f12:	70 95       	com	r23
     f14:	61 95       	neg	r22
     f16:	7f 4f       	sbci	r23, 0xFF	; 255

00000f18 <__divmodhi4_exit>:
     f18:	08 95       	ret

00000f1a <__tablejump2__>:
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	05 90       	lpm	r0, Z+
     f20:	f4 91       	lpm	r31, Z
     f22:	e0 2d       	mov	r30, r0
     f24:	09 94       	ijmp

00000f26 <__umulhisi3>:
     f26:	a2 9f       	mul	r26, r18
     f28:	b0 01       	movw	r22, r0
     f2a:	b3 9f       	mul	r27, r19
     f2c:	c0 01       	movw	r24, r0
     f2e:	a3 9f       	mul	r26, r19
     f30:	70 0d       	add	r23, r0
     f32:	81 1d       	adc	r24, r1
     f34:	11 24       	eor	r1, r1
     f36:	91 1d       	adc	r25, r1
     f38:	b2 9f       	mul	r27, r18
     f3a:	70 0d       	add	r23, r0
     f3c:	81 1d       	adc	r24, r1
     f3e:	11 24       	eor	r1, r1
     f40:	91 1d       	adc	r25, r1
     f42:	08 95       	ret

00000f44 <__udivmodqi4>:
     f44:	99 1b       	sub	r25, r25
     f46:	79 e0       	ldi	r23, 0x09	; 9
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <__udivmodqi4_ep>

00000f4a <__udivmodqi4_loop>:
     f4a:	99 1f       	adc	r25, r25
     f4c:	96 17       	cp	r25, r22
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <__udivmodqi4_ep>
     f50:	96 1b       	sub	r25, r22

00000f52 <__udivmodqi4_ep>:
     f52:	88 1f       	adc	r24, r24
     f54:	7a 95       	dec	r23
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__udivmodqi4_loop>
     f58:	80 95       	com	r24
     f5a:	08 95       	ret

00000f5c <__udivmodhi4>:
     f5c:	aa 1b       	sub	r26, r26
     f5e:	bb 1b       	sub	r27, r27
     f60:	51 e1       	ldi	r21, 0x11	; 17
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <__udivmodhi4_ep>

00000f64 <__udivmodhi4_loop>:
     f64:	aa 1f       	adc	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	a6 17       	cp	r26, r22
     f6a:	b7 07       	cpc	r27, r23
     f6c:	10 f0       	brcs	.+4      	; 0xf72 <__udivmodhi4_ep>
     f6e:	a6 1b       	sub	r26, r22
     f70:	b7 0b       	sbc	r27, r23

00000f72 <__udivmodhi4_ep>:
     f72:	88 1f       	adc	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	5a 95       	dec	r21
     f78:	a9 f7       	brne	.-22     	; 0xf64 <__udivmodhi4_loop>
     f7a:	80 95       	com	r24
     f7c:	90 95       	com	r25
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	08 95       	ret

00000f84 <atoi>:
     f84:	fc 01       	movw	r30, r24
     f86:	88 27       	eor	r24, r24
     f88:	99 27       	eor	r25, r25
     f8a:	e8 94       	clt
     f8c:	21 91       	ld	r18, Z+
     f8e:	20 32       	cpi	r18, 0x20	; 32
     f90:	e9 f3       	breq	.-6      	; 0xf8c <atoi+0x8>
     f92:	29 30       	cpi	r18, 0x09	; 9
     f94:	10 f0       	brcs	.+4      	; 0xf9a <atoi+0x16>
     f96:	2e 30       	cpi	r18, 0x0E	; 14
     f98:	c8 f3       	brcs	.-14     	; 0xf8c <atoi+0x8>
     f9a:	2b 32       	cpi	r18, 0x2B	; 43
     f9c:	41 f0       	breq	.+16     	; 0xfae <atoi+0x2a>
     f9e:	2d 32       	cpi	r18, 0x2D	; 45
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <atoi+0x2c>
     fa2:	68 94       	set
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <atoi+0x2a>
     fa6:	0e 94 27 08 	call	0x104e	; 0x104e <__mulhi_const_10>
     faa:	82 0f       	add	r24, r18
     fac:	91 1d       	adc	r25, r1
     fae:	21 91       	ld	r18, Z+
     fb0:	20 53       	subi	r18, 0x30	; 48
     fb2:	2a 30       	cpi	r18, 0x0A	; 10
     fb4:	c0 f3       	brcs	.-16     	; 0xfa6 <atoi+0x22>
     fb6:	1e f4       	brtc	.+6      	; 0xfbe <atoi+0x3a>
     fb8:	90 95       	com	r25
     fba:	81 95       	neg	r24
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	08 95       	ret

00000fc0 <strtok>:
     fc0:	44 e6       	ldi	r20, 0x64	; 100
     fc2:	54 e0       	ldi	r21, 0x04	; 4
     fc4:	0e 94 f5 07 	call	0xfea	; 0xfea <strtok_r>
     fc8:	08 95       	ret

00000fca <strcmp>:
     fca:	fb 01       	movw	r30, r22
     fcc:	dc 01       	movw	r26, r24
     fce:	8d 91       	ld	r24, X+
     fd0:	01 90       	ld	r0, Z+
     fd2:	80 19       	sub	r24, r0
     fd4:	01 10       	cpse	r0, r1
     fd6:	d9 f3       	breq	.-10     	; 0xfce <strcmp+0x4>
     fd8:	99 0b       	sbc	r25, r25
     fda:	08 95       	ret

00000fdc <strcpy>:
     fdc:	fb 01       	movw	r30, r22
     fde:	dc 01       	movw	r26, r24
     fe0:	01 90       	ld	r0, Z+
     fe2:	0d 92       	st	X+, r0
     fe4:	00 20       	and	r0, r0
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <strcpy+0x4>
     fe8:	08 95       	ret

00000fea <strtok_r>:
     fea:	fa 01       	movw	r30, r20
     fec:	a1 91       	ld	r26, Z+
     fee:	b0 81       	ld	r27, Z
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	19 f4       	brne	.+6      	; 0xffa <strtok_r+0x10>
     ff4:	10 97       	sbiw	r26, 0x00	; 0
     ff6:	e1 f0       	breq	.+56     	; 0x1030 <strtok_r+0x46>
     ff8:	cd 01       	movw	r24, r26
     ffa:	dc 01       	movw	r26, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0d 90       	ld	r0, X+
    1000:	00 20       	and	r0, r0
    1002:	11 f4       	brne	.+4      	; 0x1008 <strtok_r+0x1e>
    1004:	c0 01       	movw	r24, r0
    1006:	13 c0       	rjmp	.+38     	; 0x102e <strtok_r+0x44>
    1008:	fb 01       	movw	r30, r22
    100a:	21 91       	ld	r18, Z+
    100c:	22 23       	and	r18, r18
    100e:	19 f0       	breq	.+6      	; 0x1016 <strtok_r+0x2c>
    1010:	20 15       	cp	r18, r0
    1012:	d9 f7       	brne	.-10     	; 0x100a <strtok_r+0x20>
    1014:	f3 cf       	rjmp	.-26     	; 0xffc <strtok_r+0x12>
    1016:	fb 01       	movw	r30, r22
    1018:	21 91       	ld	r18, Z+
    101a:	20 15       	cp	r18, r0
    101c:	19 f4       	brne	.+6      	; 0x1024 <strtok_r+0x3a>
    101e:	1e 92       	st	-X, r1
    1020:	11 96       	adiw	r26, 0x01	; 1
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <strtok_r+0x46>
    1024:	22 23       	and	r18, r18
    1026:	c1 f7       	brne	.-16     	; 0x1018 <strtok_r+0x2e>
    1028:	0d 90       	ld	r0, X+
    102a:	00 20       	and	r0, r0
    102c:	a1 f7       	brne	.-24     	; 0x1016 <strtok_r+0x2c>
    102e:	d0 01       	movw	r26, r0
    1030:	fa 01       	movw	r30, r20
    1032:	a1 93       	st	Z+, r26
    1034:	b0 83       	st	Z, r27
    1036:	08 95       	ret

00001038 <__itoa_ncheck>:
    1038:	bb 27       	eor	r27, r27
    103a:	4a 30       	cpi	r20, 0x0A	; 10
    103c:	31 f4       	brne	.+12     	; 0x104a <__itoa_ncheck+0x12>
    103e:	99 23       	and	r25, r25
    1040:	22 f4       	brpl	.+8      	; 0x104a <__itoa_ncheck+0x12>
    1042:	bd e2       	ldi	r27, 0x2D	; 45
    1044:	90 95       	com	r25
    1046:	81 95       	neg	r24
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__utoa_common>

0000104e <__mulhi_const_10>:
    104e:	7a e0       	ldi	r23, 0x0A	; 10
    1050:	97 9f       	mul	r25, r23
    1052:	90 2d       	mov	r25, r0
    1054:	87 9f       	mul	r24, r23
    1056:	80 2d       	mov	r24, r0
    1058:	91 0d       	add	r25, r1
    105a:	11 24       	eor	r1, r1
    105c:	08 95       	ret

0000105e <__utoa_ncheck>:
    105e:	bb 27       	eor	r27, r27

00001060 <__utoa_common>:
    1060:	fb 01       	movw	r30, r22
    1062:	55 27       	eor	r21, r21
    1064:	aa 27       	eor	r26, r26
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	aa 1f       	adc	r26, r26
    106c:	a4 17       	cp	r26, r20
    106e:	10 f0       	brcs	.+4      	; 0x1074 <__utoa_common+0x14>
    1070:	a4 1b       	sub	r26, r20
    1072:	83 95       	inc	r24
    1074:	50 51       	subi	r21, 0x10	; 16
    1076:	b9 f7       	brne	.-18     	; 0x1066 <__utoa_common+0x6>
    1078:	a0 5d       	subi	r26, 0xD0	; 208
    107a:	aa 33       	cpi	r26, 0x3A	; 58
    107c:	08 f0       	brcs	.+2      	; 0x1080 <__utoa_common+0x20>
    107e:	a9 5d       	subi	r26, 0xD9	; 217
    1080:	a1 93       	st	Z+, r26
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	79 f7       	brne	.-34     	; 0x1064 <__utoa_common+0x4>
    1086:	b1 11       	cpse	r27, r1
    1088:	b1 93       	st	Z+, r27
    108a:	11 92       	st	Z+, r1
    108c:	cb 01       	movw	r24, r22
    108e:	0c 94 49 08 	jmp	0x1092	; 0x1092 <strrev>

00001092 <strrev>:
    1092:	dc 01       	movw	r26, r24
    1094:	fc 01       	movw	r30, r24
    1096:	67 2f       	mov	r22, r23
    1098:	71 91       	ld	r23, Z+
    109a:	77 23       	and	r23, r23
    109c:	e1 f7       	brne	.-8      	; 0x1096 <strrev+0x4>
    109e:	32 97       	sbiw	r30, 0x02	; 2
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <strrev+0x18>
    10a2:	7c 91       	ld	r23, X
    10a4:	6d 93       	st	X+, r22
    10a6:	70 83       	st	Z, r23
    10a8:	62 91       	ld	r22, -Z
    10aa:	ae 17       	cp	r26, r30
    10ac:	bf 07       	cpc	r27, r31
    10ae:	c8 f3       	brcs	.-14     	; 0x10a2 <strrev+0x10>
    10b0:	08 95       	ret

000010b2 <_exit>:
    10b2:	f8 94       	cli

000010b4 <__stop_program>:
    10b4:	ff cf       	rjmp	.-2      	; 0x10b4 <__stop_program>
