
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000370  00800100  000012c0  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800470  00800470  000016c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f06  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001173  00000000  00000000  0000586a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000196d  00000000  00000000  000069dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  0000834c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000918  00000000  00000000  00008918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000178b  00000000  00000000  00009230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000a9bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_3>
      10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      18:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_6>
      1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      68:	b6 01       	movw	r22, r12
      6a:	ba 01       	movw	r22, r20
      6c:	b6 01       	movw	r22, r12
      6e:	be 01       	movw	r22, r28
      70:	b6 01       	movw	r22, r12
      72:	be 01       	movw	r22, r28
      74:	b6 01       	movw	r22, r12
      76:	b6 01       	movw	r22, r12
      78:	be 01       	movw	r22, r28
      7a:	b6 01       	movw	r22, r12
      7c:	be 01       	movw	r22, r28
      7e:	b6 01       	movw	r22, r12
      80:	12 03       	mulsu	r17, r18
      82:	1b 03       	fmul	r17, r19
      84:	24 03       	mulsu	r18, r20
      86:	2d 03       	fmul	r18, r21
      88:	36 03       	mulsu	r19, r22
      8a:	3f 03       	fmul	r19, r23
      8c:	48 03       	fmul	r20, r16

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	14 e0       	ldi	r17, 0x04	; 4
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e0 ec       	ldi	r30, 0xC0	; 192
      a2:	f2 e1       	ldi	r31, 0x12	; 18
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a0 37       	cpi	r26, 0x70	; 112
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	24 e0       	ldi	r18, 0x04	; 4
      b2:	a0 e7       	ldi	r26, 0x70	; 112
      b4:	b4 e0       	ldi	r27, 0x04	; 4
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a0 38       	cpi	r26, 0x80	; 128
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 55 05 	call	0xaaa	; 0xaaa <main>
      c4:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <Request>:
 uint8_t c=0;
 //,I_RH,D_RH,I_Temp,D_Temp,CheckSum;

 void Request()				/* Microcontroller send start pulse/request */
 {
	 lcd_DHT11_ddr |= (1<<lcd_DHT11_bit);
      cc:	21 9a       	sbi	0x04, 1	; 4
	 lcd_DHT11_portOUT &= ~(1<<lcd_DHT11_bit);	/* set to low pin */
      ce:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d0:	87 e8       	ldi	r24, 0x87	; 135
      d2:	93 e1       	ldi	r25, 0x13	; 19
      d4:	01 97       	sbiw	r24, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <Request+0x8>
      d8:	00 c0       	rjmp	.+0      	; 0xda <Request+0xe>
      da:	00 00       	nop
	 _delay_ms(20);			/* wait for 20ms */
	 lcd_DHT11_portOUT |= (1<<lcd_DHT11_bit);	/* set to high pin */
      dc:	29 9a       	sbi	0x05, 1	; 5
      de:	08 95       	ret

000000e0 <Response>:
 }

 void Response()				/* receive response from DHT11 */
 {
	 lcd_DHT11_ddr &= ~(1<<lcd_DHT11_bit);
      e0:	21 98       	cbi	0x04, 1	; 4
	 while(lcd_DHT11_portIN & (1<<lcd_DHT11_bit));
      e2:	19 99       	sbic	0x03, 1	; 3
      e4:	fe cf       	rjmp	.-4      	; 0xe2 <Response+0x2>
	 while((lcd_DHT11_portIN & (1<<lcd_DHT11_bit))==0);
      e6:	19 9b       	sbis	0x03, 1	; 3
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <Response+0x6>
	 while(lcd_DHT11_portIN & (1<<lcd_DHT11_bit));
      ea:	19 99       	sbic	0x03, 1	; 3
      ec:	fe cf       	rjmp	.-4      	; 0xea <Response+0xa>
 }
      ee:	08 95       	ret

000000f0 <Receive_data>:

 uint8_t Receive_data()			/* receive data */
 {
      f0:	88 e0       	ldi	r24, 0x08	; 8
      f2:	90 e0       	ldi	r25, 0x00	; 0
	 for (int q=0; q<8; q++)
	 {
		 while((lcd_DHT11_portIN & (1<<lcd_DHT11_bit)) == 0);  /* check received bit 0 or 1 */
      f4:	19 9b       	sbis	0x03, 1	; 3
      f6:	fe cf       	rjmp	.-4      	; 0xf4 <Receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f8:	2a e0       	ldi	r18, 0x0A	; 10
      fa:	2a 95       	dec	r18
      fc:	f1 f7       	brne	.-4      	; 0xfa <Receive_data+0xa>
		 _delay_us(30);
		 if(lcd_DHT11_portIN & (1<<lcd_DHT11_bit))/* if high pulse is greater than 30ms */
      fe:	19 9b       	sbis	0x03, 1	; 3
     100:	07 c0       	rjmp	.+14     	; 0x110 <Receive_data+0x20>
		 c = (c<<1)|(0x01);	/* then its logic HIGH */
     102:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <c>
     106:	22 0f       	add	r18, r18
     108:	21 60       	ori	r18, 0x01	; 1
     10a:	20 93 72 04 	sts	0x0472, r18	; 0x800472 <c>
     10e:	05 c0       	rjmp	.+10     	; 0x11a <Receive_data+0x2a>
		 else			/* otherwise its logic LOW */
		 c = (c<<1);
     110:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <c>
     114:	22 0f       	add	r18, r18
     116:	20 93 72 04 	sts	0x0472, r18	; 0x800472 <c>
		 while(lcd_DHT11_portIN & (1<<lcd_DHT11_bit));
     11a:	19 99       	sbic	0x03, 1	; 3
     11c:	fe cf       	rjmp	.-4      	; 0x11a <Receive_data+0x2a>
     11e:	01 97       	sbiw	r24, 0x01	; 1
	 while(lcd_DHT11_portIN & (1<<lcd_DHT11_bit));
 }

 uint8_t Receive_data()			/* receive data */
 {
	 for (int q=0; q<8; q++)
     120:	49 f7       	brne	.-46     	; 0xf4 <Receive_data+0x4>
		 else			/* otherwise its logic LOW */
		 c = (c<<1);
		 while(lcd_DHT11_portIN & (1<<lcd_DHT11_bit));
	 }
	 return c;
 }
     122:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <c>
     126:	08 95       	ret

00000128 <chkDHT11>:

 int chkDHT11(uint8_t *humidInt, uint8_t *humidDec,uint8_t *tempInt, uint8_t *tempDec, uint8_t *chkSum)
 {
     128:	af 92       	push	r10
     12a:	bf 92       	push	r11
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ef 92       	push	r14
     132:	ff 92       	push	r15
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	5c 01       	movw	r10, r24
     13e:	6b 01       	movw	r12, r22
     140:	7a 01       	movw	r14, r20
     142:	e9 01       	movw	r28, r18
	//char data[5];
	 
	Request();		/* send start pulse */
     144:	0e 94 66 00 	call	0xcc	; 0xcc <Request>
	Response();		/* receive response */
     148:	0e 94 70 00 	call	0xe0	; 0xe0 <Response>
	*humidInt=Receive_data();	/* store first eight bit in I_RH */
     14c:	0e 94 78 00 	call	0xf0	; 0xf0 <Receive_data>
     150:	f5 01       	movw	r30, r10
     152:	80 83       	st	Z, r24
	*humidDec=Receive_data();	/* store next eight bit in D_RH */
     154:	0e 94 78 00 	call	0xf0	; 0xf0 <Receive_data>
     158:	f6 01       	movw	r30, r12
     15a:	80 83       	st	Z, r24
	*tempInt=Receive_data();	/* store next eight bit in I_Temp */
     15c:	0e 94 78 00 	call	0xf0	; 0xf0 <Receive_data>
     160:	f7 01       	movw	r30, r14
     162:	80 83       	st	Z, r24
	*tempDec=Receive_data();	/* store next eight bit in D_Temp */
     164:	0e 94 78 00 	call	0xf0	; 0xf0 <Receive_data>
     168:	88 83       	st	Y, r24
	*chkSum=Receive_data();	/* store next eight bit in CheckSum */
     16a:	0e 94 78 00 	call	0xf0	; 0xf0 <Receive_data>
     16e:	f8 01       	movw	r30, r16
     170:	80 83       	st	Z, r24
		 
	if ((*humidInt + *humidDec + *tempInt + *tempDec) != *chkSum)
     172:	f5 01       	movw	r30, r10
     174:	90 81       	ld	r25, Z
     176:	f6 01       	movw	r30, r12
     178:	60 81       	ld	r22, Z
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	69 0f       	add	r22, r25
     17e:	71 1d       	adc	r23, r1
     180:	f7 01       	movw	r30, r14
     182:	90 81       	ld	r25, Z
     184:	ab 01       	movw	r20, r22
     186:	49 0f       	add	r20, r25
     188:	51 1d       	adc	r21, r1
     18a:	98 81       	ld	r25, Y
     18c:	9a 01       	movw	r18, r20
     18e:	29 0f       	add	r18, r25
     190:	31 1d       	adc	r19, r1
     192:	48 2f       	mov	r20, r24
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	24 17       	cp	r18, r20
     19c:	35 07       	cpc	r19, r21
     19e:	11 f4       	brne	.+4      	; 0x1a4 <chkDHT11+0x7c>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e0       	ldi	r25, 0x00	; 0
		//itoa(I_RH,data,10);
		return (0);
	}
		 
	_delay_ms(10);
     1a4:	91 95       	neg	r25
     1a6:	81 95       	neg	r24
     1a8:	91 09       	sbc	r25, r1
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	1f 91       	pop	r17
     1b0:	0f 91       	pop	r16
     1b2:	ff 90       	pop	r15
     1b4:	ef 90       	pop	r14
     1b6:	df 90       	pop	r13
     1b8:	cf 90       	pop	r12
     1ba:	bf 90       	pop	r11
     1bc:	af 90       	pop	r10
     1be:	08 95       	ret

000001c0 <__vector_3>:
    EIMSK = 0x00;

    TIMSK0 = 0x02; //timer 0 interrupt sources

    PRR = 0x00; //power controller
    sei(); //re-enable interrupts
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
     1dc:	bf 93       	push	r27
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	ef 93       	push	r30
     1e4:	ff 93       	push	r31
     1e6:	1c 9b       	sbis	0x03, 4	; 3
     1e8:	0a c0       	rjmp	.+20     	; 0x1fe <__vector_3+0x3e>
     1ea:	cb e6       	ldi	r28, 0x6B	; 107
     1ec:	d0 e0       	ldi	r29, 0x00	; 0
     1ee:	88 81       	ld	r24, Y
     1f0:	8f 7e       	andi	r24, 0xEF	; 239
     1f2:	88 83       	st	Y, r24
     1f4:	0e 94 b3 07 	call	0xf66	; 0xf66 <countButton>
     1f8:	88 81       	ld	r24, Y
     1fa:	80 61       	ori	r24, 0x10	; 16
     1fc:	88 83       	st	Y, r24
     1fe:	8f e4       	ldi	r24, 0x4F	; 79
     200:	93 ec       	ldi	r25, 0xC3	; 195
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <__vector_3+0x42>
     206:	00 c0       	rjmp	.+0      	; 0x208 <__vector_3+0x48>
     208:	00 00       	nop
     20a:	ff 91       	pop	r31
     20c:	ef 91       	pop	r30
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	bf 91       	pop	r27
     214:	af 91       	pop	r26
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	7f 91       	pop	r23
     21c:	6f 91       	pop	r22
     21e:	5f 91       	pop	r21
     220:	4f 91       	pop	r20
     222:	3f 91       	pop	r19
     224:	2f 91       	pop	r18
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <check_wdt>:
     230:	04 b6       	in	r0, 0x34	; 52
     232:	03 fe       	sbrs	r0, 3
     234:	09 c0       	rjmp	.+18     	; 0x248 <check_wdt+0x18>
     236:	84 b7       	in	r24, 0x34	; 52
     238:	87 7f       	andi	r24, 0xF7	; 247
     23a:	84 bf       	out	0x34, r24	; 52
     23c:	e0 e6       	ldi	r30, 0x60	; 96
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	88 61       	ori	r24, 0x18	; 24
     244:	80 83       	st	Z, r24
     246:	10 82       	st	Z, r1
     248:	08 95       	ret

0000024a <setup_wdt>:
     24a:	e0 e6       	ldi	r30, 0x60	; 96
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 61       	ori	r24, 0x18	; 24
     252:	80 83       	st	Z, r24
     254:	81 e6       	ldi	r24, 0x61	; 97
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <initINT>:
     25a:	f8 94       	cli
     25c:	e8 e6       	ldi	r30, 0x68	; 104
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	81 60       	ori	r24, 0x01	; 1
     264:	80 83       	st	Z, r24
     266:	eb e6       	ldi	r30, 0x6B	; 107
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	80 61       	ori	r24, 0x10	; 16
     26e:	80 83       	st	Z, r24
     270:	0e 94 18 01 	call	0x230	; 0x230 <check_wdt>
     274:	0e 94 25 01 	call	0x24a	; 0x24a <setup_wdt>
     278:	78 94       	sei
     27a:	08 95       	ret

0000027c <proceedClock>:
}

void proceedClock()
{
    //WDT interrupt occurs every 8 seconds
    sec += 8;
     27c:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <sec>
     280:	88 5f       	subi	r24, 0xF8	; 248
     282:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sec>
    accumulatedSec += 8;
     286:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <accumulatedSec>
     28a:	28 5f       	subi	r18, 0xF8	; 248
     28c:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <accumulatedSec>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
     290:	8c 33       	cpi	r24, 0x3C	; 60
     292:	5c f0       	brlt	.+22     	; 0x2aa <proceedClock+0x2e>
    {
        sec%=60;
        min++;
     294:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <min>
     298:	9f 5f       	subi	r25, 0xFF	; 255
     29a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <min>

    //real-time fetched from compiled time constant __TIME__
    //calculate minutes
    if (sec >= 60)
    {
        sec%=60;
     29e:	6c e3       	ldi	r22, 0x3C	; 60
     2a0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__divmodqi4>
        min++;
        sec += 2;
     2a4:	9e 5f       	subi	r25, 0xFE	; 254
     2a6:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <sec>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
     2aa:	2c 33       	cpi	r18, 0x3C	; 60
     2ac:	64 f0       	brlt	.+24     	; 0x2c6 <proceedClock+0x4a>
    {
        accumulatedSec%=60;
        accumulatedMin++;
     2ae:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <accumulatedMin>
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <accumulatedMin>
    }
    //system run-time acculated time
    //calculate minutes
    if (accumulatedSec >= 60)
    {
        accumulatedSec%=60;
     2b8:	82 2f       	mov	r24, r18
     2ba:	6c e3       	ldi	r22, 0x3C	; 60
     2bc:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__divmodqi4>
        accumulatedMin++;
        accumulatedSec += 2;
     2c0:	9e 5f       	subi	r25, 0xFE	; 254
     2c2:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <accumulatedSec>
    }

    //real-time fetched from compiled time constant __TIME__
    //calculate hours
    if (min >= 60)
     2c6:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <min>
     2ca:	8c 33       	cpi	r24, 0x3C	; 60
     2cc:	54 f0       	brlt	.+20     	; 0x2e2 <proceedClock+0x66>
    {
        min%=60;
     2ce:	6c e3       	ldi	r22, 0x3C	; 60
     2d0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__divmodqi4>
     2d4:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <min>
        hour++;
     2d8:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <hour>
     2dc:	8f 5f       	subi	r24, 0xFF	; 255
     2de:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <hour>
    }
    //system run-time acculated time
    //calculate hours
    //if ((accumulatedMin == 60) && (hourlyAdjusted == 0))
    if (accumulatedMin == 60)
     2e2:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <accumulatedMin>
     2e6:	8c 33       	cpi	r24, 0x3C	; 60
     2e8:	61 f4       	brne	.+24     	; 0x302 <proceedClock+0x86>
    {
        // adjust time by experiments
        //hourlyAdjusted = 1;
        sec -= 20;
     2ea:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <sec>
     2ee:	84 51       	subi	r24, 0x14	; 20
     2f0:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sec>
        accumulatedMin = 0;
     2f4:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <accumulatedMin>
        accumulatedHour++;
     2f8:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accumulatedHour>
     2fc:	8f 5f       	subi	r24, 0xFF	; 255
     2fe:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <accumulatedHour>
    }
    /*
    if (accumulatedMin == 59)
        hourlyAdjusted = 0;
    */
    if (hour >= 24)
     302:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <hour>
     306:	88 31       	cpi	r24, 0x18	; 24
     308:	04 f1       	brlt	.+64     	; 0x34a <proceedClock+0xce>
    {
        hour=0;
     30a:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <hour>
        date++;
     30e:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <date>
     312:	8f 5f       	subi	r24, 0xFF	; 255
     314:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <date>
        day++;
     318:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <day>
     31c:	8f 5f       	subi	r24, 0xFF	; 255
        if (day >= 7)
     31e:	87 30       	cpi	r24, 0x07	; 7
     320:	1c f4       	brge	.+6      	; 0x328 <proceedClock+0xac>
    */
    if (hour >= 24)
    {
        hour=0;
        date++;
        day++;
     322:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <day>
     326:	11 c0       	rjmp	.+34     	; 0x34a <proceedClock+0xce>
        if (day >= 7)
            day %= 7;
     328:	93 e9       	ldi	r25, 0x93	; 147
     32a:	89 02       	muls	r24, r25
     32c:	91 2d       	mov	r25, r1
     32e:	11 24       	eor	r1, r1
     330:	98 0f       	add	r25, r24
     332:	95 95       	asr	r25
     334:	95 95       	asr	r25
     336:	87 fd       	sbrc	r24, 7
     338:	93 95       	inc	r25
     33a:	29 2f       	mov	r18, r25
     33c:	22 0f       	add	r18, r18
     33e:	22 0f       	add	r18, r18
     340:	22 0f       	add	r18, r18
     342:	29 1b       	sub	r18, r25
     344:	82 1b       	sub	r24, r18
     346:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <day>
    }
    switch (month)
     34a:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <month>
     34e:	82 2f       	mov	r24, r18
     350:	02 2e       	mov	r0, r18
     352:	00 0c       	add	r0, r0
     354:	99 0b       	sbc	r25, r25
     356:	aa 0b       	sbc	r26, r26
     358:	bb 0b       	sbc	r27, r27
     35a:	fc 01       	movw	r30, r24
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	ec 30       	cpi	r30, 0x0C	; 12
     360:	f1 05       	cpc	r31, r1
     362:	60 f4       	brcc	.+24     	; 0x37c <proceedClock+0x100>
     364:	ec 5c       	subi	r30, 0xCC	; 204
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__tablejump2__>
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            monthEndDate = 31;
     36c:	8f e1       	ldi	r24, 0x1F	; 31
     36e:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <monthEndDate>
            break;
     372:	07 c0       	rjmp	.+14     	; 0x382 <proceedClock+0x106>
        case 2:
            monthEndDate = 28;
     374:	8c e1       	ldi	r24, 0x1C	; 28
     376:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <monthEndDate>
            break;
     37a:	03 c0       	rjmp	.+6      	; 0x382 <proceedClock+0x106>
        default:
            monthEndDate = 30;
     37c:	8e e1       	ldi	r24, 0x1E	; 30
     37e:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <monthEndDate>
    }//switch (month)

    if (date > monthEndDate)
     382:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <date>
     386:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <monthEndDate>
     38a:	89 17       	cp	r24, r25
     38c:	34 f4       	brge	.+12     	; 0x39a <proceedClock+0x11e>
    {
        date=1;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <date>
        month++;
     394:	2f 5f       	subi	r18, 0xFF	; 255
     396:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <month>
    }

    if (month > 12)
     39a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <month>
     39e:	8d 30       	cpi	r24, 0x0D	; 13
     3a0:	44 f0       	brlt	.+16     	; 0x3b2 <proceedClock+0x136>
    {
        month=1;
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
        year++;
     3a8:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <year>
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <year>
     3b2:	08 95       	ret

000003b4 <__vector_6>:
	_delay_ms(200); // for debounce
}//ISR(PCINT0_vect)

//-----------------------------------
ISR(WDT_vect)
{
     3b4:	1f 92       	push	r1
     3b6:	0f 92       	push	r0
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	0f 92       	push	r0
     3bc:	11 24       	eor	r1, r1
     3be:	2f 93       	push	r18
     3c0:	3f 93       	push	r19
     3c2:	4f 93       	push	r20
     3c4:	5f 93       	push	r21
     3c6:	6f 93       	push	r22
     3c8:	7f 93       	push	r23
     3ca:	8f 93       	push	r24
     3cc:	9f 93       	push	r25
     3ce:	af 93       	push	r26
     3d0:	bf 93       	push	r27
     3d2:	ef 93       	push	r30
     3d4:	ff 93       	push	r31
    //PORTB |= _BV(PB4);
    proceedClock();
     3d6:	0e 94 3e 01 	call	0x27c	; 0x27c <proceedClock>
    lcd_dispWords(wd%MAXWORDCNT);
     3da:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <wd>
     3de:	9d ec       	ldi	r25, 0xCD	; 205
     3e0:	89 9f       	mul	r24, r25
     3e2:	91 2d       	mov	r25, r1
     3e4:	11 24       	eor	r1, r1
     3e6:	96 95       	lsr	r25
     3e8:	96 95       	lsr	r25
     3ea:	96 95       	lsr	r25
     3ec:	99 0f       	add	r25, r25
     3ee:	29 2f       	mov	r18, r25
     3f0:	22 0f       	add	r18, r18
     3f2:	22 0f       	add	r18, r18
     3f4:	92 0f       	add	r25, r18
     3f6:	89 1b       	sub	r24, r25
     3f8:	0e 94 81 04 	call	0x902	; 0x902 <lcd_dispWords>
    wd++;
     3fc:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <wd>
     400:	8f 5f       	subi	r24, 0xFF	; 255
     402:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <wd>
    //lcd_dispRealClock();
    //PORTB &= ~_BV(PB4);
}//ISR(WDT_vect)
     406:	ff 91       	pop	r31
     408:	ef 91       	pop	r30
     40a:	bf 91       	pop	r27
     40c:	af 91       	pop	r26
     40e:	9f 91       	pop	r25
     410:	8f 91       	pop	r24
     412:	7f 91       	pop	r23
     414:	6f 91       	pop	r22
     416:	5f 91       	pop	r21
     418:	4f 91       	pop	r20
     41a:	3f 91       	pop	r19
     41c:	2f 91       	pop	r18
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <turnOnLCDBacklight>:
    _delay_ms(1000);

    lcd_write_instruction_4d(lcd_DisplayOff);
    _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    _delay_ms(1000);
    lcd_write_instruction_4d(lcd_DisplayOn);
     428:	28 98       	cbi	0x05, 0	; 5
     42a:	08 95       	ret

0000042c <turnOffLCDBacklight>:
     42c:	28 9a       	sbi	0x05, 0	; 5
     42e:	08 95       	ret

00000430 <lcd_write_4>:
     430:	5f 98       	cbi	0x0b, 7	; 11
     432:	88 23       	and	r24, r24
     434:	0c f4       	brge	.+2      	; 0x438 <lcd_write_4+0x8>
     436:	5f 9a       	sbi	0x0b, 7	; 11
     438:	5e 98       	cbi	0x0b, 6	; 11
     43a:	86 fd       	sbrc	r24, 6
     43c:	5e 9a       	sbi	0x0b, 6	; 11
     43e:	5d 98       	cbi	0x0b, 5	; 11
     440:	85 fd       	sbrc	r24, 5
     442:	5d 9a       	sbi	0x0b, 5	; 11
     444:	5c 98       	cbi	0x0b, 4	; 11
     446:	84 fd       	sbrc	r24, 4
     448:	5c 9a       	sbi	0x0b, 4	; 11
     44a:	5b 9a       	sbi	0x0b, 3	; 11
     44c:	00 00       	nop
     44e:	5b 98       	cbi	0x0b, 3	; 11
     450:	00 00       	nop
     452:	08 95       	ret

00000454 <lcd_write_character_4d>:
     454:	cf 93       	push	r28
     456:	c8 2f       	mov	r28, r24
     458:	5a 9a       	sbi	0x0b, 2	; 11
     45a:	5b 98       	cbi	0x0b, 3	; 11
     45c:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_4>
     460:	8c 2f       	mov	r24, r28
     462:	82 95       	swap	r24
     464:	80 7f       	andi	r24, 0xF0	; 240
     466:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_4>
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <lcd_write_string_4d>:
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	00 d0       	rcall	.+0      	; 0x478 <lcd_write_string_4d+0xa>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	8c 01       	movw	r16, r24
     47e:	1a 82       	std	Y+2, r1	; 0x02
     480:	19 82       	std	Y+1, r1	; 0x01
     482:	e9 81       	ldd	r30, Y+1	; 0x01
     484:	fa 81       	ldd	r31, Y+2	; 0x02
     486:	e8 0f       	add	r30, r24
     488:	f9 1f       	adc	r31, r25
     48a:	80 81       	ld	r24, Z
     48c:	88 23       	and	r24, r24
     48e:	c1 f0       	breq	.+48     	; 0x4c0 <lcd_write_string_4d+0x52>
     490:	e9 81       	ldd	r30, Y+1	; 0x01
     492:	fa 81       	ldd	r31, Y+2	; 0x02
     494:	e0 0f       	add	r30, r16
     496:	f1 1f       	adc	r31, r17
     498:	80 81       	ld	r24, Z
     49a:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_write_character_4d>
     49e:	29 81       	ldd	r18, Y+1	; 0x01
     4a0:	3a 81       	ldd	r19, Y+2	; 0x02
     4a2:	2f 5f       	subi	r18, 0xFF	; 255
     4a4:	3f 4f       	sbci	r19, 0xFF	; 255
     4a6:	3a 83       	std	Y+2, r19	; 0x02
     4a8:	29 83       	std	Y+1, r18	; 0x01
     4aa:	8d e0       	ldi	r24, 0x0D	; 13
     4ac:	8a 95       	dec	r24
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <lcd_write_string_4d+0x3e>
     4b0:	00 00       	nop
     4b2:	e9 81       	ldd	r30, Y+1	; 0x01
     4b4:	fa 81       	ldd	r31, Y+2	; 0x02
     4b6:	e0 0f       	add	r30, r16
     4b8:	f1 1f       	adc	r31, r17
     4ba:	80 81       	ld	r24, Z
     4bc:	81 11       	cpse	r24, r1
     4be:	e8 cf       	rjmp	.-48     	; 0x490 <lcd_write_string_4d+0x22>
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	08 95       	ret

000004ce <lcd_write_instruction_4d>:
     4ce:	cf 93       	push	r28
     4d0:	c8 2f       	mov	r28, r24
     4d2:	5a 98       	cbi	0x0b, 2	; 11
     4d4:	5b 98       	cbi	0x0b, 3	; 11
     4d6:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_4>
     4da:	8c 2f       	mov	r24, r28
     4dc:	82 95       	swap	r24
     4de:	80 7f       	andi	r24, 0xF0	; 240
     4e0:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_4>
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <lcd_dispRealClock>:
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	6c 97       	sbiw	r28, 0x1c	; 28
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	80 e8       	ldi	r24, 0x80	; 128
     4fe:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     502:	8d e0       	ldi	r24, 0x0D	; 13
     504:	8a 95       	dec	r24
     506:	f1 f7       	brne	.-4      	; 0x504 <lcd_dispRealClock+0x1c>
     508:	00 00       	nop
     50a:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <hour>
     50e:	4a e0       	ldi	r20, 0x0A	; 10
     510:	be 01       	movw	r22, r28
     512:	69 5f       	subi	r22, 0xF9	; 249
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	08 2e       	mov	r0, r24
     518:	00 0c       	add	r0, r0
     51a:	99 0b       	sbc	r25, r25
     51c:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     520:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <min>
     524:	4a e0       	ldi	r20, 0x0A	; 10
     526:	be 01       	movw	r22, r28
     528:	6c 5f       	subi	r22, 0xFC	; 252
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	08 2e       	mov	r0, r24
     52e:	00 0c       	add	r0, r0
     530:	99 0b       	sbc	r25, r25
     532:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     536:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <sec>
     53a:	4a e0       	ldi	r20, 0x0A	; 10
     53c:	be 01       	movw	r22, r28
     53e:	6f 5f       	subi	r22, 0xFF	; 255
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	08 2e       	mov	r0, r24
     544:	00 0c       	add	r0, r0
     546:	99 0b       	sbc	r25, r25
     548:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     54c:	ce 01       	movw	r24, r28
     54e:	07 96       	adiw	r24, 0x07	; 7
     550:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     554:	85 ee       	ldi	r24, 0xE5	; 229
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     55c:	ce 01       	movw	r24, r28
     55e:	04 96       	adiw	r24, 0x04	; 4
     560:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     564:	85 ee       	ldi	r24, 0xE5	; 229
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     56c:	ce 01       	movw	r24, r28
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     574:	86 ef       	ldi	r24, 0xF6	; 246
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     57c:	8d e0       	ldi	r24, 0x0D	; 13
     57e:	8a 95       	dec	r24
     580:	f1 f7       	brne	.-4      	; 0x57e <lcd_dispRealClock+0x96>
     582:	00 00       	nop
     584:	80 ec       	ldi	r24, 0xC0	; 192
     586:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     58a:	8d e0       	ldi	r24, 0x0D	; 13
     58c:	8a 95       	dec	r24
     58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_dispRealClock+0xa4>
     590:	00 00       	nop
     592:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <year>
     596:	4a e0       	ldi	r20, 0x0A	; 10
     598:	be 01       	movw	r22, r28
     59a:	66 5f       	subi	r22, 0xF6	; 246
     59c:	7f 4f       	sbci	r23, 0xFF	; 255
     59e:	08 2e       	mov	r0, r24
     5a0:	00 0c       	add	r0, r0
     5a2:	99 0b       	sbc	r25, r25
     5a4:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     5a8:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <month>
     5ac:	4a e0       	ldi	r20, 0x0A	; 10
     5ae:	be 01       	movw	r22, r28
     5b0:	63 5f       	subi	r22, 0xF3	; 243
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	08 2e       	mov	r0, r24
     5b6:	00 0c       	add	r0, r0
     5b8:	99 0b       	sbc	r25, r25
     5ba:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     5be:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <date>
     5c2:	4a e0       	ldi	r20, 0x0A	; 10
     5c4:	be 01       	movw	r22, r28
     5c6:	60 5f       	subi	r22, 0xF0	; 240
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	08 2e       	mov	r0, r24
     5cc:	00 0c       	add	r0, r0
     5ce:	99 0b       	sbc	r25, r25
     5d0:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     5d4:	ce 01       	movw	r24, r28
     5d6:	0a 96       	adiw	r24, 0x0a	; 10
     5d8:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     5dc:	87 ee       	ldi	r24, 0xE7	; 231
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     5e4:	ce 01       	movw	r24, r28
     5e6:	0d 96       	adiw	r24, 0x0d	; 13
     5e8:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     5ec:	87 ee       	ldi	r24, 0xE7	; 231
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     5f4:	ce 01       	movw	r24, r28
     5f6:	40 96       	adiw	r24, 0x10	; 16
     5f8:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	94 e0       	ldi	r25, 0x04	; 4
     600:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     604:	e0 91 76 04 	lds	r30, 0x0476	; 0x800476 <day>
     608:	8e 2f       	mov	r24, r30
     60a:	ee 0f       	add	r30, r30
     60c:	99 0b       	sbc	r25, r25
     60e:	aa 0b       	sbc	r26, r26
     610:	bb 0b       	sbc	r27, r27
     612:	87 30       	cpi	r24, 0x07	; 7
     614:	91 05       	cpc	r25, r1
     616:	08 f0       	brcs	.+2      	; 0x61a <lcd_dispRealClock+0x132>
     618:	43 c0       	rjmp	.+134    	; 0x6a0 <lcd_dispRealClock+0x1b8>
     61a:	fc 01       	movw	r30, r24
     61c:	e0 5c       	subi	r30, 0xC0	; 192
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__tablejump2__>
     624:	83 e5       	ldi	r24, 0x53	; 83
     626:	95 e7       	ldi	r25, 0x75	; 117
     628:	ae e6       	ldi	r26, 0x6E	; 110
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	8b 8b       	std	Y+19, r24	; 0x13
     62e:	9c 8b       	std	Y+20, r25	; 0x14
     630:	ad 8b       	std	Y+21, r26	; 0x15
     632:	be 8b       	std	Y+22, r27	; 0x16
     634:	35 c0       	rjmp	.+106    	; 0x6a0 <lcd_dispRealClock+0x1b8>
     636:	8d e4       	ldi	r24, 0x4D	; 77
     638:	9f e6       	ldi	r25, 0x6F	; 111
     63a:	ae e6       	ldi	r26, 0x6E	; 110
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	8b 8b       	std	Y+19, r24	; 0x13
     640:	9c 8b       	std	Y+20, r25	; 0x14
     642:	ad 8b       	std	Y+21, r26	; 0x15
     644:	be 8b       	std	Y+22, r27	; 0x16
     646:	2c c0       	rjmp	.+88     	; 0x6a0 <lcd_dispRealClock+0x1b8>
     648:	84 e5       	ldi	r24, 0x54	; 84
     64a:	95 e7       	ldi	r25, 0x75	; 117
     64c:	a5 e6       	ldi	r26, 0x65	; 101
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	8b 8b       	std	Y+19, r24	; 0x13
     652:	9c 8b       	std	Y+20, r25	; 0x14
     654:	ad 8b       	std	Y+21, r26	; 0x15
     656:	be 8b       	std	Y+22, r27	; 0x16
     658:	23 c0       	rjmp	.+70     	; 0x6a0 <lcd_dispRealClock+0x1b8>
     65a:	87 e5       	ldi	r24, 0x57	; 87
     65c:	95 e6       	ldi	r25, 0x65	; 101
     65e:	a4 e6       	ldi	r26, 0x64	; 100
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	8b 8b       	std	Y+19, r24	; 0x13
     664:	9c 8b       	std	Y+20, r25	; 0x14
     666:	ad 8b       	std	Y+21, r26	; 0x15
     668:	be 8b       	std	Y+22, r27	; 0x16
     66a:	1a c0       	rjmp	.+52     	; 0x6a0 <lcd_dispRealClock+0x1b8>
     66c:	84 e5       	ldi	r24, 0x54	; 84
     66e:	98 e6       	ldi	r25, 0x68	; 104
     670:	a5 e7       	ldi	r26, 0x75	; 117
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	8b 8b       	std	Y+19, r24	; 0x13
     676:	9c 8b       	std	Y+20, r25	; 0x14
     678:	ad 8b       	std	Y+21, r26	; 0x15
     67a:	be 8b       	std	Y+22, r27	; 0x16
     67c:	11 c0       	rjmp	.+34     	; 0x6a0 <lcd_dispRealClock+0x1b8>
     67e:	86 e4       	ldi	r24, 0x46	; 70
     680:	92 e7       	ldi	r25, 0x72	; 114
     682:	a9 e6       	ldi	r26, 0x69	; 105
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	8b 8b       	std	Y+19, r24	; 0x13
     688:	9c 8b       	std	Y+20, r25	; 0x14
     68a:	ad 8b       	std	Y+21, r26	; 0x15
     68c:	be 8b       	std	Y+22, r27	; 0x16
     68e:	08 c0       	rjmp	.+16     	; 0x6a0 <lcd_dispRealClock+0x1b8>
     690:	83 e5       	ldi	r24, 0x53	; 83
     692:	91 e6       	ldi	r25, 0x61	; 97
     694:	a4 e7       	ldi	r26, 0x74	; 116
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	8b 8b       	std	Y+19, r24	; 0x13
     69a:	9c 8b       	std	Y+20, r25	; 0x14
     69c:	ad 8b       	std	Y+21, r26	; 0x15
     69e:	be 8b       	std	Y+22, r27	; 0x16
     6a0:	ce 01       	movw	r24, r28
     6a2:	43 96       	adiw	r24, 0x13	; 19
     6a4:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     6a8:	8c ef       	ldi	r24, 0xFC	; 252
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     6b0:	8d e0       	ldi	r24, 0x0D	; 13
     6b2:	8a 95       	dec	r24
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <lcd_dispRealClock+0x1ca>
     6b6:	00 00       	nop
     6b8:	6c 96       	adiw	r28, 0x1c	; 28
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <lcd_dispAccumulatedTime>:
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	29 97       	sbiw	r28, 0x09	; 9
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	80 ec       	ldi	r24, 0xC0	; 192
     6e0:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     6e4:	8d e0       	ldi	r24, 0x0D	; 13
     6e6:	8a 95       	dec	r24
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <lcd_dispAccumulatedTime+0x1c>
     6ea:	00 00       	nop
     6ec:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accumulatedHour>
     6f0:	4a e0       	ldi	r20, 0x0A	; 10
     6f2:	be 01       	movw	r22, r28
     6f4:	69 5f       	subi	r22, 0xF9	; 249
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	08 2e       	mov	r0, r24
     6fa:	00 0c       	add	r0, r0
     6fc:	99 0b       	sbc	r25, r25
     6fe:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     702:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <accumulatedMin>
     706:	4a e0       	ldi	r20, 0x0A	; 10
     708:	be 01       	movw	r22, r28
     70a:	6c 5f       	subi	r22, 0xFC	; 252
     70c:	7f 4f       	sbci	r23, 0xFF	; 255
     70e:	08 2e       	mov	r0, r24
     710:	00 0c       	add	r0, r0
     712:	99 0b       	sbc	r25, r25
     714:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     718:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <accumulatedSec>
     71c:	4a e0       	ldi	r20, 0x0A	; 10
     71e:	be 01       	movw	r22, r28
     720:	6f 5f       	subi	r22, 0xFF	; 255
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	08 2e       	mov	r0, r24
     726:	00 0c       	add	r0, r0
     728:	99 0b       	sbc	r25, r25
     72a:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     72e:	ce 01       	movw	r24, r28
     730:	07 96       	adiw	r24, 0x07	; 7
     732:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     736:	85 ee       	ldi	r24, 0xE5	; 229
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     73e:	ce 01       	movw	r24, r28
     740:	04 96       	adiw	r24, 0x04	; 4
     742:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     746:	85 ee       	ldi	r24, 0xE5	; 229
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     756:	8a ef       	ldi	r24, 0xFA	; 250
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     75e:	8d e0       	ldi	r24, 0x0D	; 13
     760:	8a 95       	dec	r24
     762:	f1 f7       	brne	.-4      	; 0x760 <lcd_dispAccumulatedTime+0x96>
     764:	00 00       	nop
     766:	29 96       	adiw	r28, 0x09	; 9
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <lcd_showDHT11>:
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	28 97       	sbiw	r28, 0x08	; 8
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	8e 01       	movw	r16, r28
     792:	08 5f       	subi	r16, 0xF8	; 248
     794:	1f 4f       	sbci	r17, 0xFF	; 255
     796:	9e 01       	movw	r18, r28
     798:	29 5f       	subi	r18, 0xF9	; 249
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	ae 01       	movw	r20, r28
     79e:	4a 5f       	subi	r20, 0xFA	; 250
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	be 01       	movw	r22, r28
     7a4:	6b 5f       	subi	r22, 0xFB	; 251
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
     7a8:	ce 01       	movw	r24, r28
     7aa:	04 96       	adiw	r24, 0x04	; 4
     7ac:	0e 94 94 00 	call	0x128	; 0x128 <chkDHT11>
     7b0:	80 e8       	ldi	r24, 0x80	; 128
     7b2:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     7b6:	8d e0       	ldi	r24, 0x0D	; 13
     7b8:	8a 95       	dec	r24
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <lcd_showDHT11+0x40>
     7bc:	00 00       	nop
     7be:	89 ee       	ldi	r24, 0xE9	; 233
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     7c6:	8e 81       	ldd	r24, Y+6	; 0x06
     7c8:	4a e0       	ldi	r20, 0x0A	; 10
     7ca:	be 01       	movw	r22, r28
     7cc:	6f 5f       	subi	r22, 0xFF	; 255
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     7d6:	ce 01       	movw	r24, r28
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     7de:	8f 81       	ldd	r24, Y+7	; 0x07
     7e0:	4a e0       	ldi	r20, 0x0A	; 10
     7e2:	be 01       	movw	r22, r28
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     7ee:	84 ef       	ldi	r24, 0xF4	; 244
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     7f6:	80 ec       	ldi	r24, 0xC0	; 192
     7f8:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	8a 95       	dec	r24
     800:	f1 f7       	brne	.-4      	; 0x7fe <lcd_showDHT11+0x86>
     802:	00 00       	nop
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	94 e0       	ldi	r25, 0x04	; 4
     808:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     80c:	8c 81       	ldd	r24, Y+4	; 0x04
     80e:	4a e0       	ldi	r20, 0x0A	; 10
     810:	be 01       	movw	r22, r28
     812:	6f 5f       	subi	r22, 0xFF	; 255
     814:	7f 4f       	sbci	r23, 0xFF	; 255
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     824:	8d 81       	ldd	r24, Y+5	; 0x05
     826:	4a e0       	ldi	r20, 0x0A	; 10
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
     834:	8d e0       	ldi	r24, 0x0D	; 13
     836:	94 e0       	ldi	r25, 0x04	; 4
     838:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     83c:	8d e0       	ldi	r24, 0x0D	; 13
     83e:	8a 95       	dec	r24
     840:	f1 f7       	brne	.-4      	; 0x83e <lcd_showDHT11+0xc6>
     842:	00 00       	nop
     844:	28 96       	adiw	r28, 0x08	; 8
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <lcd_dispProgInfo>:
     85a:	80 e8       	ldi	r24, 0x80	; 128
     85c:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     860:	2d e0       	ldi	r18, 0x0D	; 13
     862:	2a 95       	dec	r18
     864:	f1 f7       	brne	.-4      	; 0x862 <lcd_dispProgInfo+0x8>
     866:	00 00       	nop
     868:	81 e4       	ldi	r24, 0x41	; 65
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     870:	80 ec       	ldi	r24, 0xC0	; 192
     872:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     876:	8d e0       	ldi	r24, 0x0D	; 13
     878:	8a 95       	dec	r24
     87a:	f1 f7       	brne	.-4      	; 0x878 <lcd_dispProgInfo+0x1e>
     87c:	00 00       	nop
     87e:	82 e3       	ldi	r24, 0x32	; 50
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     886:	9f e3       	ldi	r25, 0x3F	; 63
     888:	2d e0       	ldi	r18, 0x0D	; 13
     88a:	83 e0       	ldi	r24, 0x03	; 3
     88c:	91 50       	subi	r25, 0x01	; 1
     88e:	20 40       	sbci	r18, 0x00	; 0
     890:	80 40       	sbci	r24, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <lcd_dispProgInfo+0x32>
     894:	00 c0       	rjmp	.+0      	; 0x896 <lcd_dispProgInfo+0x3c>
     896:	00 00       	nop
     898:	80 ec       	ldi	r24, 0xC0	; 192
     89a:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     89e:	9d e0       	ldi	r25, 0x0D	; 13
     8a0:	9a 95       	dec	r25
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <lcd_dispProgInfo+0x46>
     8a4:	00 00       	nop
     8a6:	81 e2       	ldi	r24, 0x21	; 33
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     8ae:	2f e7       	ldi	r18, 0x7F	; 127
     8b0:	8a e1       	ldi	r24, 0x1A	; 26
     8b2:	96 e0       	ldi	r25, 0x06	; 6
     8b4:	21 50       	subi	r18, 0x01	; 1
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <lcd_dispProgInfo+0x5a>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <lcd_dispProgInfo+0x64>
     8be:	00 00       	nop
     8c0:	08 95       	ret

000008c2 <lcd_dispMenu>:
     8c2:	80 e8       	ldi	r24, 0x80	; 128
     8c4:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     8c8:	2d e0       	ldi	r18, 0x0D	; 13
     8ca:	2a 95       	dec	r18
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <lcd_dispMenu+0x8>
     8ce:	00 00       	nop
     8d0:	80 e1       	ldi	r24, 0x10	; 16
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     8d8:	80 ec       	ldi	r24, 0xC0	; 192
     8da:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     8de:	8d e0       	ldi	r24, 0x0D	; 13
     8e0:	8a 95       	dec	r24
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <lcd_dispMenu+0x1e>
     8e4:	00 00       	nop
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     8ee:	9f eb       	ldi	r25, 0xBF	; 191
     8f0:	27 e2       	ldi	r18, 0x27	; 39
     8f2:	89 e0       	ldi	r24, 0x09	; 9
     8f4:	91 50       	subi	r25, 0x01	; 1
     8f6:	20 40       	sbci	r18, 0x00	; 0
     8f8:	80 40       	sbci	r24, 0x00	; 0
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <lcd_dispMenu+0x32>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <lcd_dispMenu+0x3c>
     8fe:	00 00       	nop
     900:	08 95       	ret

00000902 <lcd_dispWords>:
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	e8 2e       	mov	r14, r24
     910:	80 e8       	ldi	r24, 0x80	; 128
     912:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     916:	2d e0       	ldi	r18, 0x0D	; 13
     918:	2a 95       	dec	r18
     91a:	f1 f7       	brne	.-4      	; 0x918 <lcd_dispWords+0x16>
     91c:	00 00       	nop
     91e:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <min>
     922:	93 78       	andi	r25, 0x83	; 131
     924:	1c f4       	brge	.+6      	; 0x92c <lcd_dispWords+0x2a>
     926:	91 50       	subi	r25, 0x01	; 1
     928:	9c 6f       	ori	r25, 0xFC	; 252
     92a:	9f 5f       	subi	r25, 0xFF	; 255
     92c:	99 23       	and	r25, r25
     92e:	ec f0       	brlt	.+58     	; 0x96a <lcd_dispWords+0x68>
     930:	92 30       	cpi	r25, 0x02	; 2
     932:	1c f0       	brlt	.+6      	; 0x93a <lcd_dispWords+0x38>
     934:	94 30       	cpi	r25, 0x04	; 4
     936:	6c f0       	brlt	.+26     	; 0x952 <lcd_dispWords+0x50>
     938:	18 c0       	rjmp	.+48     	; 0x96a <lcd_dispWords+0x68>
     93a:	30 e2       	ldi	r19, 0x20	; 32
     93c:	e3 9e       	mul	r14, r19
     93e:	c0 01       	movw	r24, r0
     940:	11 24       	eor	r1, r1
     942:	ec 01       	movw	r28, r24
     944:	c0 57       	subi	r28, 0x70	; 112
     946:	dd 4f       	sbci	r29, 0xFD	; 253
     948:	9c 01       	movw	r18, r24
     94a:	20 56       	subi	r18, 0x60	; 96
     94c:	3d 4f       	sbci	r19, 0xFD	; 253
     94e:	79 01       	movw	r14, r18
     950:	10 c0       	rjmp	.+32     	; 0x972 <lcd_dispWords+0x70>
     952:	30 e2       	ldi	r19, 0x20	; 32
     954:	e3 9e       	mul	r14, r19
     956:	c0 01       	movw	r24, r0
     958:	11 24       	eor	r1, r1
     95a:	ec 01       	movw	r28, r24
     95c:	c0 5b       	subi	r28, 0xB0	; 176
     95e:	de 4f       	sbci	r29, 0xFE	; 254
     960:	9c 01       	movw	r18, r24
     962:	20 5a       	subi	r18, 0xA0	; 160
     964:	3e 4f       	sbci	r19, 0xFE	; 254
     966:	79 01       	movw	r14, r18
     968:	04 c0       	rjmp	.+8      	; 0x972 <lcd_dispWords+0x70>
     96a:	e1 2c       	mov	r14, r1
     96c:	f1 2c       	mov	r15, r1
     96e:	c0 e0       	ldi	r28, 0x00	; 0
     970:	d0 e0       	ldi	r29, 0x00	; 0
     972:	ce 01       	movw	r24, r28
     974:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     978:	fe 01       	movw	r30, r28
     97a:	01 90       	ld	r0, Z+
     97c:	00 20       	and	r0, r0
     97e:	e9 f7       	brne	.-6      	; 0x97a <lcd_dispWords+0x78>
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	ec 1b       	sub	r30, r28
     984:	fd 0b       	sbc	r31, r29
     986:	00 e1       	ldi	r16, 0x10	; 16
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	0e 1b       	sub	r16, r30
     98c:	11 09       	sbc	r17, r1
     98e:	10 16       	cp	r1, r16
     990:	11 06       	cpc	r1, r17
     992:	54 f4       	brge	.+20     	; 0x9a8 <lcd_dispWords+0xa6>
     994:	c0 e0       	ldi	r28, 0x00	; 0
     996:	80 e2       	ldi	r24, 0x20	; 32
     998:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_write_character_4d>
     99c:	cf 5f       	subi	r28, 0xFF	; 255
     99e:	2c 2f       	mov	r18, r28
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	20 17       	cp	r18, r16
     9a4:	31 07       	cpc	r19, r17
     9a6:	bc f3       	brlt	.-18     	; 0x996 <lcd_dispWords+0x94>
     9a8:	80 ec       	ldi	r24, 0xC0	; 192
     9aa:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     9ae:	3d e0       	ldi	r19, 0x0D	; 13
     9b0:	3a 95       	dec	r19
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <lcd_dispWords+0xae>
     9b4:	00 00       	nop
     9b6:	c7 01       	movw	r24, r14
     9b8:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
     9bc:	f7 01       	movw	r30, r14
     9be:	01 90       	ld	r0, Z+
     9c0:	00 20       	and	r0, r0
     9c2:	e9 f7       	brne	.-6      	; 0x9be <lcd_dispWords+0xbc>
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	ee 19       	sub	r30, r14
     9c8:	ff 09       	sbc	r31, r15
     9ca:	00 e1       	ldi	r16, 0x10	; 16
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	0e 1b       	sub	r16, r30
     9d0:	11 09       	sbc	r17, r1
     9d2:	10 16       	cp	r1, r16
     9d4:	11 06       	cpc	r1, r17
     9d6:	54 f4       	brge	.+20     	; 0x9ec <lcd_dispWords+0xea>
     9d8:	c0 e0       	ldi	r28, 0x00	; 0
     9da:	80 e2       	ldi	r24, 0x20	; 32
     9dc:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_write_character_4d>
     9e0:	cf 5f       	subi	r28, 0xFF	; 255
     9e2:	8c 2f       	mov	r24, r28
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	80 17       	cp	r24, r16
     9e8:	91 07       	cpc	r25, r17
     9ea:	bc f3       	brlt	.-18     	; 0x9da <lcd_dispWords+0xd8>
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	08 95       	ret

000009fa <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fa:	87 ea       	ldi	r24, 0xA7	; 167
     9fc:	91 e6       	ldi	r25, 0x61	; 97
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <lcd_init_4d+0x4>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <lcd_init_4d+0xa>
     a04:	00 00       	nop
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~_BV(lcd_RS_bit);                // select the Instruction Register (RS low)
     a06:	5a 98       	cbi	0x0b, 2	; 11
    lcd_E_port &= ~_BV(lcd_E_bit);                  // make sure E is initially low
     a08:	5b 98       	cbi	0x0b, 3	; 11

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     a0a:	80 e3       	ldi	r24, 0x30	; 48
     a0c:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_4>
     a10:	83 ec       	ldi	r24, 0xC3	; 195
     a12:	99 e0       	ldi	r25, 0x09	; 9
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <lcd_init_4d+0x1a>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <lcd_init_4d+0x20>
     a1a:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     a1c:	80 e3       	ldi	r24, 0x30	; 48
     a1e:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a22:	92 e4       	ldi	r25, 0x42	; 66
     a24:	9a 95       	dec	r25
     a26:	f1 f7       	brne	.-4      	; 0xa24 <lcd_init_4d+0x2a>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <lcd_init_4d+0x30>
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     a2a:	80 e3       	ldi	r24, 0x30	; 48
     a2c:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_4>
     a30:	82 e4       	ldi	r24, 0x42	; 66
     a32:	8a 95       	dec	r24
     a34:	f1 f7       	brne	.-4      	; 0xa32 <lcd_init_4d+0x38>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <lcd_init_4d+0x3e>
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     a38:	88 e2       	ldi	r24, 0x28	; 40
     a3a:	0e 94 18 02 	call	0x430	; 0x430 <lcd_write_4>
     a3e:	9d e0       	ldi	r25, 0x0D	; 13
     a40:	9a 95       	dec	r25
     a42:	f1 f7       	brne	.-4      	; 0xa40 <lcd_init_4d+0x46>
     a44:	00 00       	nop
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     a46:	88 e2       	ldi	r24, 0x28	; 40
     a48:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     a4c:	8d e0       	ldi	r24, 0x0D	; 13
     a4e:	8a 95       	dec	r24
     a50:	f1 f7       	brne	.-4      	; 0xa4e <lcd_init_4d+0x54>
     a52:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     a54:	88 e0       	ldi	r24, 0x08	; 8
     a56:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     a5a:	9d e0       	ldi	r25, 0x0D	; 13
     a5c:	9a 95       	dec	r25
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <lcd_init_4d+0x62>
     a60:	00 00       	nop
    _delay_us(DELAY_INST);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a68:	87 ee       	ldi	r24, 0xE7	; 231
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <lcd_init_4d+0x72>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <lcd_init_4d+0x78>
     a72:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a7a:	9d e0       	ldi	r25, 0x0D	; 13
     a7c:	9a 95       	dec	r25
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <lcd_init_4d+0x82>
     a80:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     a82:	8c e0       	ldi	r24, 0x0C	; 12
     a84:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     a88:	8d e0       	ldi	r24, 0x0D	; 13
     a8a:	8a 95       	dec	r24
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <lcd_init_4d+0x90>
     a8e:	00 00       	nop
     a90:	08 95       	ret

00000a92 <config>:

void config()
{
// configure the microprocessor pins for the data lines
// 4 data lines - output
    lcd_D7_ddr |= _BV(lcd_D7_bit);
     a92:	57 9a       	sbi	0x0a, 7	; 10
    lcd_D6_ddr |= _BV(lcd_D6_bit);
     a94:	56 9a       	sbi	0x0a, 6	; 10
    lcd_D5_ddr |= _BV(lcd_D5_bit);
     a96:	55 9a       	sbi	0x0a, 5	; 10
    lcd_D4_ddr |= _BV(lcd_D4_bit);
     a98:	54 9a       	sbi	0x0a, 4	; 10

// LCD backlight cathode pin (K) - Output
    lcd_Backlight_ddr |= _BV(lcd_Backlight_bit);
     a9a:	20 9a       	sbi	0x04, 0	; 4
    //turn off LCD backlight
    lcd_Backlight_port |= _BV(lcd_Backlight_bit);
     a9c:	28 9a       	sbi	0x05, 0	; 5

//Tactile switch - Input
    tactile_Switch_ddr &= ~_BV(tactile_Switch_bit);
     a9e:	24 98       	cbi	0x04, 4	; 4

// configure the microprocessor pins for the control lines
// E line - output
    lcd_E_ddr |= _BV(lcd_E_bit);
     aa0:	53 9a       	sbi	0x0a, 3	; 10
// RS line - output
    lcd_RS_ddr |= _BV(lcd_RS_bit);
     aa2:	52 9a       	sbi	0x0a, 2	; 10
    //turn on LCD VDD
    //lcd_VDD_port |= _BV(lcd_VDD_bit);

// initialize the LCD controller as determined by the defines (LCD instructions)
// initialize the LCD display for a 4-bit interface
    lcd_init_4d();
     aa4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <lcd_init_4d>
     aa8:	08 95       	ret

00000aaa <main>:


/******************************* Main Program Code *************************/
int main(void)
{
    config();
     aaa:	0e 94 49 05 	call	0xa92	; 0xa92 <config>
    //ioinit(); //dht11
    //init_devices();
    initINT();
     aae:	0e 94 2d 01 	call	0x25a	; 0x25a <initINT>
    parseCompileTime();
     ab2:	0e 94 76 05 	call	0xaec	; 0xaec <parseCompileTime>
    //lcd_dispRealClock();
	lcd_dispProgInfo();
     ab6:	0e 94 2d 04 	call	0x85a	; 0x85a <lcd_dispProgInfo>
    // Use the Power Down sleep mode
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     aba:	83 b7       	in	r24, 0x33	; 51
     abc:	81 7f       	andi	r24, 0xF1	; 241
     abe:	84 60       	ori	r24, 0x04	; 4
     ac0:	83 bf       	out	0x33, r24	; 51

    // endless loop
    while(1)
    {
      // go to sleep and wait for interrupt...
      sleep_mode();
     ac2:	83 b7       	in	r24, 0x33	; 51
     ac4:	81 60       	ori	r24, 0x01	; 1
     ac6:	83 bf       	out	0x33, r24	; 51
     ac8:	88 95       	sleep
     aca:	83 b7       	in	r24, 0x33	; 51
     acc:	8e 7f       	andi	r24, 0xFE	; 254
     ace:	83 bf       	out	0x33, r24	; 51
        PORTB |= _BV(debug_PIN);
        _delay_ms(500);
        PORTB &= ~_BV(debug_PIN);
        _delay_ms(500);
        */
    }
     ad0:	f8 cf       	rjmp	.-16     	; 0xac2 <main+0x18>

00000ad2 <calcDay>:
    calcDay();
}//parseCompileTime

void calcDay()
{
    day = (date - 17)%7;
     ad2:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <date>
     ad6:	08 2e       	mov	r0, r24
     ad8:	00 0c       	add	r0, r0
     ada:	99 0b       	sbc	r25, r25
     adc:	41 97       	sbiw	r24, 0x11	; 17
     ade:	67 e0       	ldi	r22, 0x07	; 7
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__divmodhi4>
     ae6:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <day>
     aea:	08 95       	ret

00000aec <parseCompileTime>:
extern uint8_t year, month, date;
extern uint8_t monthEndDate, day;
*/

void parseCompileTime()
{
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	e4 97       	sbiw	r28, 0x34	; 52
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
    char sTime[4][3];
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
     b02:	65 ee       	ldi	r22, 0xE5	; 229
     b04:	73 e0       	ldi	r23, 0x03	; 3
     b06:	87 e1       	ldi	r24, 0x17	; 23
     b08:	94 e0       	ldi	r25, 0x04	; 4
     b0a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <strtok>
     b0e:	bc 01       	movw	r22, r24
    while (*p)
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	88 23       	and	r24, r24
     b16:	e9 f0       	breq	.+58     	; 0xb52 <parseCompileTime+0x66>
     b18:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sTime[n++], p);
     b1a:	11 e0       	ldi	r17, 0x01	; 1
     b1c:	12 0f       	add	r17, r18
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	c9 01       	movw	r24, r18
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	21 e0       	ldi	r18, 0x01	; 1
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	2c 0f       	add	r18, r28
     b30:	3d 1f       	adc	r19, r29
     b32:	82 0f       	add	r24, r18
     b34:	93 1f       	adc	r25, r19
     b36:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <strcpy>
        p=strtok(NULL, ":");
     b3a:	65 ee       	ldi	r22, 0xE5	; 229
     b3c:	73 e0       	ldi	r23, 0x03	; 3
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 e5 08 	call	0x11ca	; 0x11ca <strtok>
     b46:	bc 01       	movw	r22, r24
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
    {
        strcpy((char *)&sTime[n++], p);
     b48:	21 2f       	mov	r18, r17
    char sDate[4][10];
    uint8_t n=0;
    uint16_t yearLong;

    p = strtok(__TIME__,":");
    while (*p)
     b4a:	fc 01       	movw	r30, r24
     b4c:	80 81       	ld	r24, Z
     b4e:	81 11       	cpse	r24, r1
     b50:	e4 cf       	rjmp	.-56     	; 0xb1a <parseCompileTime+0x2e>
    {
        strcpy((char *)&sTime[n++], p);
        p=strtok(NULL, ":");
    }
    hour=atoi(sTime[0]);
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 c7 08 	call	0x118e	; 0x118e <atoi>
     b5a:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <hour>
    min=atoi(sTime[1]);
     b5e:	ce 01       	movw	r24, r28
     b60:	04 96       	adiw	r24, 0x04	; 4
     b62:	0e 94 c7 08 	call	0x118e	; 0x118e <atoi>
     b66:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <min>
    //give some delay (8 seconds), to compile & upload by human click
    //sec=atoi(sTime[2]) + 8;

    //if you change power source to battery,
    //  you'd better put more time allowance
    sec=atoi(sTime[2]) + 15;
     b6a:	ce 01       	movw	r24, r28
     b6c:	07 96       	adiw	r24, 0x07	; 7
     b6e:	0e 94 c7 08 	call	0x118e	; 0x118e <atoi>
     b72:	81 5f       	subi	r24, 0xF1	; 241
     b74:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sec>
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	74 e0       	ldi	r23, 0x04	; 4
     b7c:	80 e2       	ldi	r24, 0x20	; 32
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	0e 94 e5 08 	call	0x11ca	; 0x11ca <strtok>
     b84:	bc 01       	movw	r22, r24
    while (*p)
     b86:	fc 01       	movw	r30, r24
     b88:	80 81       	ld	r24, Z
     b8a:	88 23       	and	r24, r24
     b8c:	19 f1       	breq	.+70     	; 0xbd4 <parseCompileTime+0xe8>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
    {
        strcpy((char *)&sDate[n++], p);
     b90:	11 e0       	ldi	r17, 0x01	; 1
     b92:	12 0f       	add	r17, r18
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	c9 01       	movw	r24, r18
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	22 0f       	add	r18, r18
     ba6:	33 1f       	adc	r19, r19
     ba8:	82 0f       	add	r24, r18
     baa:	93 1f       	adc	r25, r19
     bac:	2d e0       	ldi	r18, 0x0D	; 13
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	2c 0f       	add	r18, r28
     bb2:	3d 1f       	adc	r19, r29
     bb4:	82 0f       	add	r24, r18
     bb6:	93 1f       	adc	r25, r19
     bb8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <strcpy>
        p=strtok(NULL, " ");
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	74 e0       	ldi	r23, 0x04	; 4
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <strtok>
     bc8:	bc 01       	movw	r22, r24

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
    {
        strcpy((char *)&sDate[n++], p);
     bca:	21 2f       	mov	r18, r17
    sec=atoi(sTime[2]) + 15;
    //hour = atoi(sHour);

    n=0;
    p = strtok(__DATE__," ");
    while (*p)
     bcc:	fc 01       	movw	r30, r24
     bce:	80 81       	ld	r24, Z
     bd0:	81 11       	cpse	r24, r1
     bd2:	de cf       	rjmp	.-68     	; 0xb90 <parseCompileTime+0xa4>
    {
        strcpy((char *)&sDate[n++], p);
        p=strtok(NULL, " ");
    }

    if ( strcmp(sDate[0], "Jan") == 0 )
     bd4:	6c e2       	ldi	r22, 0x2C	; 44
     bd6:	74 e0       	ldi	r23, 0x04	; 4
     bd8:	ce 01       	movw	r24, r28
     bda:	0d 96       	adiw	r24, 0x0d	; 13
     bdc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     be0:	89 2b       	or	r24, r25
     be2:	21 f4       	brne	.+8      	; 0xbec <parseCompileTime+0x100>
        month = 1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     bea:	83 c0       	rjmp	.+262    	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Feb") == 0 )
     bec:	60 e3       	ldi	r22, 0x30	; 48
     bee:	74 e0       	ldi	r23, 0x04	; 4
     bf0:	ce 01       	movw	r24, r28
     bf2:	0d 96       	adiw	r24, 0x0d	; 13
     bf4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     bf8:	89 2b       	or	r24, r25
     bfa:	21 f4       	brne	.+8      	; 0xc04 <parseCompileTime+0x118>
        month = 2;
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     c02:	77 c0       	rjmp	.+238    	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Mar") == 0 )
     c04:	64 e3       	ldi	r22, 0x34	; 52
     c06:	74 e0       	ldi	r23, 0x04	; 4
     c08:	ce 01       	movw	r24, r28
     c0a:	0d 96       	adiw	r24, 0x0d	; 13
     c0c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     c10:	89 2b       	or	r24, r25
     c12:	21 f4       	brne	.+8      	; 0xc1c <parseCompileTime+0x130>
        month = 3;
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     c1a:	6b c0       	rjmp	.+214    	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Apr") == 0 )
     c1c:	68 e3       	ldi	r22, 0x38	; 56
     c1e:	74 e0       	ldi	r23, 0x04	; 4
     c20:	ce 01       	movw	r24, r28
     c22:	0d 96       	adiw	r24, 0x0d	; 13
     c24:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     c28:	89 2b       	or	r24, r25
     c2a:	21 f4       	brne	.+8      	; 0xc34 <parseCompileTime+0x148>
        month = 4;
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     c32:	5f c0       	rjmp	.+190    	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "May") == 0 )
     c34:	6c e3       	ldi	r22, 0x3C	; 60
     c36:	74 e0       	ldi	r23, 0x04	; 4
     c38:	ce 01       	movw	r24, r28
     c3a:	0d 96       	adiw	r24, 0x0d	; 13
     c3c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     c40:	89 2b       	or	r24, r25
     c42:	21 f4       	brne	.+8      	; 0xc4c <parseCompileTime+0x160>
        month = 5;
     c44:	85 e0       	ldi	r24, 0x05	; 5
     c46:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     c4a:	53 c0       	rjmp	.+166    	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jun") == 0 )
     c4c:	60 e4       	ldi	r22, 0x40	; 64
     c4e:	74 e0       	ldi	r23, 0x04	; 4
     c50:	ce 01       	movw	r24, r28
     c52:	0d 96       	adiw	r24, 0x0d	; 13
     c54:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     c58:	89 2b       	or	r24, r25
     c5a:	21 f4       	brne	.+8      	; 0xc64 <parseCompileTime+0x178>
        month = 6;
     c5c:	86 e0       	ldi	r24, 0x06	; 6
     c5e:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     c62:	47 c0       	rjmp	.+142    	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Jul") == 0 )
     c64:	64 e4       	ldi	r22, 0x44	; 68
     c66:	74 e0       	ldi	r23, 0x04	; 4
     c68:	ce 01       	movw	r24, r28
     c6a:	0d 96       	adiw	r24, 0x0d	; 13
     c6c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     c70:	89 2b       	or	r24, r25
     c72:	21 f4       	brne	.+8      	; 0xc7c <parseCompileTime+0x190>
        month = 7;
     c74:	87 e0       	ldi	r24, 0x07	; 7
     c76:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     c7a:	3b c0       	rjmp	.+118    	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Aug") == 0 )
     c7c:	68 e4       	ldi	r22, 0x48	; 72
     c7e:	74 e0       	ldi	r23, 0x04	; 4
     c80:	ce 01       	movw	r24, r28
     c82:	0d 96       	adiw	r24, 0x0d	; 13
     c84:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     c88:	89 2b       	or	r24, r25
     c8a:	21 f4       	brne	.+8      	; 0xc94 <parseCompileTime+0x1a8>
        month = 8;
     c8c:	88 e0       	ldi	r24, 0x08	; 8
     c8e:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     c92:	2f c0       	rjmp	.+94     	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Sep") == 0 )
     c94:	6c e4       	ldi	r22, 0x4C	; 76
     c96:	74 e0       	ldi	r23, 0x04	; 4
     c98:	ce 01       	movw	r24, r28
     c9a:	0d 96       	adiw	r24, 0x0d	; 13
     c9c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     ca0:	89 2b       	or	r24, r25
     ca2:	21 f4       	brne	.+8      	; 0xcac <parseCompileTime+0x1c0>
        month = 9;
     ca4:	89 e0       	ldi	r24, 0x09	; 9
     ca6:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     caa:	23 c0       	rjmp	.+70     	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Oct") == 0 )
     cac:	60 e5       	ldi	r22, 0x50	; 80
     cae:	74 e0       	ldi	r23, 0x04	; 4
     cb0:	ce 01       	movw	r24, r28
     cb2:	0d 96       	adiw	r24, 0x0d	; 13
     cb4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     cb8:	89 2b       	or	r24, r25
     cba:	21 f4       	brne	.+8      	; 0xcc4 <parseCompileTime+0x1d8>
        month = 10;
     cbc:	8a e0       	ldi	r24, 0x0A	; 10
     cbe:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     cc2:	17 c0       	rjmp	.+46     	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Nov") == 0 )
     cc4:	64 e5       	ldi	r22, 0x54	; 84
     cc6:	74 e0       	ldi	r23, 0x04	; 4
     cc8:	ce 01       	movw	r24, r28
     cca:	0d 96       	adiw	r24, 0x0d	; 13
     ccc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     cd0:	89 2b       	or	r24, r25
     cd2:	21 f4       	brne	.+8      	; 0xcdc <parseCompileTime+0x1f0>
        month = 11;
     cd4:	8b e0       	ldi	r24, 0x0B	; 11
     cd6:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>
     cda:	0b c0       	rjmp	.+22     	; 0xcf2 <parseCompileTime+0x206>
    else if ( strcmp(sDate[0], "Dec") == 0 )
     cdc:	68 e5       	ldi	r22, 0x58	; 88
     cde:	74 e0       	ldi	r23, 0x04	; 4
     ce0:	ce 01       	movw	r24, r28
     ce2:	0d 96       	adiw	r24, 0x0d	; 13
     ce4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <strcmp>
     ce8:	89 2b       	or	r24, r25
     cea:	19 f4       	brne	.+6      	; 0xcf2 <parseCompileTime+0x206>
        month = 12;
     cec:	8c e0       	ldi	r24, 0x0C	; 12
     cee:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <month>

    date=atoi(sDate[1]);
     cf2:	ce 01       	movw	r24, r28
     cf4:	47 96       	adiw	r24, 0x17	; 23
     cf6:	0e 94 c7 08 	call	0x118e	; 0x118e <atoi>
     cfa:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <date>
    yearLong=atoi(sDate[2]);
     cfe:	ce 01       	movw	r24, r28
     d00:	81 96       	adiw	r24, 0x21	; 33
     d02:	0e 94 c7 08 	call	0x118e	; 0x118e <atoi>
     d06:	ac 01       	movw	r20, r24
    year=yearLong%1000;
     d08:	9c 01       	movw	r18, r24
     d0a:	36 95       	lsr	r19
     d0c:	27 95       	ror	r18
     d0e:	36 95       	lsr	r19
     d10:	27 95       	ror	r18
     d12:	36 95       	lsr	r19
     d14:	27 95       	ror	r18
     d16:	a5 ec       	ldi	r26, 0xC5	; 197
     d18:	b0 e2       	ldi	r27, 0x20	; 32
     d1a:	0e 94 98 08 	call	0x1130	; 0x1130 <__umulhisi3>
     d1e:	92 95       	swap	r25
     d20:	82 95       	swap	r24
     d22:	8f 70       	andi	r24, 0x0F	; 15
     d24:	89 27       	eor	r24, r25
     d26:	9f 70       	andi	r25, 0x0F	; 15
     d28:	89 27       	eor	r24, r25
     d2a:	68 ee       	ldi	r22, 0xE8	; 232
     d2c:	73 e0       	ldi	r23, 0x03	; 3
     d2e:	86 9f       	mul	r24, r22
     d30:	90 01       	movw	r18, r0
     d32:	87 9f       	mul	r24, r23
     d34:	30 0d       	add	r19, r0
     d36:	96 9f       	mul	r25, r22
     d38:	30 0d       	add	r19, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	42 1b       	sub	r20, r18
     d3e:	53 0b       	sbc	r21, r19
     d40:	40 93 79 04 	sts	0x0479, r20	; 0x800479 <year>

    calcDay();
     d44:	0e 94 69 05 	call	0xad2	; 0xad2 <calcDay>
}//parseCompileTime
     d48:	e4 96       	adiw	r28, 0x34	; 52
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	08 95       	ret

00000d5c <adjustHour>:
    }//if (DONE == 1)

}//countButton

void adjustHour()
{
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	00 d0       	rcall	.+0      	; 0xd66 <adjustHour+0xa>
     d66:	1f 92       	push	r1
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	10 e0       	ldi	r17, 0x00	; 0
    char strHour[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     d70:	80 e8       	ldi	r24, 0x80	; 128
     d72:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
     d76:	8d e0       	ldi	r24, 0x0D	; 13
     d78:	8a 95       	dec	r24
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <adjustHour+0x1c>
     d7c:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Hour: ");
     d7e:	8c e5       	ldi	r24, 0x5C	; 92
     d80:	94 e0       	ldi	r25, 0x04	; 4
     d82:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        itoa(hour, strHour, 10);
     d86:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <hour>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d8a:	4a e0       	ldi	r20, 0x0A	; 10
     d8c:	be 01       	movw	r22, r28
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	08 2e       	mov	r0, r24
     d94:	00 0c       	add	r0, r0
     d96:	99 0b       	sbc	r25, r25
     d98:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strHour);
     d9c:	ce 01       	movw	r24, r28
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	94 e0       	ldi	r25, 0x04	; 4
     da8:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     dac:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dae:	e7 ea       	ldi	r30, 0xA7	; 167
     db0:	f1 e6       	ldi	r31, 0x61	; 97
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <adjustHour+0x56>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <adjustHour+0x5c>
     db8:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     dba:	84 fd       	sbrc	r24, 4
     dbc:	0c c0       	rjmp	.+24     	; 0xdd6 <adjustHour+0x7a>
        {
            hour++;
     dbe:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <hour>
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
            if (hour > 23)
     dc4:	88 31       	cpi	r24, 0x18	; 24
     dc6:	24 f4       	brge	.+8      	; 0xdd0 <adjustHour+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            hour++;
     dc8:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <hour>
     dcc:	01 2f       	mov	r16, r17
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <adjustHour+0x7a>
            if (hour > 23)
                hour=0;
     dd0:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <hour>
     dd4:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
     dd6:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
     dd8:	81 2f       	mov	r24, r17
     dda:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
     ddc:	89 30       	cpi	r24, 0x09	; 9
     dde:	38 f4       	brcc	.+14     	; 0xdee <adjustHour+0x92>
     de0:	81 e1       	ldi	r24, 0x11	; 17
     de2:	9a e7       	ldi	r25, 0x7A	; 122
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <adjustHour+0x88>
     de8:	00 c0       	rjmp	.+0      	; 0xdea <adjustHour+0x8e>
     dea:	00 00       	nop
     dec:	c1 cf       	rjmp	.-126    	; 0xd70 <adjustHour+0x14>
     dee:	e1 e1       	ldi	r30, 0x11	; 17
     df0:	fa e7       	ldi	r31, 0x7A	; 122
     df2:	31 97       	sbiw	r30, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <adjustHour+0x96>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <adjustHour+0x9c>
     df8:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)
}//adjustHour
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <adjustMin>:

void adjustMin()
{
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	00 d0       	rcall	.+0      	; 0xe14 <adjustMin+0xa>
     e14:	1f 92       	push	r1
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     e1a:	00 e0       	ldi	r16, 0x00	; 0
     e1c:	10 e0       	ldi	r17, 0x00	; 0
    char strMin[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     e1e:	80 e8       	ldi	r24, 0x80	; 128
     e20:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e24:	8d e0       	ldi	r24, 0x0D	; 13
     e26:	8a 95       	dec	r24
     e28:	f1 f7       	brne	.-4      	; 0xe26 <adjustMin+0x1c>
     e2a:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (min)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"Min: ");
     e2c:	83 e6       	ldi	r24, 0x63	; 99
     e2e:	94 e0       	ldi	r25, 0x04	; 4
     e30:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        itoa(min, strMin, 10);
     e34:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <min>
     e38:	4a e0       	ldi	r20, 0x0A	; 10
     e3a:	be 01       	movw	r22, r28
     e3c:	6f 5f       	subi	r22, 0xFF	; 255
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	08 2e       	mov	r0, r24
     e42:	00 0c       	add	r0, r0
     e44:	99 0b       	sbc	r25, r25
     e46:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strMin);
     e4a:	ce 01       	movw	r24, r28
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	94 e0       	ldi	r25, 0x04	; 4
     e56:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     e5a:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e5c:	e7 ea       	ldi	r30, 0xA7	; 167
     e5e:	f1 e6       	ldi	r31, 0x61	; 97
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <adjustMin+0x56>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <adjustMin+0x5c>
     e66:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     e68:	84 fd       	sbrc	r24, 4
     e6a:	0c c0       	rjmp	.+24     	; 0xe84 <adjustMin+0x7a>
        {
            min++;
     e6c:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <min>
     e70:	8f 5f       	subi	r24, 0xFF	; 255
            if (min > 59)
     e72:	8c 33       	cpi	r24, 0x3C	; 60
     e74:	24 f4       	brge	.+8      	; 0xe7e <adjustMin+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            min++;
     e76:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <min>
     e7a:	01 2f       	mov	r16, r17
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <adjustMin+0x7a>
            if (min > 59)
                min=0;
     e7e:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <min>
     e82:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
     e84:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
     e86:	81 2f       	mov	r24, r17
     e88:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
     e8a:	89 30       	cpi	r24, 0x09	; 9
     e8c:	38 f4       	brcc	.+14     	; 0xe9c <adjustMin+0x92>
     e8e:	81 e1       	ldi	r24, 0x11	; 17
     e90:	9a e7       	ldi	r25, 0x7A	; 122
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <adjustMin+0x88>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <adjustMin+0x8e>
     e98:	00 00       	nop
     e9a:	c1 cf       	rjmp	.-126    	; 0xe1e <adjustMin+0x14>
     e9c:	e1 e1       	ldi	r30, 0x11	; 17
     e9e:	fa e7       	ldi	r31, 0x7A	; 122
     ea0:	31 97       	sbiw	r30, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <adjustMin+0x96>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <adjustMin+0x9c>
     ea6:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustMin
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <adjustSec>:

void adjustSec()
{
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <adjustSec+0xa>
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
    uint8_t DONE=0, val;
    uint8_t curLoop=0, preLoop=0, lapse=0;
     ec8:	00 e0       	ldi	r16, 0x00	; 0
     eca:	10 e0       	ldi	r17, 0x00	; 0
    char strSec[3];

    while (!DONE)
    {
    // set cursor to start of first line
        lcd_write_instruction_4d(lcd_SetCursor | lcd_LineOne);
     ecc:	80 e8       	ldi	r24, 0x80	; 128
     ece:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ed2:	8d e0       	ldi	r24, 0x0D	; 13
     ed4:	8a 95       	dec	r24
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <adjustSec+0x1c>
     ed8:	00 00       	nop
        _delay_us(DELAY_INST);                                  // 40 uS delay (sec)
    // display the first line of information
        lcd_write_string_4d((uint8_t *)"sec: ");
     eda:	89 e6       	ldi	r24, 0x69	; 105
     edc:	94 e0       	ldi	r25, 0x04	; 4
     ede:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        itoa(sec, strSec, 10);
     ee2:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <sec>
     ee6:	4a e0       	ldi	r20, 0x0A	; 10
     ee8:	be 01       	movw	r22, r28
     eea:	6f 5f       	subi	r22, 0xFF	; 255
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	08 2e       	mov	r0, r24
     ef0:	00 0c       	add	r0, r0
     ef2:	99 0b       	sbc	r25, r25
     ef4:	0e 94 21 09 	call	0x1242	; 0x1242 <__itoa_ncheck>
        lcd_write_string_4d((uint8_t *)strSec);
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        lcd_write_string_4d((uint8_t *)" ");
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_write_string_4d>
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
     f08:	83 b1       	in	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f0a:	e7 ea       	ldi	r30, 0xA7	; 167
     f0c:	f1 e6       	ldi	r31, 0x61	; 97
     f0e:	31 97       	sbiw	r30, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <adjustSec+0x56>
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <adjustSec+0x5c>
     f14:	00 00       	nop
        _delay_ms(100);
        if (val == 0)
     f16:	84 fd       	sbrc	r24, 4
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <adjustSec+0x7a>
        {
            sec++;
     f1a:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <sec>
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
            if (sec > 59)
     f20:	8c 33       	cpi	r24, 0x3C	; 60
     f22:	24 f4       	brge	.+8      	; 0xf2c <adjustSec+0x74>
        lcd_write_string_4d((uint8_t *)" ");
        val = tactile_Switch_port & _BV(tactile_Switch_bit);
        _delay_ms(100);
        if (val == 0)
        {
            sec++;
     f24:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sec>
     f28:	01 2f       	mov	r16, r17
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <adjustSec+0x7a>
            if (sec > 59)
                sec=0;
     f2c:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <sec>
     f30:	01 2f       	mov	r16, r17
            preLoop = curLoop;
        }
        curLoop++;
     f32:	1f 5f       	subi	r17, 0xFF	; 255
        lapse = curLoop - preLoop;
     f34:	81 2f       	mov	r24, r17
     f36:	80 1b       	sub	r24, r16
        if (lapse > adjustTimeInterval)
     f38:	89 30       	cpi	r24, 0x09	; 9
     f3a:	38 f4       	brcc	.+14     	; 0xf4a <adjustSec+0x92>
     f3c:	81 e1       	ldi	r24, 0x11	; 17
     f3e:	9a e7       	ldi	r25, 0x7A	; 122
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <adjustSec+0x88>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <adjustSec+0x8e>
     f46:	00 00       	nop
     f48:	c1 cf       	rjmp	.-126    	; 0xecc <adjustSec+0x14>
     f4a:	e1 e1       	ldi	r30, 0x11	; 17
     f4c:	fa e7       	ldi	r31, 0x7A	; 122
     f4e:	31 97       	sbiw	r30, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <adjustSec+0x96>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <adjustSec+0x9c>
     f54:	00 00       	nop
            DONE = 1;
        _delay_ms(halfSec/4);
    }//while (!DONE)

}//adjustSec
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <countButton>:

    uint8_t val;
    uint8_t DONE=0;


    loopCnt=0;
     f66:	80 e0       	ldi	r24, 0x00	; 0
    prevLoop=0;
     f68:	30 e0       	ldi	r19, 0x00	; 0
}//sysClockTest

//-----------------------------------
void countButton()
{
    uint8_t menuCnt=0;
     f6a:	20 e0       	ldi	r18, 0x00	; 0
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
            if (menuCnt != 0)
                DONE = 1;
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	40 e0       	ldi	r20, 0x00	; 0
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
     f70:	52 e0       	ldi	r21, 0x02	; 2
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
    {
        loopCnt++;
     f72:	8f 5f       	subi	r24, 0xFF	; 255
        curLoop = loopCnt;
        lapse = curLoop - prevLoop;
     f74:	98 2f       	mov	r25, r24
     f76:	93 1b       	sub	r25, r19

        //menuSelectInterval is
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
     f78:	95 30       	cpi	r25, 0x05	; 5
     f7a:	18 f0       	brcs	.+6      	; 0xf82 <countButton+0x1c>
        {
            if (menuCnt != 0)
     f7c:	21 11       	cpse	r18, r1
     f7e:	ad c0       	rjmp	.+346    	; 0x10da <countButton+0x174>
     f80:	97 c0       	rjmp	.+302    	; 0x10b0 <countButton+0x14a>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
     f82:	99 30       	cpi	r25, 0x09	; 9
     f84:	08 f4       	brcc	.+2      	; 0xf88 <countButton+0x22>
     f86:	9e c0       	rjmp	.+316    	; 0x10c4 <countButton+0x15e>
     f88:	22 23       	and	r18, r18
     f8a:	09 f4       	brne	.+2      	; 0xf8e <countButton+0x28>
     f8c:	8e c0       	rjmp	.+284    	; 0x10aa <countButton+0x144>
     f8e:	9a c0       	rjmp	.+308    	; 0x10c4 <countButton+0x15e>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
     f90:	1c 99       	sbic	0x03, 4	; 3
     f92:	10 c0       	rjmp	.+32     	; 0xfb4 <countButton+0x4e>
     f94:	94 2f       	mov	r25, r20
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <countButton+0x3c>
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
            DONE = 2;
     f98:	95 2f       	mov	r25, r21
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <countButton+0x3c>

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
     f9c:	94 2f       	mov	r25, r20
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <countButton+0x3c>
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
            if (menuCnt != 0)
                DONE = 1;
     fa0:	96 2f       	mov	r25, r22
     fa2:	e3 e2       	ldi	r30, 0x23	; 35
     fa4:	f4 ef       	ldi	r31, 0xF4	; 244
     fa6:	31 97       	sbiw	r30, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <countButton+0x40>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <countButton+0x46>
     fac:	00 00       	nop
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
      {
        // for debounce
        _delay_ms(halfSec/2);
        menuCnt++;
     fae:	2f 5f       	subi	r18, 0xFF	; 255

        //Pressing the button, lap time calculation should be reset
        //to give 1 sec of time to choose menuCnt
        prevLoop = loopCnt;
     fb0:	38 2f       	mov	r19, r24
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <countButton+0x50>
     fb4:	94 2f       	mov	r25, r20
     fb6:	e1 e1       	ldi	r30, 0x11	; 17
     fb8:	fa e7       	ldi	r31, 0x7A	; 122
     fba:	31 97       	sbiw	r30, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <countButton+0x54>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <countButton+0x5a>
     fc0:	00 00       	nop
    //Get menuCnt by counting the button press
    //If pressing the button within 1 second of interval between each press,
    //  it will be accumulated as "menuCnt".
    //If the interval is over 1 sec, which is menuSelectInterval,
    //  then DONE is set to 1.
    while (!DONE)
     fc2:	99 23       	and	r25, r25
     fc4:	b1 f2       	breq	.-84     	; 0xf72 <countButton+0xc>

    //menuCnt has been set within 3sec of a PCINT occurence
    //  then, play WDT count for a corresponding alarm period.
    if (DONE)
    {
        if (DONE == 2)
     fc6:	92 30       	cpi	r25, 0x02	; 2
     fc8:	11 f4       	brne	.+4      	; 0xfce <countButton+0x68>
            menuCnt = prevMenuCnt;
     fca:	20 91 7f 04 	lds	r18, 0x047F	; 0x80047f <prevMenuCnt>
        //visual cue to notifiy user selected menuCnt
        //blinkLED(menuCnt);
        //_delay_ms(halfSec);
        //turnOnLCDpower();
        //lcd_dispON();
        prevMenuCnt = menuCnt;
     fce:	20 93 7f 04 	sts	0x047F, r18	; 0x80047f <prevMenuCnt>
        switch (menuCnt)
     fd2:	23 30       	cpi	r18, 0x03	; 3
     fd4:	79 f1       	breq	.+94     	; 0x1034 <countButton+0xce>
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <countButton+0x7c>
     fd8:	21 30       	cpi	r18, 0x01	; 1
     fda:	59 f0       	breq	.+22     	; 0xff2 <countButton+0x8c>
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	a9 f0       	breq	.+42     	; 0x100a <countButton+0xa4>
     fe0:	5a c0       	rjmp	.+180    	; 0x1096 <countButton+0x130>
     fe2:	25 30       	cpi	r18, 0x05	; 5
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <countButton+0x82>
     fe6:	48 c0       	rjmp	.+144    	; 0x1078 <countButton+0x112>
     fe8:	a8 f1       	brcs	.+106    	; 0x1054 <countButton+0xee>
     fea:	26 30       	cpi	r18, 0x06	; 6
     fec:	09 f4       	brne	.+2      	; 0xff0 <countButton+0x8a>
     fee:	50 c0       	rjmp	.+160    	; 0x1090 <countButton+0x12a>
     ff0:	52 c0       	rjmp	.+164    	; 0x1096 <countButton+0x130>
        {
            case 1:
                //lcd_dispWords();
                lcd_dispRealClock();
     ff2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_dispRealClock>
     ff6:	ff e3       	ldi	r31, 0x3F	; 63
     ff8:	2d e0       	ldi	r18, 0x0D	; 13
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	f1 50       	subi	r31, 0x01	; 1
     ffe:	20 40       	sbci	r18, 0x00	; 0
    1000:	80 40       	sbci	r24, 0x00	; 0
    1002:	e1 f7       	brne	.-8      	; 0xffc <countButton+0x96>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <countButton+0xa0>
    1006:	00 00       	nop
    1008:	08 95       	ret
    100a:	9f e3       	ldi	r25, 0x3F	; 63
    100c:	ed e0       	ldi	r30, 0x0D	; 13
    100e:	f3 e0       	ldi	r31, 0x03	; 3
    1010:	91 50       	subi	r25, 0x01	; 1
    1012:	e0 40       	sbci	r30, 0x00	; 0
    1014:	f0 40       	sbci	r31, 0x00	; 0
    1016:	e1 f7       	brne	.-8      	; 0x1010 <countButton+0xaa>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <countButton+0xb4>
    101a:	00 00       	nop
                _delay_ms(1000);
                break;
            case 2:
                _delay_ms(1000);
                //turnOnLCDBacklight();
                lcd_showDHT11();
    101c:	0e 94 bc 03 	call	0x778	; 0x778 <lcd_showDHT11>
    1020:	2f e3       	ldi	r18, 0x3F	; 63
    1022:	82 e4       	ldi	r24, 0x42	; 66
    1024:	9f e0       	ldi	r25, 0x0F	; 15
    1026:	21 50       	subi	r18, 0x01	; 1
    1028:	80 40       	sbci	r24, 0x00	; 0
    102a:	90 40       	sbci	r25, 0x00	; 0
    102c:	e1 f7       	brne	.-8      	; 0x1026 <countButton+0xc0>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <countButton+0xca>
    1030:	00 00       	nop
    1032:	08 95       	ret
                _delay_ms(5000);
				//turnOffLCDBacklight();
                break;
            case 3:
                turnOnLCDBacklight();
    1034:	0e 94 14 02 	call	0x428	; 0x428 <turnOnLCDBacklight>
                lcd_dispRealClock();
    1038:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_dispRealClock>
    103c:	ef eb       	ldi	r30, 0xBF	; 191
    103e:	fc e5       	ldi	r31, 0x5C	; 92
    1040:	25 e1       	ldi	r18, 0x15	; 21
    1042:	e1 50       	subi	r30, 0x01	; 1
    1044:	f0 40       	sbci	r31, 0x00	; 0
    1046:	20 40       	sbci	r18, 0x00	; 0
    1048:	e1 f7       	brne	.-8      	; 0x1042 <countButton+0xdc>
    104a:	00 c0       	rjmp	.+0      	; 0x104c <countButton+0xe6>
    104c:	00 00       	nop
                _delay_ms(7000);
                turnOffLCDBacklight();
    104e:	0e 94 16 02 	call	0x42c	; 0x42c <turnOffLCDBacklight>
                break;
    1052:	08 95       	ret
            case 4:
                //adjustClock();
                adjustMin();
    1054:	0e 94 05 07 	call	0xe0a	; 0xe0a <adjustMin>
                adjustHour();
    1058:	0e 94 ae 06 	call	0xd5c	; 0xd5c <adjustHour>
                adjustSec();
    105c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <adjustSec>
                lcd_dispRealClock();
    1060:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_dispRealClock>
    1064:	8f e3       	ldi	r24, 0x3F	; 63
    1066:	9d e0       	ldi	r25, 0x0D	; 13
    1068:	e3 e0       	ldi	r30, 0x03	; 3
    106a:	81 50       	subi	r24, 0x01	; 1
    106c:	90 40       	sbci	r25, 0x00	; 0
    106e:	e0 40       	sbci	r30, 0x00	; 0
    1070:	e1 f7       	brne	.-8      	; 0x106a <countButton+0x104>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <countButton+0x10e>
    1074:	00 00       	nop
    1076:	08 95       	ret
                _delay_ms(1000);
                break;
            case 5:
                lcd_dispAccumulatedTime();
    1078:	0e 94 65 03 	call	0x6ca	; 0x6ca <lcd_dispAccumulatedTime>
    107c:	ff e7       	ldi	r31, 0x7F	; 127
    107e:	2a e1       	ldi	r18, 0x1A	; 26
    1080:	86 e0       	ldi	r24, 0x06	; 6
    1082:	f1 50       	subi	r31, 0x01	; 1
    1084:	20 40       	sbci	r18, 0x00	; 0
    1086:	80 40       	sbci	r24, 0x00	; 0
    1088:	e1 f7       	brne	.-8      	; 0x1082 <countButton+0x11c>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <countButton+0x126>
    108c:	00 00       	nop
    108e:	08 95       	ret
                _delay_ms(2000);
                break;
            case 6:
                lcd_dispProgInfo();
    1090:	0e 94 2d 04 	call	0x85a	; 0x85a <lcd_dispProgInfo>
                break;
    1094:	08 95       	ret
            default:
                lcd_dispMenu();
    1096:	0e 94 61 04 	call	0x8c2	; 0x8c2 <lcd_dispMenu>
    109a:	08 95       	ret
    109c:	e1 e1       	ldi	r30, 0x11	; 17
    109e:	fa e7       	ldi	r31, 0x7A	; 122
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <countButton+0x13a>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <countButton+0x140>
    10a6:	00 00       	nop
    10a8:	90 cf       	rjmp	.-224    	; 0xfca <countButton+0x64>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    10aa:	1c 99       	sbic	0x03, 4	; 3
    10ac:	f7 cf       	rjmp	.-18     	; 0x109c <countButton+0x136>
    10ae:	74 cf       	rjmp	.-280    	; 0xf98 <countButton+0x32>
                //wait another 1 sec to get user's menuCnt
                ;
        }
        //if user has not chosen menuCnt > 0, and time lapse over 3sec,
        //forget about it, and call DONE as 2, and eventually go to sleep.
        if ((lapse > menuSelectInterval*2) && (menuCnt ==0))
    10b0:	99 30       	cpi	r25, 0x09	; 9
    10b2:	d8 f7       	brcc	.-10     	; 0x10aa <countButton+0x144>
    10b4:	6d cf       	rjmp	.-294    	; 0xf90 <countButton+0x2a>
    10b6:	e1 e1       	ldi	r30, 0x11	; 17
    10b8:	fa e7       	ldi	r31, 0x7A	; 122
    10ba:	31 97       	sbiw	r30, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <countButton+0x154>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <countButton+0x15a>
    10c0:	00 00       	nop
    10c2:	57 cf       	rjmp	.-338    	; 0xf72 <countButton+0xc>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    10c4:	1c 99       	sbic	0x03, 4	; 3
    10c6:	f7 cf       	rjmp	.-18     	; 0x10b6 <countButton+0x150>
    10c8:	69 cf       	rjmp	.-302    	; 0xf9c <countButton+0x36>
    10ca:	81 e1       	ldi	r24, 0x11	; 17
    10cc:	9a e7       	ldi	r25, 0x7A	; 122
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <countButton+0x168>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <countButton+0x16e>
    10d4:	00 00       	nop
        //  multiple of _delay_ms(halfSec/4)
        //  which is the unit delay of each while loop
        if (lapse > menuSelectInterval)
        {
            if (menuCnt != 0)
                DONE = 1;
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	76 cf       	rjmp	.-276    	; 0xfc6 <countButton+0x60>
            DONE = 2;

      //check if tactile_Switch pressed to 0
      //AVR equivalent to Arduino digitalRead(tactile_Switch_bit)
      val = tactile_Switch_port & _BV(tactile_Switch_bit);
      if (val == 0)
    10da:	1c 99       	sbic	0x03, 4	; 3
    10dc:	f6 cf       	rjmp	.-20     	; 0x10ca <countButton+0x164>
    10de:	60 cf       	rjmp	.-320    	; 0xfa0 <countButton+0x3a>

000010e0 <__divmodqi4>:
    10e0:	87 fb       	bst	r24, 7
    10e2:	08 2e       	mov	r0, r24
    10e4:	06 26       	eor	r0, r22
    10e6:	87 fd       	sbrc	r24, 7
    10e8:	81 95       	neg	r24
    10ea:	67 fd       	sbrc	r22, 7
    10ec:	61 95       	neg	r22
    10ee:	0e 94 a7 08 	call	0x114e	; 0x114e <__udivmodqi4>
    10f2:	0e f4       	brtc	.+2      	; 0x10f6 <__divmodqi4_1>
    10f4:	91 95       	neg	r25

000010f6 <__divmodqi4_1>:
    10f6:	07 fc       	sbrc	r0, 7
    10f8:	81 95       	neg	r24

000010fa <__divmodqi4_exit>:
    10fa:	08 95       	ret

000010fc <__divmodhi4>:
    10fc:	97 fb       	bst	r25, 7
    10fe:	07 2e       	mov	r0, r23
    1100:	16 f4       	brtc	.+4      	; 0x1106 <__divmodhi4+0xa>
    1102:	00 94       	com	r0
    1104:	07 d0       	rcall	.+14     	; 0x1114 <__divmodhi4_neg1>
    1106:	77 fd       	sbrc	r23, 7
    1108:	09 d0       	rcall	.+18     	; 0x111c <__divmodhi4_neg2>
    110a:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodhi4>
    110e:	07 fc       	sbrc	r0, 7
    1110:	05 d0       	rcall	.+10     	; 0x111c <__divmodhi4_neg2>
    1112:	3e f4       	brtc	.+14     	; 0x1122 <__divmodhi4_exit>

00001114 <__divmodhi4_neg1>:
    1114:	90 95       	com	r25
    1116:	81 95       	neg	r24
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	08 95       	ret

0000111c <__divmodhi4_neg2>:
    111c:	70 95       	com	r23
    111e:	61 95       	neg	r22
    1120:	7f 4f       	sbci	r23, 0xFF	; 255

00001122 <__divmodhi4_exit>:
    1122:	08 95       	ret

00001124 <__tablejump2__>:
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	05 90       	lpm	r0, Z+
    112a:	f4 91       	lpm	r31, Z
    112c:	e0 2d       	mov	r30, r0
    112e:	09 94       	ijmp

00001130 <__umulhisi3>:
    1130:	a2 9f       	mul	r26, r18
    1132:	b0 01       	movw	r22, r0
    1134:	b3 9f       	mul	r27, r19
    1136:	c0 01       	movw	r24, r0
    1138:	a3 9f       	mul	r26, r19
    113a:	70 0d       	add	r23, r0
    113c:	81 1d       	adc	r24, r1
    113e:	11 24       	eor	r1, r1
    1140:	91 1d       	adc	r25, r1
    1142:	b2 9f       	mul	r27, r18
    1144:	70 0d       	add	r23, r0
    1146:	81 1d       	adc	r24, r1
    1148:	11 24       	eor	r1, r1
    114a:	91 1d       	adc	r25, r1
    114c:	08 95       	ret

0000114e <__udivmodqi4>:
    114e:	99 1b       	sub	r25, r25
    1150:	79 e0       	ldi	r23, 0x09	; 9
    1152:	04 c0       	rjmp	.+8      	; 0x115c <__udivmodqi4_ep>

00001154 <__udivmodqi4_loop>:
    1154:	99 1f       	adc	r25, r25
    1156:	96 17       	cp	r25, r22
    1158:	08 f0       	brcs	.+2      	; 0x115c <__udivmodqi4_ep>
    115a:	96 1b       	sub	r25, r22

0000115c <__udivmodqi4_ep>:
    115c:	88 1f       	adc	r24, r24
    115e:	7a 95       	dec	r23
    1160:	c9 f7       	brne	.-14     	; 0x1154 <__udivmodqi4_loop>
    1162:	80 95       	com	r24
    1164:	08 95       	ret

00001166 <__udivmodhi4>:
    1166:	aa 1b       	sub	r26, r26
    1168:	bb 1b       	sub	r27, r27
    116a:	51 e1       	ldi	r21, 0x11	; 17
    116c:	07 c0       	rjmp	.+14     	; 0x117c <__udivmodhi4_ep>

0000116e <__udivmodhi4_loop>:
    116e:	aa 1f       	adc	r26, r26
    1170:	bb 1f       	adc	r27, r27
    1172:	a6 17       	cp	r26, r22
    1174:	b7 07       	cpc	r27, r23
    1176:	10 f0       	brcs	.+4      	; 0x117c <__udivmodhi4_ep>
    1178:	a6 1b       	sub	r26, r22
    117a:	b7 0b       	sbc	r27, r23

0000117c <__udivmodhi4_ep>:
    117c:	88 1f       	adc	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	5a 95       	dec	r21
    1182:	a9 f7       	brne	.-22     	; 0x116e <__udivmodhi4_loop>
    1184:	80 95       	com	r24
    1186:	90 95       	com	r25
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	08 95       	ret

0000118e <atoi>:
    118e:	fc 01       	movw	r30, r24
    1190:	88 27       	eor	r24, r24
    1192:	99 27       	eor	r25, r25
    1194:	e8 94       	clt
    1196:	21 91       	ld	r18, Z+
    1198:	20 32       	cpi	r18, 0x20	; 32
    119a:	e9 f3       	breq	.-6      	; 0x1196 <atoi+0x8>
    119c:	29 30       	cpi	r18, 0x09	; 9
    119e:	10 f0       	brcs	.+4      	; 0x11a4 <atoi+0x16>
    11a0:	2e 30       	cpi	r18, 0x0E	; 14
    11a2:	c8 f3       	brcs	.-14     	; 0x1196 <atoi+0x8>
    11a4:	2b 32       	cpi	r18, 0x2B	; 43
    11a6:	41 f0       	breq	.+16     	; 0x11b8 <atoi+0x2a>
    11a8:	2d 32       	cpi	r18, 0x2D	; 45
    11aa:	39 f4       	brne	.+14     	; 0x11ba <atoi+0x2c>
    11ac:	68 94       	set
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <atoi+0x2a>
    11b0:	0e 94 2c 09 	call	0x1258	; 0x1258 <__mulhi_const_10>
    11b4:	82 0f       	add	r24, r18
    11b6:	91 1d       	adc	r25, r1
    11b8:	21 91       	ld	r18, Z+
    11ba:	20 53       	subi	r18, 0x30	; 48
    11bc:	2a 30       	cpi	r18, 0x0A	; 10
    11be:	c0 f3       	brcs	.-16     	; 0x11b0 <atoi+0x22>
    11c0:	1e f4       	brtc	.+6      	; 0x11c8 <atoi+0x3a>
    11c2:	90 95       	com	r25
    11c4:	81 95       	neg	r24
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	08 95       	ret

000011ca <strtok>:
    11ca:	40 e7       	ldi	r20, 0x70	; 112
    11cc:	54 e0       	ldi	r21, 0x04	; 4
    11ce:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <strtok_r>
    11d2:	08 95       	ret

000011d4 <strcmp>:
    11d4:	fb 01       	movw	r30, r22
    11d6:	dc 01       	movw	r26, r24
    11d8:	8d 91       	ld	r24, X+
    11da:	01 90       	ld	r0, Z+
    11dc:	80 19       	sub	r24, r0
    11de:	01 10       	cpse	r0, r1
    11e0:	d9 f3       	breq	.-10     	; 0x11d8 <strcmp+0x4>
    11e2:	99 0b       	sbc	r25, r25
    11e4:	08 95       	ret

000011e6 <strcpy>:
    11e6:	fb 01       	movw	r30, r22
    11e8:	dc 01       	movw	r26, r24
    11ea:	01 90       	ld	r0, Z+
    11ec:	0d 92       	st	X+, r0
    11ee:	00 20       	and	r0, r0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <strcpy+0x4>
    11f2:	08 95       	ret

000011f4 <strtok_r>:
    11f4:	fa 01       	movw	r30, r20
    11f6:	a1 91       	ld	r26, Z+
    11f8:	b0 81       	ld	r27, Z
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	19 f4       	brne	.+6      	; 0x1204 <strtok_r+0x10>
    11fe:	10 97       	sbiw	r26, 0x00	; 0
    1200:	e1 f0       	breq	.+56     	; 0x123a <strtok_r+0x46>
    1202:	cd 01       	movw	r24, r26
    1204:	dc 01       	movw	r26, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0d 90       	ld	r0, X+
    120a:	00 20       	and	r0, r0
    120c:	11 f4       	brne	.+4      	; 0x1212 <strtok_r+0x1e>
    120e:	c0 01       	movw	r24, r0
    1210:	13 c0       	rjmp	.+38     	; 0x1238 <strtok_r+0x44>
    1212:	fb 01       	movw	r30, r22
    1214:	21 91       	ld	r18, Z+
    1216:	22 23       	and	r18, r18
    1218:	19 f0       	breq	.+6      	; 0x1220 <strtok_r+0x2c>
    121a:	20 15       	cp	r18, r0
    121c:	d9 f7       	brne	.-10     	; 0x1214 <strtok_r+0x20>
    121e:	f3 cf       	rjmp	.-26     	; 0x1206 <strtok_r+0x12>
    1220:	fb 01       	movw	r30, r22
    1222:	21 91       	ld	r18, Z+
    1224:	20 15       	cp	r18, r0
    1226:	19 f4       	brne	.+6      	; 0x122e <strtok_r+0x3a>
    1228:	1e 92       	st	-X, r1
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	06 c0       	rjmp	.+12     	; 0x123a <strtok_r+0x46>
    122e:	22 23       	and	r18, r18
    1230:	c1 f7       	brne	.-16     	; 0x1222 <strtok_r+0x2e>
    1232:	0d 90       	ld	r0, X+
    1234:	00 20       	and	r0, r0
    1236:	a1 f7       	brne	.-24     	; 0x1220 <strtok_r+0x2c>
    1238:	d0 01       	movw	r26, r0
    123a:	fa 01       	movw	r30, r20
    123c:	a1 93       	st	Z+, r26
    123e:	b0 83       	st	Z, r27
    1240:	08 95       	ret

00001242 <__itoa_ncheck>:
    1242:	bb 27       	eor	r27, r27
    1244:	4a 30       	cpi	r20, 0x0A	; 10
    1246:	31 f4       	brne	.+12     	; 0x1254 <__itoa_ncheck+0x12>
    1248:	99 23       	and	r25, r25
    124a:	22 f4       	brpl	.+8      	; 0x1254 <__itoa_ncheck+0x12>
    124c:	bd e2       	ldi	r27, 0x2D	; 45
    124e:	90 95       	com	r25
    1250:	81 95       	neg	r24
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	0c 94 35 09 	jmp	0x126a	; 0x126a <__utoa_common>

00001258 <__mulhi_const_10>:
    1258:	7a e0       	ldi	r23, 0x0A	; 10
    125a:	97 9f       	mul	r25, r23
    125c:	90 2d       	mov	r25, r0
    125e:	87 9f       	mul	r24, r23
    1260:	80 2d       	mov	r24, r0
    1262:	91 0d       	add	r25, r1
    1264:	11 24       	eor	r1, r1
    1266:	08 95       	ret

00001268 <__utoa_ncheck>:
    1268:	bb 27       	eor	r27, r27

0000126a <__utoa_common>:
    126a:	fb 01       	movw	r30, r22
    126c:	55 27       	eor	r21, r21
    126e:	aa 27       	eor	r26, r26
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	aa 1f       	adc	r26, r26
    1276:	a4 17       	cp	r26, r20
    1278:	10 f0       	brcs	.+4      	; 0x127e <__utoa_common+0x14>
    127a:	a4 1b       	sub	r26, r20
    127c:	83 95       	inc	r24
    127e:	50 51       	subi	r21, 0x10	; 16
    1280:	b9 f7       	brne	.-18     	; 0x1270 <__utoa_common+0x6>
    1282:	a0 5d       	subi	r26, 0xD0	; 208
    1284:	aa 33       	cpi	r26, 0x3A	; 58
    1286:	08 f0       	brcs	.+2      	; 0x128a <__utoa_common+0x20>
    1288:	a9 5d       	subi	r26, 0xD9	; 217
    128a:	a1 93       	st	Z+, r26
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	79 f7       	brne	.-34     	; 0x126e <__utoa_common+0x4>
    1290:	b1 11       	cpse	r27, r1
    1292:	b1 93       	st	Z+, r27
    1294:	11 92       	st	Z+, r1
    1296:	cb 01       	movw	r24, r22
    1298:	0c 94 4e 09 	jmp	0x129c	; 0x129c <strrev>

0000129c <strrev>:
    129c:	dc 01       	movw	r26, r24
    129e:	fc 01       	movw	r30, r24
    12a0:	67 2f       	mov	r22, r23
    12a2:	71 91       	ld	r23, Z+
    12a4:	77 23       	and	r23, r23
    12a6:	e1 f7       	brne	.-8      	; 0x12a0 <strrev+0x4>
    12a8:	32 97       	sbiw	r30, 0x02	; 2
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <strrev+0x18>
    12ac:	7c 91       	ld	r23, X
    12ae:	6d 93       	st	X+, r22
    12b0:	70 83       	st	Z, r23
    12b2:	62 91       	ld	r22, -Z
    12b4:	ae 17       	cp	r26, r30
    12b6:	bf 07       	cpc	r27, r31
    12b8:	c8 f3       	brcs	.-14     	; 0x12ac <strrev+0x10>
    12ba:	08 95       	ret

000012bc <_exit>:
    12bc:	f8 94       	cli

000012be <__stop_program>:
    12be:	ff cf       	rjmp	.-2      	; 0x12be <__stop_program>
