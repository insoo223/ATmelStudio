
ISR--23189811.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000014e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000424  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a3  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000285  00000000  00000000  000009ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d9  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00000f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__vector_8>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a2 36       	cpi	r26, 0x62	; 98
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	30 d0       	rcall	.+96     	; 0x8e <main>
  2e:	53 c0       	rjmp	.+166    	; 0xd6 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_8>:

uint8_t WDTtick; 
uint8_t WDTtick30min;

ISR(WDT_vect) 
{
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	8f 93       	push	r24

	// --------- INCREASE WDT TICK COUNT ----------------------
	// increase WDTtick every UNIT_DELAY_WDT sec
	++WDTtick;
  3e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  42:	8f 5f       	subi	r24, 0xFF	; 255
  44:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

	// On every SET_DELAY_UNIT (half-hour) except last half-hour
	//  reset WDTtick count and increase half-hour count
	if ((WDTtick >= SET_DELAY_UNIT) && (WDTtick30min < WAKEUP_PERIOD))
  48:	81 3e       	cpi	r24, 0xE1	; 225
  4a:	48 f0       	brcs	.+18     	; 0x5e <__SREG__+0x1f>
  4c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <WDTtick30min>
  50:	82 30       	cpi	r24, 0x02	; 2
  52:	48 f4       	brcc	.+18     	; 0x66 <__SREG__+0x27>
	{
		// Reset WDT counter value of the designated address in the EEPROM of ATtiny13A
		//eeprom_update_byte((uint8_t*)WDTTICK_CTR_ADDR, 0);
		WDTtick = 0;
  54:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>

		//Increase WDT Half-hour counter value of the designated address in the EEPROM of ATtiny13A
		//eeprom_update_byte((uint8_t*)WDTTICK_30MIN_ADDR, ++WDTtick30min);
		++WDTtick30min;
  58:	8f 5f       	subi	r24, 0xFF	; 255
  5a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <WDTtick30min>
	}//if (WDTtick >= SET_DELAY_UNIT)  && (WDTtick30min < WAKEUP_PERIOD)

	// On every WAKEUP_PERIOD (i.e. one hour)
	if (WDTtick30min >= WAKEUP_PERIOD)
  5e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <WDTtick30min>
  62:	82 30       	cpi	r24, 0x02	; 2
  64:	70 f0       	brcs	.+28     	; 0x82 <__SREG__+0x43>
	{
		// --------- DO TO PROPER ACTION TO WDT TICK COUNT ----------------------
		// When the accumulated WDT reaches every SET_DELAY_UNIT, turn on ESP-01
		if (WDTtick == 0)
  66:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  6a:	81 11       	cpse	r24, r1
  6c:	03 c0       	rjmp	.+6      	; 0x74 <__SREG__+0x35>
		{
			// Give logic HIGH to port 4 to turn ON NPN transistor(2n2222),
			//  so let the GND of ESP-01 module CONNECT to system GND.
			// This will power ON ESP-01 and measure temperature & humidity via DHT22
			PORTB = 1<<NPN_TR_PORT; //turn on GND of MOSFET or ESP-01
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	88 bb       	out	0x18, r24	; 24
  72:	07 c0       	rjmp	.+14     	; 0x82 <__SREG__+0x43>
		}//if (WDTtick == 0)
		else if (WDTtick >= WAKEUP_DURATION)
  74:	86 39       	cpi	r24, 0x96	; 150
  76:	28 f0       	brcs	.+10     	; 0x82 <__SREG__+0x43>
		{
			// Give logic LOW to port 4 to turn OFF NPN transistor(2n2222),
			//  so let the GND of ESP-01 module DISCONNECT to system GND.
			// This will power OFF ESP-01 and don't measure temperature & humidity via DHT22
			PORTB = (0<<NPN_TR_PORT); //turn off GND of MOSFET or ESP-01
  78:	18 ba       	out	0x18, r1	; 24

			// Reset WDT counter value of the designated address in the EEPROM of ATtiny13A
			//eeprom_update_byte((uint8_t*)WDTTICK_CTR_ADDR, 0);
			WDTtick = 0;
  7a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			//Reset WDT Half-hour counter value of the designated address in the EEPROM of ATtiny13A
			//eeprom_update_byte((uint8_t*)WDTTICK_30MIN_ADDR, 0);
			WDTtick30min=0;
  7e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <WDTtick30min>
		}//else if (WDTtick == 1)
	}//if (WDTtick30min >= WAKEUP_PERIOD)


}//ISR(WDT_vect) 
  82:	8f 91       	pop	r24
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <main>:

int main(void) {

	WDTtick=0;
  8e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	WDTtick30min=0;
  92:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <WDTtick30min>
	// Set up NPN_TR_PORT & PNP_TR_PORT mode to output
	DDRB = (1<<NPN_TR_PORT);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	87 bb       	out	0x17, r24	; 23

	PORTB = 1<<NPN_TR_PORT; //turn on MOSFET
  9a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e7       	ldi	r18, 0x7F	; 127
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	9e e1       	ldi	r25, 0x1E	; 30
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <__stack+0x3>
  aa:	00 c0       	rjmp	.+0      	; 0xac <__stack+0xd>
  ac:	00 00       	nop

	_delay_ms(INITPUMP_DURATION); // initial measurement of DHT22 via ESP-01 for 10 sec
	
	PORTB = 0<<NPN_TR_PORT; //turn off MOSFET
  ae:	18 ba       	out	0x18, r1	; 24
	{
		case 4:
			WDTCR |= (1<<WDP3); // 4s
			break;
		case 8:
			WDTCR |= (1<<WDP3) | (1<<WDP0); // 8s
  b0:	81 b5       	in	r24, 0x21	; 33
  b2:	81 62       	ori	r24, 0x21	; 33
  b4:	81 bd       	out	0x21, r24	; 33
		default:
			WDTCR |= (1<<WDP3) | (1<<WDP0); // 8s
	}

	// Enable watchdog timer interrupts
	WDTCR |= (1<<WDTIE);
  b6:	81 b5       	in	r24, 0x21	; 33
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	81 bd       	out	0x21, r24	; 33

	sei(); // Enable global interrupts
  bc:	78 94       	sei

	// Use the Power Down sleep mode
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  be:	85 b7       	in	r24, 0x35	; 53
  c0:	87 7e       	andi	r24, 0xE7	; 231
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	85 bf       	out	0x35, r24	; 53
	//set_sleep_mode(SLEEP_MODE_IDLE);

	for (;;) {
		sleep_mode();   // go to sleep and wait for interrupt...
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	85 bf       	out	0x35, r24	; 53
  cc:	88 95       	sleep
  ce:	85 b7       	in	r24, 0x35	; 53
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	85 bf       	out	0x35, r24	; 53
	}
  d4:	f8 cf       	rjmp	.-16     	; 0xc6 <__stack+0x27>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
