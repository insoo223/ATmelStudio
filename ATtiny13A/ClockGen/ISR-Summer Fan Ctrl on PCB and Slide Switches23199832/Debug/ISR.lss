
ISR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000015e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  00800064  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000054d  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e8  00000000  00000000  000007e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000377  00000000  00000000  00000bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000358  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee e5       	ldi	r30, 0x5E	; 94
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a4 36       	cpi	r26, 0x64	; 100
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	50 d0       	rcall	.+160    	; 0xe4 <main>
  44:	8a c0       	rjmp	.+276    	; 0x15a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_8>:
uint8_t WDTtick1min; //sec counter of UNIT_DELAY_WDT * SET_DELAY_UNIT
uint8_t WDTtick3min; //sec counter of UNIT_DELAY_WDT * SET_DELAY_UNIT * WAKEUP_PERIOD
uint8_t leftSWstatus;

ISR(WDT_vect) 
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	// --------- INCREASE WDT TICK COUNT ----------------------
	// increase WDTtick every UNIT_DELAY_WDT sec
	++WDTtick;
  56:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <WDTtick>
  5a:	8f 5f       	subi	r24, 0xFF	; 255
  5c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <WDTtick>
	//check LEFT switch on PB
	if (PINB & 0x08)
  60:	b3 9b       	sbis	0x16, 3	; 22
  62:	03 c0       	rjmp	.+6      	; 0x6a <__vector_8+0x22>
		WAKEUP_PERIOD = 1;
  64:	91 e0       	ldi	r25, 0x01	; 1
  66:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <WAKEUP_PERIOD>
	//check Mid switch on PB
	if (PINB & 0x02)
  6a:	b1 9b       	sbis	0x16, 1	; 22
  6c:	03 c0       	rjmp	.+6      	; 0x74 <__vector_8+0x2c>
		WAKEUP_PERIOD = 2;
  6e:	92 e0       	ldi	r25, 0x02	; 2
  70:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <WAKEUP_PERIOD>
	if (PINB & 0x04)
  74:	b2 9b       	sbis	0x16, 2	; 22
  76:	03 c0       	rjmp	.+6      	; 0x7e <__vector_8+0x36>
		WAKEUP_PERIOD = 3;
  78:	93 e0       	ldi	r25, 0x03	; 3
  7a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <WAKEUP_PERIOD>
	// On every SET_DELAY_UNIT,
	//  reset WDTtick count and increase 1min count
	if ((WDTtick >= SET_DELAY_UNIT) && (WDTtick1min < WAKEUP_PERIOD))
  7e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <SET_DELAY_UNIT>
  82:	89 17       	cp	r24, r25
  84:	58 f0       	brcs	.+22     	; 0x9c <__vector_8+0x54>
  86:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  8a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <WAKEUP_PERIOD>
  8e:	89 17       	cp	r24, r25
  90:	58 f4       	brcc	.+22     	; 0xa8 <__stack+0x9>
	{
		// Reset WDT 8sec counter
		WDTtick = 0;
  92:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <WDTtick>

		//Increase WDT 1min counter
		++WDTtick1min;
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
	}//if (WDTtick >= SET_DELAY_UNIT)  && (WDTtick1min < WAKEUP_PERIOD)

	// On every WAKEUP_PERIOD (i.e. 3min)
	if (WDTtick1min >= WAKEUP_PERIOD)
  9c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__data_end>
  a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <WAKEUP_PERIOD>
  a4:	98 17       	cp	r25, r24
  a6:	68 f0       	brcs	.+26     	; 0xc2 <__stack+0x23>
	{
		PORTB ^= 1<<NPN_TR_PORT; //toggle on/off NPN TR
  a8:	98 b3       	in	r25, 0x18	; 24
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	89 27       	eor	r24, r25
  ae:	88 bb       	out	0x18, r24	; 24
		// Reset WDT 8sec counter
		WDTtick = 0;
  b0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <WDTtick>
		//Reset WDT 1min counter
		WDTtick1min=0;
  b4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		//Increase WDT 3min counter
		WDTtick3min++;
  b8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <WDTtick3min>
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <WDTtick3min>
	}//if (WDTtick1min >= WAKEUP_PERIOD)

	// After 1hour-long operation, stop all the operation for safety measure.
	if (WDTtick3min >= SYS_STOP_PERIOD)
  c2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <WDTtick3min>
  c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SYS_STOP_PERIOD>
  ca:	98 17       	cp	r25, r24
  cc:	20 f0       	brcs	.+8      	; 0xd6 <__stack+0x37>
	{
		// Disable watchdog timer interrupts
		WDTCR &= ~(1<<WDTIE);
  ce:	81 b5       	in	r24, 0x21	; 33
  d0:	8f 7b       	andi	r24, 0xBF	; 191
  d2:	81 bd       	out	0x21, r24	; 33
		// Disable global interrupts
		cli(); 
  d4:	f8 94       	cli
	}
}//ISR(WDT_vect) 
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <main>:

int main(void) {
	WDTtick=0;
  e4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <WDTtick>
	WDTtick1min=0;
  e8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>

	// Set up NPN_TR_PORT mode to output
	DDRB = (1<<NPN_TR_PORT);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	87 bb       	out	0x17, r24	; 23
	// Set up slide switches mode to intput
	DDRB &= ~(1<<LEFT_SW_PORT);
  f0:	bb 98       	cbi	0x17, 3	; 23
	DDRB &= ~(1<<MID_SW_PORT);
  f2:	b9 98       	cbi	0x17, 1	; 23
	DDRB &= ~(1<<RITE_SW_PORT);
  f4:	ba 98       	cbi	0x17, 2	; 23

	// temporarily prescale timer to UNIT_DELAY_WDT seconds so we can measure current
	switch (UNIT_DELAY_WDT)
  f6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <UNIT_DELAY_WDT>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	69 f0       	breq	.+26     	; 0x118 <main+0x34>
  fe:	18 f4       	brcc	.+6      	; 0x106 <main+0x22>
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	31 f0       	breq	.+12     	; 0x110 <main+0x2c>
 104:	15 c0       	rjmp	.+42     	; 0x130 <main+0x4c>
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	59 f0       	breq	.+22     	; 0x120 <main+0x3c>
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	69 f0       	breq	.+26     	; 0x128 <main+0x44>
 10e:	10 c0       	rjmp	.+32     	; 0x130 <main+0x4c>
	{
		case 1:
			WDTCR |= (1<<WDP2) | (1<<WDP1); // 1s
 110:	81 b5       	in	r24, 0x21	; 33
 112:	86 60       	ori	r24, 0x06	; 6
 114:	81 bd       	out	0x21, r24	; 33
			break;
 116:	0f c0       	rjmp	.+30     	; 0x136 <main+0x52>
		case 2:
			WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0); // 2s
 118:	81 b5       	in	r24, 0x21	; 33
 11a:	87 60       	ori	r24, 0x07	; 7
 11c:	81 bd       	out	0x21, r24	; 33
			break;
 11e:	0b c0       	rjmp	.+22     	; 0x136 <main+0x52>
		case 4:
			WDTCR |= (1<<WDP3); // 4s
 120:	81 b5       	in	r24, 0x21	; 33
 122:	80 62       	ori	r24, 0x20	; 32
 124:	81 bd       	out	0x21, r24	; 33
			break;
 126:	07 c0       	rjmp	.+14     	; 0x136 <main+0x52>
		case 8:
			WDTCR |= (1<<WDP3) | (1<<WDP0); // 8s
 128:	81 b5       	in	r24, 0x21	; 33
 12a:	81 62       	ori	r24, 0x21	; 33
 12c:	81 bd       	out	0x21, r24	; 33
			break;
 12e:	03 c0       	rjmp	.+6      	; 0x136 <main+0x52>
		default:
			WDTCR |= (1<<WDP3) | (1<<WDP0); // 8s
 130:	81 b5       	in	r24, 0x21	; 33
 132:	81 62       	ori	r24, 0x21	; 33
 134:	81 bd       	out	0x21, r24	; 33
	}

	// Enable watchdog timer interrupts
	WDTCR |= (1<<WDTIE);
 136:	81 b5       	in	r24, 0x21	; 33
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	81 bd       	out	0x21, r24	; 33

	sei(); // Enable global interrupts
 13c:	78 94       	sei

	// Use the Power Down sleep mode
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	87 7e       	andi	r24, 0xE7	; 231
 142:	80 61       	ori	r24, 0x10	; 16
 144:	85 bf       	out	0x35, r24	; 53

	PORTB = 1<<NPN_TR_PORT; //turn on NPN TR
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	88 bb       	out	0x18, r24	; 24
	for (;;) {
		sleep_mode();   // go to sleep and wait for interrupt...
 14a:	85 b7       	in	r24, 0x35	; 53
 14c:	80 62       	ori	r24, 0x20	; 32
 14e:	85 bf       	out	0x35, r24	; 53
 150:	88 95       	sleep
 152:	85 b7       	in	r24, 0x35	; 53
 154:	8f 7d       	andi	r24, 0xDF	; 223
 156:	85 bf       	out	0x35, r24	; 53
	}
 158:	f8 cf       	rjmp	.-16     	; 0x14a <main+0x66>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
