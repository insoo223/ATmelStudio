
ISR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000014c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f3  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e8  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030b  00000000  00000000  00000acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fd  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  0000113d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__vector_8>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a3 36       	cpi	r26, 0x63	; 99
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	39 d0       	rcall	.+114    	; 0xa0 <main>
  2e:	52 c0       	rjmp	.+164    	; 0xd4 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_8>:
uint8_t WDTtick; //sec counter of UNIT_DELAY_WDT
uint8_t WDTtick1min; //sec counter of UNIT_DELAY_WDT * SET_DELAY_UNIT
uint8_t WDTtick3min; //sec counter of UNIT_DELAY_WDT * SET_DELAY_UNIT * WAKEUP_PERIOD

ISR(WDT_vect) 
{
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	8f 93       	push	r24
  3e:	9f 93       	push	r25
	// --------- INCREASE WDT TICK COUNT ----------------------
	// increase WDTtick every UNIT_DELAY_WDT sec
	++WDTtick;
  40:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <WDTtick>
  44:	8f 5f       	subi	r24, 0xFF	; 255
  46:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <WDTtick>

	// On every SET_DELAY_UNIT,
	//  reset WDTtick count and increase 1min count
	if ((WDTtick >= SET_DELAY_UNIT) && (WDTtick1min < WAKEUP_PERIOD))
  4a:	87 30       	cpi	r24, 0x07	; 7
  4c:	48 f0       	brcs	.+18     	; 0x60 <__SREG__+0x21>
  4e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  52:	83 30       	cpi	r24, 0x03	; 3
  54:	48 f4       	brcc	.+18     	; 0x68 <__SREG__+0x29>
	{
		// Reset WDT 8sec counter
		WDTtick = 0;
  56:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <WDTtick>

		//Increase WDT 1min counter
		++WDTtick1min;
  5a:	8f 5f       	subi	r24, 0xFF	; 255
  5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}//if (WDTtick >= SET_DELAY_UNIT)  && (WDTtick1min < WAKEUP_PERIOD)

	// On every WAKEUP_PERIOD (i.e. 3min)
	if (WDTtick1min >= WAKEUP_PERIOD)
  60:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  64:	83 30       	cpi	r24, 0x03	; 3
  66:	68 f0       	brcs	.+26     	; 0x82 <__SREG__+0x43>
	{
		PORTB ^= 1<<NPN_TR_PORT; //toggle on/off NPN TR
  68:	98 b3       	in	r25, 0x18	; 24
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	89 27       	eor	r24, r25
  6e:	88 bb       	out	0x18, r24	; 24
		// Reset WDT 8sec counter
		WDTtick = 0;
  70:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <WDTtick>
		//Reset WDT 1min counter
		WDTtick1min=0;
  74:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		//Increase WDT 3min counter
		WDTtick3min++;
  78:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <WDTtick3min>
  7c:	8f 5f       	subi	r24, 0xFF	; 255
  7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <WDTtick3min>
	}//if (WDTtick1min >= WAKEUP_PERIOD)

	// After 1hour-long operation, stop all the operation for safety measure.
	if (WDTtick3min >= SYS_STOP_PERIOD)
  82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <WDTtick3min>
  86:	87 32       	cpi	r24, 0x27	; 39
  88:	20 f0       	brcs	.+8      	; 0x92 <__SREG__+0x53>
	{
		// Disable watchdog timer interrupts
		WDTCR &= ~(1<<WDTIE);
  8a:	81 b5       	in	r24, 0x21	; 33
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	81 bd       	out	0x21, r24	; 33
		// Disable global interrupts
		cli(); 
  90:	f8 94       	cli
	}
}//ISR(WDT_vect) 
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <main>:

int main(void) {
	WDTtick=0;
  a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <WDTtick>
	WDTtick1min=0;
  a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	// Set up NPN_TR_PORT mode to output
	DDRB = (1<<NPN_TR_PORT);
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	97 bb       	out	0x17, r25	; 23
			break;
		case 4:
			WDTCR |= (1<<WDP3); // 4s
			break;
		case 8:
			WDTCR |= (1<<WDP3) | (1<<WDP0); // 8s
  ac:	81 b5       	in	r24, 0x21	; 33
  ae:	81 62       	ori	r24, 0x21	; 33
  b0:	81 bd       	out	0x21, r24	; 33
		default:
			WDTCR |= (1<<WDP3) | (1<<WDP0); // 8s
	}

	// Enable watchdog timer interrupts
	WDTCR |= (1<<WDTIE);
  b2:	81 b5       	in	r24, 0x21	; 33
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	81 bd       	out	0x21, r24	; 33

	sei(); // Enable global interrupts
  b8:	78 94       	sei

	// Use the Power Down sleep mode
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	87 7e       	andi	r24, 0xE7	; 231
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	85 bf       	out	0x35, r24	; 53

	PORTB = 1<<NPN_TR_PORT; //turn on NPN TR
  c2:	98 bb       	out	0x18, r25	; 24
	for (;;) {
		sleep_mode();   // go to sleep and wait for interrupt...
  c4:	85 b7       	in	r24, 0x35	; 53
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	85 bf       	out	0x35, r24	; 53
  ca:	88 95       	sleep
  cc:	85 b7       	in	r24, 0x35	; 53
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	85 bf       	out	0x35, r24	; 53
	}
  d2:	f8 cf       	rjmp	.-16     	; 0xc4 <main+0x24>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
